# TypeScript & Bun Development Standards 2025

**Rule Priority:** Core Architecture  
**Activation:** Always Active  
**Scope:** All TypeScript/JavaScript development

## 2025 TypeScript Configuration Standards

### Ultra-Strict Type Safety
```typescript
// REQUIRED: Advanced TypeScript 5.6+ configuration
{
  "compilerOptions": {
    "strict": true,
    "exactOptionalPropertyTypes": true,
    "noUncheckedIndexedAccess": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "verbatimModuleSyntax": true,
    "isolatedModules": true,
    "allowImportingTsExtensions": true,
    "noEmit": true,
    "moduleDetection": "force",
    "target": "ES2025",
    "module": "ESNext",
    "moduleResolution": "bundler"
  }
}
```

### Type Definitions 2025

- **Use `satisfies` operator** for type narrowing with inference preservation
- **Leverage `const` assertions** with template literal types
- **Implement branded types** for domain-specific validation
- **Utilize mapped types** with conditional logic for complex transformations

```typescript
// GOOD: 2025 pattern with satisfies and branded types
type UserId = string & { readonly __brand: unique symbol };
type EmailAddress = string & { readonly __brand: unique symbol };

const userConfig = {
  id: "user123" as UserId,
  email: "user@example.com" as EmailAddress,
  settings: {
    theme: "dark",
    notifications: true
  }
} satisfies UserConfig;

// GOOD: Advanced mapped type patterns
type StrictPick<T, K extends keyof T> = {
  [P in K]: T[P];
} & { [P in Exclude<keyof T, K>]?: never };

// GOOD: Template literal validation
type HTTPMethod = `${'GET' | 'POST' | 'PUT' | 'DELETE'}`;
type APIEndpoint<T extends string> = `/api/v1/${T}`;
```

## Bun Runtime Standards 2025

### Advanced Bun 1.2+ Features

```bash
# REQUIRED: Use Bun's latest performance optimizations
bun install --frozen-lockfile    # Production builds
bun add --dev --optional         # Development dependencies
bun --bun run build             # Force Bun runtime (not Node.js)
bun build --target browser --outdir dist --splitting
```

### High-Performance Patterns

- **Use `Bun.file()` with streaming** for large file operations
- **Leverage `Bun.spawn()` with IPC** for multi-process coordination
- **Implement `Bun.serve()` with WebSocket upgrades** for real-time features
- **Utilize built-in PostgreSQL driver** for database operations

```typescript
// GOOD: Bun 1.2 native PostgreSQL integration
import { Database } from 'bun:sqlite';
import postgres from 'bun:postgres'; // Native driver

// High-performance file streaming
const file = Bun.file('./large-dataset.json');
const stream = file.stream();

// WebSocket server with HTTP/2 support
export default {
  port: 3000,
  fetch(req: Request, server: Server) {
    if (server.upgrade(req)) {
      return; // WebSocket upgrade handled
    }
    return new Response("Regular HTTP response");
  },
  websocket: {
    message(ws, message) {
      ws.send(`Echo: ${message}`);
    },
  },
  error(error) {
    return new Response(`Error: ${error.message}`, { status: 500 });
  },
};
```

## 2025 Error Handling Patterns

### AI-Assisted Error Recovery
```typescript
// 2025 pattern: Self-healing error handlers with context
export abstract class SYMindXError extends Error {
  abstract readonly code: string;
  abstract readonly category: ErrorCategory;
  abstract readonly severity: 'low' | 'medium' | 'high' | 'critical';
  
  constructor(
    message: string,
    public readonly context?: Record<string, unknown>,
    public readonly recoveryHint?: string,
    public readonly aiAssisted: boolean = true
  ) {
    super(message);
    this.name = this.constructor.name;
  }

  toStructuredLog() {
    return {
      error: this.name,
      code: this.code,
      category: this.category,
      severity: this.severity,
      message: this.message,
      context: this.context,
      recovery: this.recoveryHint,
      timestamp: new Date().toISOString(),
      aiEnabled: this.aiAssisted
    };
  }
}

// Enhanced Result pattern with recovery strategies
export type EnhancedResult<T, E = SYMindXError> = 
  | { success: true; data: T; metrics?: PerformanceMetrics }
  | { success: false; error: E; recovery?: () => Promise<EnhancedResult<T, E>> };
```

### Async Error Handling with Observability

```typescript
// GOOD: 2025 observability-first error handling
export async function executeWithTelemetry<T>(
  operation: string,
  fn: () => Promise<T>,
  fallback?: () => Promise<T>
): Promise<EnhancedResult<T>> {
  const startTime = performance.now();
  const traceId = crypto.randomUUID();
  
  try {
    console.time(`${operation}:${traceId}`);
    const result = await fn();
    const metrics = {
      duration: performance.now() - startTime,
      traceId,
      operation
    };
    
    return { success: true, data: result, metrics };
  } catch (error) {
    const enhancedError = new OperationError(
      `Failed to execute ${operation}`,
      { operation, traceId, duration: performance.now() - startTime },
      fallback ? "Fallback available" : "No recovery strategy",
      true
    );
    
    if (fallback) {
      return {
        success: false,
        error: enhancedError,
        recovery: () => executeWithTelemetry(`${operation}:fallback`, fallback)
      };
    }
    
    return { success: false, error: enhancedError };
  } finally {
    console.timeEnd(`${operation}:${traceId}`);
  }
}
```

## Advanced Module Architecture 2025

### Dependency Injection with Modern Patterns

```typescript
// 2025 pattern: Container-less DI with symbols and decorators
const ServiceToken = {
  Logger: Symbol.for('Logger'),
  MemoryProvider: Symbol.for('MemoryProvider'),
  AIPortal: Symbol.for('AIPortal')
} as const;

type ServiceRegistry = {
  [ServiceToken.Logger]: Logger;
  [ServiceToken.MemoryProvider]: MemoryProvider;
  [ServiceToken.AIPortal]: AIPortal;
};

export class ServiceContainer {
  private services = new Map<symbol, unknown>();
  
  register<K extends keyof ServiceRegistry>(
    token: K,
    factory: () => ServiceRegistry[K] | Promise<ServiceRegistry[K]>
  ): void {
    this.services.set(token, factory);
  }
  
  async resolve<K extends keyof ServiceRegistry>(token: K): Promise<ServiceRegistry[K]> {
    const factory = this.services.get(token);
    if (!factory || typeof factory !== 'function') {
      throw new ServiceError(`Service not registered: ${String(token)}`);
    }
    return await factory();
  }
}
```

### Hot-Swappable Module Patterns

```typescript
// 2025 pattern: Module registry with lifecycle hooks
export interface ModuleV2 {
  readonly id: string;
  readonly version: string;
  readonly dependencies: readonly string[];
  readonly capabilities: readonly string[];
  
  initialize(context: ModuleContext): Promise<void>;
  healthCheck(): Promise<HealthStatus>;
  shutdown(): Promise<void>;
  
  // 2025: Hot reload capabilities
  beforeReload?(): Promise<ModuleState>;
  afterReload?(state: ModuleState): Promise<void>;
  validateConfig(config: unknown): config is ModuleConfig;
}

export abstract class HotSwappableModuleV2 implements ModuleV2 {
  protected abstract onHotReload(oldState?: ModuleState): Promise<void>;
  protected abstract captureState(): Promise<ModuleState>;
  protected abstract restoreState(state: ModuleState): Promise<void>;
  
  async beforeReload(): Promise<ModuleState> {
    return await this.captureState();
  }
  
  async afterReload(state: ModuleState): Promise<void> {
    await this.restoreState(state);
    await this.onHotReload(state);
  }
}
```

## Performance Guidelines 2025

### Edge-Optimized Patterns

```typescript
// GOOD: Edge-first design with Bun's WebAPI compatibility
export class EdgeOptimizedService {
  private cache = new Map<string, { data: unknown; expires: number }>();
  
  async handleRequest(request: Request): Promise<Response> {
    const url = new URL(request.url);
    const cacheKey = `${request.method}:${url.pathname}`;
    
    // Edge-compatible caching
    const cached = this.cache.get(cacheKey);
    if (cached && Date.now() < cached.expires) {
      return Response.json(cached.data, {
        headers: { 'X-Cache': 'HIT' }
      });
    }
    
    // Process with streaming support
    const data = await this.processRequest(request);
    
    // Cache with TTL
    this.cache.set(cacheKey, {
      data,
      expires: Date.now() + 60000
    });
    
    return Response.json(data, {
      headers: { 'X-Cache': 'MISS' }
    });
  }
  
  private async processRequest(request: Request) {
    // Use Bun's optimized JSON parsing
    if (request.headers.get('content-type')?.includes('application/json')) {
      return await request.json();
    }
    return { processed: true };
  }
}
```

### Memory Management 2025

- **Implement proper cleanup** with `AbortController` and cleanup callbacks
- **Use `WeakRef` and `FinalizationRegistry`** for automatic resource management
- **Profile with Bun's built-in memory profiler**
- **Leverage Workers** for CPU-intensive tasks without blocking main thread

```typescript
// GOOD: 2025 memory management patterns
export class ResourceManager {
  private resources = new Map<string, WeakRef<Resource>>();
  private cleanup = new FinalizationRegistry((id: string) => {
    this.resources.delete(id);
    console.log(`Resource ${id} garbage collected`);
  });
  
  addResource(id: string, resource: Resource): void {
    const ref = new WeakRef(resource);
    this.resources.set(id, ref);
    this.cleanup.register(resource, id);
  }
  
  getResource(id: string): Resource | undefined {
    const ref = this.resources.get(id);
    return ref?.deref();
  }
}
```

## Code Quality Standards 2025

### Enhanced ESLint Configuration
```json
{
  "extends": [
    "@typescript-eslint/recommended-strict",
    "@typescript-eslint/stylistic"
  ],
  "rules": {
    "@typescript-eslint/consistent-type-imports": ["error", { 
      "prefer": "type-imports",
      "fixStyle": "separate-type-imports"
    }],
    "@typescript-eslint/no-import-type-side-effects": "error",
    "@typescript-eslint/explicit-function-return-type": "error",
    "@typescript-eslint/prefer-readonly": "error",
    "@typescript-eslint/switch-exhaustiveness-check": "error",
    "prefer-const": "error",
    "no-var": "error"
  }
}
```

### AI-Assisted Code Generation

- **Use AI for boilerplate generation** with consistent patterns
- **Implement type-safe AI prompts** for code generation
- **Validate generated code** with automated testing
- **Document AI-generated patterns** for team consistency

This rule ensures TypeScript code in SYMindX leverages the latest 2025 innovations while maintaining the highest quality and performance standards using Bun's cutting-edge capabilities.

## Related Rules and Documentation

### Foundation Requirements
- @001-symindx-workspace.mdc - SYMindX project structure and development environment
- @002-cursor-rules-framework.mdc - Rule organization and cross-reference system
- @.cursor/docs/quick-start.md - Developer onboarding with latest toolchain setup

### Architecture and Performance
- @004-architecture-patterns.mdc - Modular design principles compatible with modern TypeScript
- @012-performance-optimization.mdc - Performance monitoring and optimization strategies
- @.cursor/tools/project-analyzer.md - Code quality analysis tools

### Development Quality
- @008-testing-and-quality-standards.mdc - TypeScript testing strategies and quality metrics  
- @013-error-handling-logging.mdc - Advanced error handling patterns and observability
- @015-configuration-management.mdc - TypeScript configuration and environment management

### Advanced Integration
- @005-ai-integration-patterns.mdc - AI portal development with TypeScript
- @020-mcp-integration.mdc - Model Context Protocol integration patterns
- @022-workflow-automation.mdc - Automated TypeScript workflow optimization

- **README.md** for each major module
- **Architecture decision records** for significant changes

This rule ensures TypeScript code in SYMindX maintains high quality, performance, and maintainability standards while leveraging Bun's capabilities effectively.
