
---
description: UNDERSTAND SYMindX Cursor rules hierarchy when working with project rules
globs: .cursor/rules/*.mdc
---

# Cursor Rules Framework for SYMindX

This document outlines the comprehensive rule framework used in the SYMindX project, providing intelligent navigation and context-aware rule activation for AI agents working within Cursor IDE.

## Framework Overview

The SYMindX Cursor rules framework consists of **24 comprehensive rules** (000-index.mdc + 000-022 core rules) organized in a hierarchical, extensible structure with intelligent cross-referencing and automated verification tools.

### Complete Rule Index

| Rule | Purpose | Dependencies | Triggers |
|------|---------|--------------|----------|
| 000-index.mdc | Master navigation hub | All rules | Always active |
| 000-rules.mdc | Meta-rule defining framework standards | None | *.mdc files |
| 001-symindx-workspace.mdc | Core project architecture | None | Always active |
| 002-cursor-rules-framework.mdc | Framework organization | 000-rules.mdc | *.mdc files |
| 003-typescript-standards.mdc | TypeScript and Bun standards | 001-symindx-workspace.mdc | **/*.ts,**/*.js |
| 004-architecture-patterns.mdc | Modular design patterns | 003-typescript-standards.mdc | Core development |
| 005-ai-integration-patterns.mdc | AI portal integration | 004-architecture-patterns.mdc | AI provider work |
| 006-web-interface-patterns.mdc | React and frontend | 003-typescript-standards.mdc | **/*.tsx,website/** |
| 007-extension-system-patterns.mdc | Platform integrations | 004-architecture-patterns.mdc | Extensions work |
| 008-testing-and-quality-standards.mdc | Testing strategies | All development rules | **/*.test.ts,**/*.spec.ts |
| 009-deployment-and-operations.mdc | Docker and deployment | 001-symindx-workspace.mdc | Docker files |
| 010-security-and-authentication.mdc | Security standards | All system rules | Security-related code |
| 011-data-management-patterns.mdc | Database and memory | 003-typescript-standards.mdc | Memory/database work |
| 012-performance-optimization.mdc | Performance patterns | All development rules | Performance-critical code |
| 013-error-handling-logging.mdc | Error handling patterns | All development rules | Error-prone code |
| 014-cli-and-tooling-patterns.mdc | CLI design patterns | 003-typescript-standards.mdc | CLI development |
| 015-configuration-management.mdc | Config and environment | 010-security-and-authentication.mdc | Config files |
| 016-documentation-standards.mdc | Documentation patterns | None | **/*.md,docs/** |
| 017-community-and-governance.mdc | Open source practices | 016-documentation-standards.mdc | Community files |
| 018-git-hooks.mdc | Git automation | 008-testing-and-quality-standards.mdc | Git operations |
| 019-background-agents.mdc | Cloud-powered agents | 004-architecture-patterns.mdc | Background tasks |
| 020-mcp-integration.mdc | Model Context Protocol | 005-ai-integration-patterns.mdc | MCP work |
| 021-advanced-context.mdc | Context-aware activation | All rules | Dynamic contexts |
| 022-workflow-automation.mdc | Workflow orchestration | All automation rules | Workflow files |

## Documentation and Tools Integration

### Core Documentation (@.cursor/docs/)

The framework integrates closely with comprehensive documentation that agents should reference:

- **@.cursor/docs/quick-start.md** - Developer onboarding and first-time setup
- **@.cursor/docs/architecture.md** - Detailed system architecture documentation  
- **@.cursor/docs/contributing.md** - Development workflow and contribution guidelines

These docs provide essential context for:
- New developer onboarding
- System architecture understanding
- Development workflow guidance
- Code contribution standards

### Development Tools (@.cursor/tools/)

The framework leverages specialized development tools that agents can utilize:

- **@.cursor/tools/project-analyzer.md** - Project structure analysis and code metrics
- **@.cursor/tools/debugging-guide.md** - Comprehensive debugging strategies and troubleshooting
- **@.cursor/tools/code-generator.md** - Component templates and code generation patterns
- **@.cursor/tools/verify-rule-links.js** - Automated cross-reference verification tool

These tools enable:
- Automated project analysis and insights
- Systematic debugging approaches
- Consistent code generation
- Framework quality assurance

## Cross-Reference System

### Reference Syntax
```markdown
@rule-name.mdc           # Direct rule reference
@.cursor/docs/file.md    # Documentation reference
@.cursor/tools/file.md   # Development tool reference
```

### Smart Navigation by Context

**ðŸš€ Starting New Features**
```
Foundation: @001-symindx-workspace.mdc â†’ @003-typescript-standards.mdc
Architecture: @004-architecture-patterns.mdc
Component-Specific: @005-ai-integration-patterns.mdc OR @007-extension-system-patterns.mdc
Quality: @008-testing-and-quality-standards.mdc
Documentation: @.cursor/docs/architecture.md, @.cursor/tools/code-generator.md
```

**ðŸ”§ Daily Development Tasks**
```
Standards: @003-typescript-standards.mdc
Performance: @012-performance-optimization.mdc  
Error Handling: @013-error-handling-logging.mdc
Tools: @.cursor/tools/debugging-guide.md, @.cursor/tools/project-analyzer.md
```

**ðŸ¤– Setting Up Automation**
```
Git Integration: @018-git-hooks.mdc
Background Processing: @019-background-agents.mdc
MCP Integration: @020-mcp-integration.mdc
Workflow Orchestration: @022-workflow-automation.mdc
Documentation: @.cursor/docs/contributing.md
```

**ðŸ§  Component Development**

*AI Portal Development:*
```
Foundation: @005-ai-integration-patterns.mdc
Performance: @012-performance-optimization.mdc
Security: @010-security-and-authentication.mdc
Tools: @.cursor/tools/code-generator.md (Portal templates)
```

*Memory System Development:*
```
Foundation: @011-data-management-patterns.mdc
Performance: @012-performance-optimization.mdc
Security: @010-security-and-authentication.mdc
Architecture: @.cursor/docs/architecture.md (Memory layer)
```

*Extension Development:*
```
Foundation: @007-extension-system-patterns.mdc
Security: @010-security-and-authentication.mdc
Configuration: @015-configuration-management.mdc
Debugging: @.cursor/tools/debugging-guide.md
```

## Rule Dependencies and Prerequisites

### Foundation Layer (Required First)
- @001-symindx-workspace.mdc (Project understanding)
- @003-typescript-standards.mdc (Language standards)
- @.cursor/docs/architecture.md (System architecture)

### Development Layer (Build Upon Foundation)
- @004-architecture-patterns.mdc
- @008-testing-and-quality-standards.mdc
- @013-error-handling-logging.mdc
- @015-configuration-management.mdc

### Component Layer (Specialized Development)
- @005-ai-integration-patterns.mdc (AI portals)
- @007-extension-system-patterns.mdc (Platform integrations)
- @011-data-management-patterns.mdc (Memory systems)
- @006-web-interface-patterns.mdc (Frontend)
- @014-cli-and-tooling-patterns.mdc (CLI tools)

### Operations Layer (Deployment & Management)
- @009-deployment-and-operations.mdc
- @010-security-and-authentication.mdc
- @012-performance-optimization.mdc
- @016-documentation-standards.mdc
- @017-community-and-governance.mdc

### Automation Layer (Advanced Features)
- @018-git-hooks.mdc
- @019-background-agents.mdc
- @020-mcp-integration.mdc
- @021-advanced-context.mdc
- @022-workflow-automation.mdc

## Agent Usage Patterns

### Context-Aware Rule Selection

**When starting any task:**
1. Begin with @000-index.mdc for navigation
2. Reference @001-symindx-workspace.mdc for project context
3. Check @.cursor/docs/architecture.md for system understanding

**For specific development contexts:**
```markdown
New AI Portal â†’ @005-ai-integration-patterns.mdc + @.cursor/tools/code-generator.md
Memory Issues â†’ @011-data-management-patterns.mdc + @.cursor/tools/debugging-guide.md
Performance Problems â†’ @012-performance-optimization.mdc + @.cursor/tools/project-analyzer.md
Extension Development â†’ @007-extension-system-patterns.mdc + @.cursor/docs/contributing.md
```

### Cross-Rule Integration Patterns

**Full-Stack Development Chain:**
```
@001-symindx-workspace.mdc (Foundation)
  â†“
@003-typescript-standards.mdc (Language)
  â†“  
@004-architecture-patterns.mdc (Structure)
  â†“
@005-ai-integration-patterns.mdc (AI Layer)
  â†“
@006-web-interface-patterns.mdc (Frontend)
  â†“
@008-testing-and-quality-standards.mdc (Quality)
```

**Common Rule Combinations:**
- Security + Performance: @010-security-and-authentication.mdc + @012-performance-optimization.mdc
- Development + Testing: Any development rule + @008-testing-and-quality-standards.mdc  
- Configuration + Security: @015-configuration-management.mdc + @010-security-and-authentication.mdc
- Debugging + Analysis: @.cursor/tools/debugging-guide.md + @.cursor/tools/project-analyzer.md

## Quality Assurance

### Automated Verification
Use `@.cursor/tools/verify-rule-links.js` to ensure framework integrity:

```bash
node .cursor/tools/verify-rule-links.js
# Expected: ðŸŒŸ Excellent (100%+ quality score)
# 0 broken references, comprehensive cross-linking
```

### Framework Health Metrics
- **Total Rules**: 24 (000-index.mdc + 000-022 core rules)
- **Cross-References**: 125+ comprehensive links
- **Quality Score**: ðŸŒŸ Excellent (105%+)
- **Coverage**: Foundation â†’ Component â†’ Advanced progression
- **Tools Integration**: Complete docs and tools referencing

## Best Practices

### For Agents
1. **Start with context**: Always check @000-index.mdc for navigation guidance
2. **Follow dependencies**: Respect rule prerequisite chains  
3. **Use tools**: Leverage @.cursor/tools/ for analysis and generation
4. **Reference docs**: Check @.cursor/docs/ for architectural understanding
5. **Verify quality**: Run verification tools to ensure rule compliance

### For Rule Maintenance
1. **Cross-reference everything**: Each rule should link to 3-5 related rules
2. **Update dependencies**: When adding rules, update dependency chains
3. **Document integrations**: Include docs and tools references where relevant
4. **Test verification**: Ensure verify-rule-links.js passes after changes
5. **Maintain hierarchy**: Respect Foundation â†’ Component â†’ Advanced layers

This framework provides comprehensive guidance for any development task within SYMindX, ensuring agents can navigate efficiently through our hierarchical, cross-referenced rule system while leveraging our full documentation and tooling ecosystem.
