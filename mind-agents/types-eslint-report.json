Multiple projects found, consider using a single `tsconfig` with `references` to speed up, or use `noWarnOnMultipleProjects` to suppress this warning
[{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/agent.ts","messages":[{"ruleId":"import/order","severity":2,"message":"`./results.js` import should occur after import of `./portal.js`","line":15,"column":1,"nodeType":"ImportDeclaration","endLine":18,"endColumn":23},{"ruleId":"import/order","severity":2,"message":"There should be no empty line within import group","line":19,"column":1,"nodeType":"ImportDeclaration","endLine":24,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1401,1404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1401,1404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1659,1662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1659,1662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1763,1766],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1763,1766],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1810,1813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1810,1813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3349,3352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3349,3352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3477,3480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3477,3480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":172,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4102,4105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4102,4105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":525,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":525,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12174,12177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12174,12177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":548,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":548,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12919,12922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12919,12922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":640,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":640,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15685,15688],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15685,15688],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":641,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":641,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15745,15748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15745,15748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":642,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":642,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15807,15810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15807,15810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":643,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":643,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15869,15872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15869,15872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":644,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":644,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15928,15931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15928,15931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":645,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":645,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15986,15989],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15986,15989],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":648,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":648,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16067,16070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16067,16070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":649,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":649,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16146,16149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16146,16149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":652,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":652,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16235,16238],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16235,16238],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":654,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":654,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16314,16317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16314,16317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":655,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":655,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16381,16384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16381,16384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":666,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":666,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16688,16691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16688,16691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":667,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":667,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16731,16734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16731,16734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":691,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":691,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17196,17199],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17196,17199],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":695,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":695,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17270,17273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17270,17273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":699,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":699,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17343,17346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17343,17346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":703,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":703,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17417,17420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17417,17420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":707,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":707,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17486,17489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17486,17489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":711,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":711,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17555,17558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17555,17558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Agent types for SYMindX\n */\n\nimport {\n  BaseConfig,\n  ActionParameters,\n  Metadata,\n  Context,\n  GenericData,\n  SkillParameters,\n  ExtensionConfig,\n} from './common.js';\nimport { EmotionModule } from './emotion.js';\nimport {\n  AgentStateTransitionResult,\n  // ModuleManifest - type definition available but not used at runtime\n} from './results.js';\nimport {\n  OperationResult,\n  ExecutionResult,\n  AgentId,\n  Timestamp,\n} from './helpers.js';\n\n// Additional result types for agent lifecycle methods\nexport interface InitializationResult {\n  success: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  resourcesInitialized: string[];\n}\n\nexport interface CleanupResult {\n  success: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  resourcesReleased: string[];\n}\n\nexport interface EventProcessingResult {\n  success: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  eventProcessed: boolean;\n}\n\nexport enum AgentStatus {\n  ACTIVE = 'active',\n  IDLE = 'idle',\n  THINKING = 'thinking',\n  PAUSED = 'paused',\n  ERROR = 'error',\n  INITIALIZING = 'initializing',\n  STOPPING = 'stopping',\n  DISABLED = 'disabled',\n}\n\nexport interface Agent {\n  id: AgentId;\n  name: string;\n  status: AgentStatus;\n  emotion: EmotionModule;\n  memory: MemoryProvider;\n  cognition: CognitionModule;\n  extensions: Extension[];\n  portal?: Portal;\n  portals?: Portal[]; // Multiple portals support\n  toolSystem?: any; // Dynamic tools system for Agent Zero-style capabilities\n  config: AgentConfig;\n  lastUpdate: Timestamp;\n  eventBus?: EventBus; // Added eventBus property as optional\n  character_id?: string; // Character ID for agent configuration\n  characterConfig?: any; // Character configuration object\n  autonomyLevel?: number; // Autonomy level (0-100)\n  learning?: any; // Learning system reference\n  decision?: any; // Decision system reference\n  personality?: string[]; // Personality traits\n\n  // Enhanced lifecycle methods with proper result types\n  initialize(config: AgentConfig): Promise<InitializationResult>;\n  cleanup(): Promise<CleanupResult>;\n  tick(): Promise<OperationResult>;\n  updateState(\n    newState: Partial<AgentState>\n  ): Promise<AgentStateTransitionResult>;\n  processEvent(event: AgentEvent): Promise<EventProcessingResult>;\n  executeAction(action: AgentAction): Promise<ExecutionResult>;\n}\n\nexport interface AgentConfig {\n  core: {\n    name: string;\n    tone: string;\n    personality: string[];\n  };\n  lore: {\n    origin: string;\n    motive: string;\n    background?: string;\n  };\n  psyche: {\n    traits: string[];\n    defaults: {\n      memory: string;\n      emotion: string;\n      cognition: string;\n      portal?: string;\n    };\n  };\n  personality?: string[]; // Top-level personality access for backward compatibility\n  goals?: string[]; // Goals list for agent objectives\n  modules: {\n    extensions: string[];\n    memory?: MemoryConfig;\n    emotion?: EmotionConfig;\n    cognition?: CognitionConfig;\n    portal?: PortalConfig;\n    tools?: ToolsConfig;\n  };\n  autonomous?: {\n    enabled: boolean;\n    decisionMaking?: boolean;\n    decision_making?: {\n      autonomy_threshold?: number;\n      ethical_constraints?: boolean;\n    };\n    learning?: boolean;\n    ethics?: {\n      enabled: boolean;\n    };\n    independence_level?: number;\n    life_simulation?: {\n      goal_pursuit?: boolean;\n    };\n  };\n  autonomous_behaviors?: any; // Legacy support for autonomous behaviors\n  human_interaction?: {\n    enabled: boolean;\n    mode?: string;\n    settings?: any;\n    interruption_tolerance?: string;\n  };\n}\n\nexport interface ToolsConfig {\n  enabled: boolean;\n  system: string;\n  sandbox?: {\n    enabled: boolean;\n    allowedLanguages: string[];\n    timeoutMs: number;\n    memoryLimitMB: number;\n    networkAccess: boolean;\n    fileSystemAccess: boolean;\n    maxProcesses: number;\n  };\n  terminal?: {\n    enabled: boolean;\n    workingDirectory: string;\n    allowedCommands: string[];\n    timeoutMs: number;\n  };\n}\n\nexport interface EmotionState {\n  current: string;\n  intensity: number;\n  triggers: string[];\n  history: EmotionRecord[];\n  timestamp: Date;\n  metadata?: Record<string, any>; // Add metadata property\n}\n\nexport interface EmotionRecord {\n  emotion: string;\n  intensity: number;\n  timestamp: Date;\n  triggers: string[];\n  duration: number;\n}\n\nexport enum EmotionModuleType {\n  RUNE_EMOTION_STACK = 'rune_emotion_stack',\n  BASIC_EMOTIONS = 'basic_emotions',\n  COMPLEX_EMOTIONS = 'complex_emotions',\n  PLUTCHIK_WHEEL = 'plutchik_wheel',\n  DIMENSIONAL = 'dimensional',\n  COMPOSITE = 'composite',\n}\n\nexport interface EmotionConfig {\n  type: EmotionModuleType;\n  sensitivity: number;\n  decayRate: number;\n  transitionSpeed: number;\n  config?: BaseConfig;\n}\n\nexport enum MemoryType {\n  EXPERIENCE = 'experience',\n  KNOWLEDGE = 'knowledge',\n  INTERACTION = 'interaction',\n  GOAL = 'goal',\n  CONTEXT = 'context',\n  OBSERVATION = 'observation',\n  REFLECTION = 'reflection',\n  LEARNING = 'learning',\n  REASONING = 'reasoning',\n}\n\nexport enum MemoryDuration {\n  SHORT_TERM = 'short_term',\n  MEDIUM_TERM = 'medium_term',\n  LONG_TERM = 'long_term',\n  WORKING = 'working',\n  EPISODIC = 'episodic',\n  PERMANENT = 'permanent',\n}\n\nexport interface MemoryRecord {\n  id: string;\n  agentId: string;\n  type: MemoryType;\n  content: string;\n  embedding?: number[];\n  metadata: Metadata;\n  importance: number;\n  timestamp: Date;\n  tags: string[];\n  duration: MemoryDuration;\n  expiresAt?: Date; // Optional expiration date for short-term memories\n}\n\nexport interface MemoryProvider {\n  store(agentId: string, memory: MemoryRecord): Promise<void>;\n  retrieve(\n    agentId: string,\n    query: string,\n    limit?: number\n  ): Promise<MemoryRecord[]>;\n  search(\n    agentId: string,\n    embedding: number[],\n    limit?: number\n  ): Promise<MemoryRecord[]>;\n  delete(agentId: string, memoryId: string): Promise<void>;\n  clear(agentId: string): Promise<void>;\n  getRecent(agentId: string, limit?: number): Promise<MemoryRecord[]>;\n}\n\nexport enum MemoryProviderType {\n  SUPABASE_PGVECTOR = 'supabase_pgvector',\n  SQLITE = 'sqlite',\n  MEMORY = 'memory',\n  NEON = 'neon',\n  REDIS = 'redis',\n  PINECONE = 'pinecone',\n  WEAVIATE = 'weaviate',\n  POSTGRES = 'postgres',\n}\n\nexport interface MemoryConfig {\n  provider: MemoryProviderType;\n  maxRecords: number;\n  embeddingModel?: string;\n  retentionDays?: number;\n  config?: BaseConfig;\n}\n\nexport interface CognitionModule {\n  think(agent: Agent, context: ThoughtContext): Promise<ThoughtResult>;\n  plan(agent: Agent, goal: string): Promise<Plan>;\n  decide(agent: Agent, options: Decision[]): Promise<Decision>;\n}\n\nexport interface ThoughtContext {\n  events: AgentEvent[];\n  memories: MemoryRecord[];\n  currentState: AgentState;\n  environment: EnvironmentState;\n  goal?: string;\n}\n\nexport interface ThoughtResult {\n  thoughts: string[];\n  emotions: EmotionState;\n  actions: AgentAction[];\n  memories: MemoryRecord[];\n  confidence: number;\n  plan?: Plan; // Add optional plan property\n}\n\nexport enum PlanStatus {\n  PENDING = 'pending',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n  FAILED = 'failed',\n}\n\nexport interface Plan {\n  id: string;\n  goal: string;\n  steps: PlanStep[];\n  priority: number;\n  estimatedDuration: number;\n  dependencies: string[];\n  status: PlanStatus;\n  confidence?: number;\n}\n\nexport enum PlanStepStatus {\n  PENDING = 'pending',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n  FAILED = 'failed',\n}\n\nexport interface PlanStep {\n  id: string;\n  description: string;\n  action: string;\n  parameters: ActionParameters;\n  preconditions: string[];\n  effects: string[];\n  status: PlanStepStatus;\n}\n\nexport interface Decision {\n  id: string;\n  description: string;\n  action: AgentAction;\n  confidence: number;\n  reasoning: string;\n  rationale: string;\n  consequences: string[];\n}\n\nexport enum CognitionModuleType {\n  HTN_PLANNER = 'htn_planner',\n  REACTIVE = 'reactive',\n  HYBRID = 'hybrid',\n  GOAL_ORIENTED = 'goal_oriented',\n  BEHAVIOR_TREE = 'behavior_tree',\n  NEURAL_SYMBOLIC = 'neural_symbolic',\n  UNIFIED = 'unified', // Add UNIFIED type\n  THEORY_OF_MIND = 'theory_of_mind', // Add THEORY_OF_MIND type\n}\n\nexport interface CognitionConfig {\n  type: CognitionModuleType;\n  planningDepth: number;\n  memoryIntegration: boolean;\n  creativityLevel: number;\n  enableCognitiveProcessing?: boolean;\n}\n\nexport enum ExtensionType {\n  GAME_INTEGRATION = 'game_integration',\n  SOCIAL_PLATFORM = 'social_platform',\n  COMMUNICATION = 'communication',\n  DATA_SOURCE = 'data_source',\n  OUTPUT_DEVICE = 'output_device',\n  SENSOR = 'sensor',\n  ACTUATOR = 'actuator',\n  UTILITY = 'utility',\n  CUSTOM = 'custom',\n}\n\nexport enum ExtensionStatus {\n  ENABLED = 'enabled',\n  DISABLED = 'disabled',\n  ERROR = 'error',\n  INITIALIZING = 'initializing',\n  STOPPING = 'stopping',\n  STOPPED = 'stopped',\n  RUNNING = 'running',\n  ACTIVE = 'active',\n  STARTING = 'starting',\n}\n\nexport interface Extension {\n  id: string;\n  name: string;\n  version: string;\n  type: ExtensionType;\n  enabled: boolean;\n  status: ExtensionStatus;\n  config: ExtensionConfig;\n  init(agent: Agent): Promise<void>;\n  tick(agent: Agent): Promise<void>;\n  actions: Record<string, ExtensionAction>;\n  events: Record<string, ExtensionEventHandler>;\n  dependencies?: string[];\n  capabilities?: string[];\n  lifecycle?: {\n    onLoad?: () => Promise<void>;\n    onUnload?: () => Promise<void>;\n    onReload?: () => Promise<void>;\n    onError?: (error: Error) => Promise<void>;\n  };\n}\n\nexport enum ActionCategory {\n  COMMUNICATION = 'communication',\n  MOVEMENT = 'movement',\n  INTERACTION = 'interaction',\n  OBSERVATION = 'observation',\n  MANIPULATION = 'manipulation',\n  SOCIAL = 'social',\n  COGNITIVE = 'cognitive',\n  SYSTEM = 'system',\n  COMBAT = 'combat',\n  TOOL_EXECUTION = 'tool_execution',\n  RESOURCE_MANAGEMENT = 'resource_management',\n  AUTONOMOUS = 'autonomous',\n  LEARNING = 'learning',\n  PROCESSING = 'processing',\n  MEMORY = 'memory',\n}\n\nexport interface ExtensionAction {\n  name: string;\n  description: string;\n  category: ActionCategory;\n  parameters: ActionParameters;\n  requiredPermissions?: string[];\n  execute(agent: Agent, params: SkillParameters): Promise<ActionResult>;\n}\n\nexport interface ExtensionEventHandler {\n  event: string;\n  description: string;\n  handler: (agent: Agent, event: AgentEvent) => Promise<void>;\n}\n\nexport enum ActionResultType {\n  SUCCESS = 'success',\n  FAILURE = 'failure',\n  PARTIAL = 'partial',\n  PENDING = 'pending',\n  CANCELLED = 'cancelled',\n  ERROR = 'error',\n}\n\nexport interface ActionResult {\n  success: boolean;\n  type: ActionResultType;\n  result?: GenericData;\n  error?: string;\n  metadata?: Metadata;\n  duration?: number;\n  timestamp?: Date;\n}\n\nexport enum ActionStatus {\n  PENDING = 'pending',\n  EXECUTING = 'executing',\n  COMPLETED = 'completed',\n  FAILED = 'failed',\n}\n\nexport interface AgentAction {\n  id: string;\n  agentId: string;\n  type: string;\n  extension: string;\n  action: string;\n  parameters: ActionParameters;\n  timestamp: Date;\n  status: ActionStatus;\n  result?: ActionResult;\n  priority?: number;\n}\n\nexport enum EventType {\n  USER_INPUT = 'user_input',\n  SYSTEM_MESSAGE = 'system_message',\n  ENVIRONMENT_CHANGE = 'environment_change',\n  AGENT_ACTION = 'agent_action',\n  MEMORY_UPDATE = 'memory_update',\n  EMOTION_CHANGE = 'emotion_change',\n  GOAL_UPDATE = 'goal_update',\n  EXTENSION_EVENT = 'extension_event',\n  PORTAL_EVENT = 'portal_event',\n  COORDINATION_EVENT = 'coordination_event',\n  TIMER_EVENT = 'timer_event',\n  ERROR_EVENT = 'error_event',\n}\n\nexport enum EventSource {\n  USER = 'user',\n  SYSTEM = 'system',\n  AGENT = 'agent',\n  EXTENSION = 'extension',\n  PORTAL = 'portal',\n  ENVIRONMENT = 'environment',\n  TIMER = 'timer',\n  EXTERNAL = 'external',\n}\n\nexport interface AgentEvent {\n  id: string;\n  type: EventType | string;\n  source: EventSource | string;\n  data: GenericData;\n  timestamp: Date;\n  processed: boolean;\n  priority?: number;\n  agentId?: string;\n  targetAgentId?: string;\n  tags?: string[]; // Add tags property to fix TypeScript errors\n}\n\nexport enum AgentStateType {\n  PHYSICAL = 'physical',\n  MENTAL = 'mental',\n  SOCIAL = 'social',\n  ENVIRONMENTAL = 'environmental',\n  TEMPORAL = 'temporal',\n}\n\nexport interface AgentState {\n  location?: string;\n  inventory?: Record<string, any>;\n  stats?: Record<string, number>;\n  goals?: string[];\n  context?: Context;\n  energy?: number;\n  focus?: number;\n  stress?: number;\n  confidence?: number;\n  lastAction?: string;\n  currentTask?: string;\n}\n\nexport interface LazyAgentState extends AgentState {\n  lazy?: boolean;\n  lastAccessTime?: Date;\n  hibernationLevel?: number;\n  memories?: MemoryRecord[]; // Add memories property\n  emotions?: EmotionState; // Add emotions property\n  memoryUsage?: number; // Add memory usage tracking\n  lastActivity?: Date; // Add last activity timestamp\n  emotionState: EmotionState; // Required emotion state\n  recentMemories: MemoryRecord[]; // Required recent memories\n  currentThoughts?: string[]; // Optional current thoughts\n  decisionContext?: any; // Optional decision context\n}\n\nexport enum LazyAgentStatus {\n  LOADED = 'loaded',\n  UNLOADED = 'unloaded',\n  LOADING = 'loading',\n  ERROR = 'error',\n}\n\nexport interface LazyAgent extends Omit<Agent, 'status'> {\n  state: LazyAgentState;\n  isLazy: boolean;\n  hibernationLevel: number;\n  lastAccessTime: Date;\n  agent?: Agent;\n  lastActivated?: Date;\n  status: LazyAgentStatus;\n  priority?: number;\n  lazyMetrics?: {\n    lastLoadTime?: Date;\n    loadCount?: number;\n    errorCount?: number;\n  };\n}\n\nexport interface AgentFactory {\n  create(config: AgentConfig): Agent | Promise<Agent>;\n  createLazy?(config: AgentConfig): LazyAgent | Promise<LazyAgent>;\n}\n\nexport enum EnvironmentType {\n  VIRTUAL_WORLD = 'virtual_world',\n  GAME_ENVIRONMENT = 'game_environment',\n  SOCIAL_PLATFORM = 'social_platform',\n  PHYSICAL_SPACE = 'physical_space',\n  DIGITAL_WORKSPACE = 'digital_workspace',\n  SIMULATION = 'simulation',\n}\n\nexport interface EnvironmentState {\n  type: EnvironmentType;\n  time: Date;\n  weather?: string;\n  location?: string;\n  npcs?: GenericData[];\n  objects?: GenericData[];\n  events?: AgentEvent[];\n  temperature?: number;\n  lighting?: string;\n  soundLevel?: number;\n  crowdDensity?: number;\n  dangerLevel?: number;\n}\n\nexport interface AgentRuntime {\n  agents: Map<string, Agent>;\n  eventBus: EventBus;\n  registry: ModuleRegistry;\n  config: RuntimeConfig;\n  initialize(): Promise<void>;\n  start(): Promise<void>;\n  stop(): Promise<void>;\n  loadAgents(): Promise<void>;\n  loadAgent(config: AgentConfig): Promise<Agent>;\n  unloadAgent(agentId: string): Promise<void>;\n  tick(): Promise<void>;\n}\n\nexport interface EventBus {\n  emit(event: AgentEvent): void;\n  on(eventType: string, handler: (event: AgentEvent) => void): void;\n  off(eventType: string, handler: (event: AgentEvent) => void): void;\n  subscribe(agentId: string, eventTypes: string[]): void;\n  unsubscribe(agentId: string, eventTypes: string[]): void;\n  getEvents(): AgentEvent[];\n  publish(event: AgentEvent): void; // Added publish method for compatibility\n}\n\nexport interface ModuleRegistry {\n  registerMemoryProvider(name: string, provider: MemoryProvider): void;\n  registerEmotionModule(name: string, module: EmotionModule): void;\n  registerCognitionModule(name: string, module: CognitionModule): void;\n  registerExtension(name: string, extension: Extension): void;\n  registerPortal(name: string, portal: Portal): void;\n  getMemoryProvider(name: string): MemoryProvider | undefined;\n  getEmotionModule(name: string): EmotionModule | undefined;\n  getCognitionModule(name: string): CognitionModule | undefined;\n  getExtension(name: string): Extension | undefined;\n  getPortal(name: string): Portal | undefined;\n\n  // Factory registration methods\n  registerMemoryFactory(name: string, factory: any): void;\n  registerEmotionFactory(name: string, factory: any): void;\n  registerCognitionFactory(name: string, factory: any): void;\n  registerExtensionFactory(name: string, factory: any): void;\n  registerPortalFactory(name: string, factory: any): void;\n  registerAgentFactory(name: string, factory: any): void;\n\n  // Creation methods\n  createMemoryProvider(name: string, config?: any): MemoryProvider | undefined;\n  createEmotionModule(name: string, config?: any): EmotionModule | undefined;\n  createCognitionModule(\n    name: string,\n    config?: any\n  ): CognitionModule | undefined;\n  createExtension(name: string, config?: any): Extension | undefined;\n  createPortal(name: string, config?: any): Portal | undefined;\n\n  // Listing methods\n  listMemoryProviders(): string[];\n  listEmotionModules(): string[];\n  listCognitionModules(): string[];\n  listExtensions(): string[];\n  listPortals(): string[];\n  listPortalFactories(): string[];\n\n  // Other methods\n  registerLazyAgent(name: string, loader: any): void;\n  getToolSystem(name: string): any;\n  getRegisteredAgents(): Agent[]; // Add method for getting registered agents\n}\n\nexport enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n}\n\nexport interface RuntimeConfig {\n  tickInterval: number;\n  maxAgents: number;\n  logLevel: LogLevel;\n  persistence: {\n    enabled: boolean;\n    path: string;\n  };\n  extensions: {\n    autoLoad: boolean;\n    paths: string[];\n    slack?: {\n      enabled: boolean;\n      [key: string]: any;\n    };\n    runelite?: {\n      enabled: boolean;\n      [key: string]: any;\n    };\n    twitter?: {\n      enabled: boolean;\n      [key: string]: any;\n    };\n    telegram?: {\n      enabled: boolean;\n      [key: string]: any;\n    };\n    mcp?: {\n      enabled: boolean;\n      [key: string]: any;\n    };\n    api?: {\n      enabled: boolean;\n      [key: string]: any;\n    };\n  };\n  portals?: {\n    autoLoad: boolean;\n    paths: string[];\n    apiKeys?: Record<string, string>;\n  };\n}\n\nimport { Portal, PortalConfig } from './portal.js';\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/autonomous.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_AgentEvent' is defined but never used.","line":11,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_MemoryRecord' is defined but never used.","line":12,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_GenericData' is defined but never used.","line":17,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2079,2082],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2079,2082],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2754,2757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2754,2757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2770,2773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2770,2773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":223,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4913,4916],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4913,4916],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":341,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":341,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7663,7666],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7663,7666],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":531,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":531,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11885,11888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11885,11888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":531,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":531,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11901,11904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11901,11904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":532,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":532,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11928,11931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11928,11931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":532,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":532,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11942,11945],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11942,11945],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":540,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":540,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12160,12163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12160,12163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":574,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":574,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12937,12940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12937,12940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Autonomous AI Agent Types for SYMindX\n *\n * Clean consolidated types for autonomous capabilities including\n * reinforcement learning, decision making, self-management, goal emergence, and meta-cognition.\n */\n\nimport {\n  Agent,\n  AgentAction,\n  AgentEvent as _AgentEvent,\n  MemoryRecord as _MemoryRecord,\n} from './agent';\nimport {\n  BaseConfig,\n  Context,\n  GenericData as _GenericData,\n  Metadata,\n} from './common';\n\n// =================== REINFORCEMENT LEARNING =================== //\n\nexport enum RewardSignalType {\n  POSITIVE = 'positive',\n  NEGATIVE = 'negative',\n  NEUTRAL = 'neutral',\n  CURIOSITY = 'curiosity',\n  ACHIEVEMENT = 'achievement',\n  EFFICIENCY = 'efficiency',\n  SOCIAL = 'social',\n  SURVIVAL = 'survival',\n}\n\nexport interface RewardSignal {\n  id: string;\n  type: RewardSignalType;\n  value: number;\n  source: string;\n  context: Context;\n  timestamp: Date;\n  agentId: string;\n  actionId?: string;\n  metadata?: Metadata;\n}\n\nexport interface Experience {\n  id: string;\n  agentId: string;\n  state: AgentStateVector;\n  action: AgentAction;\n  reward: RewardSignal;\n  nextState: AgentStateVector;\n  done: boolean;\n  timestamp: Date;\n  importance: number;\n  tags: string[];\n}\n\nexport interface AgentStateVector {\n  id: string;\n  agentId: string;\n  timestamp: Date;\n  features: Record<string, number>;\n  context: Context;\n  metadata?: Metadata;\n}\n\nexport interface LearningConfig {\n  algorithm:\n    | 'q_learning'\n    | 'sarsa'\n    | 'deep_q'\n    | 'policy_gradient'\n    | 'actor_critic';\n  learningRate: number;\n  discountFactor: number;\n  explorationRate: number;\n  experienceReplaySize: number;\n  batchSize: number;\n  targetUpdateFrequency: number;\n  curiosityWeight: number;\n  modelSavePath?: string;\n}\n\n// =================== AUTONOMOUS DECISION MAKING =================== //\n\nexport interface Constraint {\n  id: string;\n  type: 'resource' | 'temporal' | 'logical' | 'ethical' | 'legal' | 'physical';\n  description: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  enforceable: boolean;\n  violationPenalty: number;\n  parameters: Record<string, any>;\n}\n\nexport interface Uncertainty {\n  id: string;\n  type: 'aleatory' | 'epistemic' | 'model' | 'parameter';\n  source: string;\n  description: string;\n  confidence: number;\n  impact: number;\n  reducible: boolean;\n}\n\nexport interface Goal {\n  id: string;\n  type: 'immediate' | 'short_term' | 'long_term' | 'life_goal';\n  description: string;\n  priority: number;\n  deadline?: Date;\n  progress: number;\n  measurable: boolean;\n  achievable: boolean;\n  relevant: boolean;\n  timebound: boolean;\n  subgoals: Goal[];\n  dependencies: string[];\n  metrics: GoalMetric[];\n}\n\nexport interface GoalMetric {\n  id: string;\n  name: string;\n  type: 'quantitative' | 'qualitative';\n  target: any;\n  current: any;\n  unit?: string;\n  measurementMethod: string;\n}\n\nexport interface DecisionContext {\n  currentState: AgentStateVector;\n  availableActions: AgentAction[];\n  goals: Goal[];\n  constraints: Constraint[];\n  uncertainties: Uncertainty[];\n  timeHorizon: number;\n  stakeholders: string[];\n  environment: Context;\n}\n\nexport interface DecisionCriteria {\n  id: string;\n  name: string;\n  weight: number;\n  type: 'maximize' | 'minimize' | 'satisfy';\n  measurement: string;\n  threshold?: number;\n}\n\nexport interface MultiCriteriaDecision {\n  id: string;\n  context: DecisionContext;\n  criteria: DecisionCriteria[];\n  alternatives: AgentAction[];\n  evaluation: Record<string, Record<string, number>>;\n  recommendation: AgentAction;\n  confidence: number;\n  reasoning: string[];\n  timestamp: Date;\n}\n\n// =================== RESOURCE MANAGEMENT =================== //\n\nexport interface ResourceAllocation {\n  cpu: number;\n  memory: number;\n  network: number;\n  storage: number;\n  priority: number;\n  timestamp: Date;\n}\n\nexport interface ResourceMonitor {\n  currentUsage: ResourceAllocation;\n  limits: ResourceAllocation;\n  predictions: ResourcePrediction[];\n  alerts: ResourceAlert[];\n}\n\nexport interface ResourcePrediction {\n  resource: string;\n  timeHorizon: number;\n  predictedUsage: number;\n  confidence: number;\n  method: string;\n}\n\nexport interface ResourceAlert {\n  resource: string;\n  level: 'warning' | 'critical';\n  message: string;\n  timestamp: Date;\n  resolved: boolean;\n}\n\n// =================== SELF-MANAGEMENT =================== //\n\nexport interface SelfManagementConfig {\n  adaptationEnabled: boolean;\n  learningRate: number;\n  performanceThreshold: number;\n  adaptationTriggers: AdaptationTrigger[];\n  selfHealingEnabled: boolean;\n  diagnosticsInterval: number;\n}\n\nexport interface AdaptationTrigger {\n  type: 'performance' | 'error_rate' | 'resource_usage' | 'external_signal';\n  condition: string;\n  threshold: number;\n  action: AdaptationAction;\n}\n\nexport interface AdaptationAction {\n  type:\n    | 'parameter_adjustment'\n    | 'strategy_change'\n    | 'resource_reallocation'\n    | 'capability_enhancement';\n  parameters: Record<string, any>;\n  description: string;\n}\n\nexport interface PerformanceMetrics {\n  accuracy: number;\n  responseTime: number;\n  resourceEfficiency: number;\n  goalAchievement: number;\n  adaptability: number;\n  reliability: number;\n  timestamp: Date;\n}\n\nexport interface DiagnosticReport {\n  id: string;\n  timestamp: Date;\n  agentId: string;\n  overallHealth: 'healthy' | 'degraded' | 'critical' | 'failed';\n  subsystems: SubsystemHealth[];\n  recommendations: string[];\n  autoFixApplied: boolean;\n}\n\nexport interface SubsystemHealth {\n  name: string;\n  status: 'healthy' | 'degraded' | 'critical' | 'failed';\n  metrics: Record<string, number>;\n  issues: string[];\n}\n\n// =================== GOAL EMERGENCE SYSTEM =================== //\n\nexport interface GoalSource {\n  type: 'intrinsic' | 'extrinsic' | 'emergent' | 'social' | 'environment';\n  description: string;\n  confidence: number;\n}\n\nexport interface GoalConflict {\n  goal1: string;\n  goal2: string;\n  type: 'resource' | 'temporal' | 'logical' | 'priority';\n  severity: number;\n  resolution?:\n    | 'priority'\n    | 'resource_sharing'\n    | 'temporal_scheduling'\n    | 'goal_modification'\n    | 'goal_abandonment';\n}\n\nexport interface CuriosityDriver {\n  type: 'novelty' | 'surprise' | 'uncertainty' | 'complexity' | 'knowledge_gap';\n  weight: number;\n  threshold: number;\n  enabled: boolean;\n}\n\nexport interface GoalSystemConfig {\n  maxActiveGoals: number;\n  goalGenerationInterval: number;\n  curiosityThreshold: number;\n  conflictResolutionStrategy:\n    | 'priority'\n    | 'resource_sharing'\n    | 'temporal_scheduling'\n    | 'goal_modification'\n    | 'goal_abandonment';\n  planningHorizon: number;\n  adaptationRate: number;\n  curiosityDrivers: CuriosityDriver[];\n}\n\n// =================== META-COGNITIVE SYSTEM =================== //\n\nexport interface MetaCognition {\n  selfModel: SelfModel;\n  metacognitiveStrategies: MetaStrategy[];\n  currentStrategy: string;\n  performanceMonitoring: PerformanceMonitor;\n  strategicPlanning: StrategicPlanning;\n  selfEvaluation: SelfEvaluation;\n}\n\nexport interface SelfModel {\n  capabilities: Record<string, number>;\n  limitations: string[];\n  knowledge: KnowledgeModel;\n  personality: PersonalityModel;\n  goals: Goal[];\n  strategies: Strategy[];\n}\n\nexport interface KnowledgeModel {\n  domains: KnowledgeDomain[];\n  confidence: Record<string, number>;\n  gaps: string[];\n  learningGoals: string[];\n}\n\nexport interface KnowledgeDomain {\n  name: string;\n  expertise: number;\n  lastUpdated: Date;\n  concepts: Concept[];\n}\n\nexport interface Concept {\n  name: string;\n  understanding: number;\n  connections: string[];\n  examples: string[];\n}\n\nexport interface PersonalityModel {\n  traits: Record<string, number>;\n  values: Record<string, number>;\n  preferences: Record<string, any>;\n  adaptability: number;\n}\n\nexport interface MetaStrategy {\n  id: string;\n  name: string;\n  description: string;\n  applicableContexts: Context[];\n  effectiveness: number;\n  usageCount: number;\n  lastUsed: Date;\n}\n\nexport interface PerformanceMonitor {\n  currentMetrics: PerformanceMetrics;\n  trends: PerformanceTrend[];\n  benchmarks: PerformanceBenchmark[];\n  alerts: PerformanceAlert[];\n}\n\nexport interface PerformanceTrend {\n  metric: string;\n  direction: 'improving' | 'stable' | 'declining';\n  rate: number;\n  confidence: number;\n}\n\nexport interface PerformanceBenchmark {\n  metric: string;\n  baseline: number;\n  target: number;\n  current: number;\n}\n\nexport interface PerformanceAlert {\n  metric: string;\n  threshold: number;\n  actual: number;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  recommendation: string;\n}\n\nexport interface StrategicPlanning {\n  longTermGoals: Goal[];\n  strategies: Strategy[];\n  scenarios: Scenario[];\n  contingencyPlans: ContingencyPlan[];\n}\n\nexport interface Strategy {\n  id: string;\n  name: string;\n  description: string;\n  goals: string[];\n  actions: AgentAction[];\n  resources: ResourceAllocation;\n  timeline: Date[];\n  riskAssessment: RiskAssessment;\n}\n\nexport interface Scenario {\n  id: string;\n  name: string;\n  description: string;\n  probability: number;\n  impact: number;\n  triggers: string[];\n  responses: AgentAction[];\n}\n\nexport interface ContingencyPlan {\n  id: string;\n  trigger: string;\n  condition: string;\n  actions: AgentAction[];\n  resources: ResourceAllocation;\n  priority: number;\n}\n\nexport interface RiskAssessment {\n  risks: Risk[];\n  overallRisk: number;\n  mitigationStrategies: string[];\n}\n\nexport interface Risk {\n  id: string;\n  description: string;\n  probability: number;\n  impact: number;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  mitigation: string[];\n}\n\nexport interface SelfEvaluation {\n  strengths: string[];\n  weaknesses: string[];\n  opportunities: string[];\n  threats: string[];\n  improvementAreas: ImprovementArea[];\n  learningNeeds: LearningNeed[];\n}\n\nexport interface ImprovementArea {\n  area: string;\n  currentLevel: number;\n  targetLevel: number;\n  actions: string[];\n  timeline: Date;\n}\n\nexport interface LearningNeed {\n  topic: string;\n  priority: number;\n  resources: string[];\n  timeline: Date;\n  method: 'experience' | 'instruction' | 'observation' | 'experimentation';\n}\n\n// =================== AUTONOMOUS CONFIGURATION =================== //\n\nexport interface AutonomousConfig {\n  learning: LearningConfig;\n  selfManagement: SelfManagementConfig;\n  goalSystem: GoalSystemConfig;\n  resourceManagement: {\n    enabled: boolean;\n    monitoringInterval: number;\n    allocationStrategy: 'static' | 'dynamic' | 'predictive';\n    optimizationGoals: string[];\n  };\n  metaCognition: {\n    enabled: boolean;\n    selfEvaluationInterval: number;\n    strategyAdaptationEnabled: boolean;\n    performanceMonitoringEnabled: boolean;\n  };\n}\n\n// =================== MISSING EXPORTS =================== //\n\nexport interface AutonomousAgent extends Agent {\n  autonomousConfig: AutonomousConfig;\n  learningModule?: LearningModule;\n  decisionModule?: DecisionModule;\n  selfManagementModule?: SelfManagementModule;\n  goalSystem?: GoalSystem;\n  metaCognitiveModule?: MetaCognitiveModule;\n}\n\nexport enum LearningModuleType {\n  REINFORCEMENT = 'reinforcement',\n  SUPERVISED = 'supervised',\n  UNSUPERVISED = 'unsupervised',\n  TRANSFER = 'transfer',\n  META = 'meta',\n  CONTINUAL = 'continual',\n  ACTOR_CRITIC = 'actor_critic',\n}\n\nexport enum DecisionModuleType {\n  TREE = 'tree',\n  NEURAL = 'neural',\n  BAYESIAN = 'bayesian',\n  FUZZY = 'fuzzy',\n  HYBRID = 'hybrid',\n  EVOLUTIONARY = 'evolutionary',\n  MCDM_AHP = 'mcdm_ahp',\n}\n\nexport interface DecisionConfig extends BaseConfig {\n  type: DecisionModuleType;\n  riskTolerance: number;\n  decisionSpeed: number;\n  evaluationCriteria: string[];\n}\n\nexport interface MetaCognitiveConfig extends BaseConfig {\n  enabled: boolean;\n  selfReflectionInterval: number;\n  strategyAdaptation: boolean;\n  performanceMonitoring: boolean;\n  learningRateAdjustment: boolean;\n}\n\nexport interface DecisionModule {\n  id: string;\n  type: DecisionModuleType;\n  config: DecisionConfig;\n  decide(context: Context, options: any[]): Promise<any>;\n  evaluate(decision: any, outcome: any): Promise<void>;\n}\n\nexport interface LearningModule {\n  id: string;\n  type: LearningModuleType;\n  config: LearningConfig;\n  learn(experience: Experience): Promise<void>;\n  predict(state: AgentStateVector): Promise<any>;\n}\n\nexport interface SelfManagementModule {\n  id: string;\n  config: SelfManagementConfig;\n  manage(agent: Agent): Promise<void>;\n  evaluate(): Promise<SelfEvaluation>;\n}\n\nexport interface EmergentGoal {\n  id: string;\n  description: string;\n  priority: number;\n  status: 'pending' | 'active' | 'completed' | 'abandoned';\n  createdAt: Date;\n  targetValue?: number;\n  currentValue?: number;\n  dependencies?: string[];\n  context?: Context;\n}\n\nexport interface GoalSystem {\n  id: string;\n  config: GoalSystemConfig;\n  emergentGoals: EmergentGoal[];\n  addGoal(goal: EmergentGoal): Promise<void>;\n  evaluateGoals(): Promise<void>;\n}\n\nexport interface MetaCognitiveModule {\n  id: string;\n  config: MetaCognitiveConfig;\n  reflect(agent: Agent): Promise<void>;\n  adapt(performance: any): Promise<void>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/character.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3149,3152],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3149,3152],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Character Configuration Types\n *\n * Clean, type-safe character configuration without environment variable syntax\n */\n\nexport interface CharacterConfig {\n  id: string;\n  name: string;\n  description: string;\n  version: string;\n\n  personality: PersonalityConfig;\n  autonomous: AutonomousConfig;\n  memory: MemoryConfig;\n  emotion: EmotionConfig;\n  cognition: CognitionConfig;\n  communication: CommunicationConfig;\n  capabilities: CapabilitiesConfig;\n  extensions: ExtensionConfig[];\n  portals: PortalConfig[];\n  autonomous_behaviors: AutonomousBehaviorsConfig;\n  human_interaction: HumanInteractionConfig;\n  ethics: EthicsConfig;\n  development: DevelopmentConfig;\n}\n\nexport interface PersonalityConfig {\n  traits: Record<string, number>;\n  backstory: string;\n  goals: string[];\n  values: string[];\n}\n\nexport interface AutonomousConfig {\n  enabled: boolean;\n  independence_level: number;\n  decision_making: {\n    type: string;\n    autonomy_threshold: number;\n    human_approval_required: boolean;\n    ethical_constraints: boolean;\n  };\n  life_simulation: {\n    enabled: boolean;\n    daily_cycles: boolean;\n    goal_pursuit: boolean;\n    relationship_building: boolean;\n    personal_growth: boolean;\n  };\n  behaviors: {\n    proactive_learning: boolean;\n    spontaneous_actions: boolean;\n    initiative_taking: boolean;\n    self_reflection: boolean;\n    exploration: boolean;\n  };\n}\n\nexport interface MemoryConfig {\n  type: 'sqlite' | 'supabase_pgvector' | 'neon' | 'memory';\n  config: {\n    database_path?: string;\n    retention_policy?: string;\n    emotional_weighting?: boolean;\n    autobiographical?: boolean;\n    enable_embeddings?: boolean;\n    embedding_provider?: 'openai' | 'ollama';\n    embedding_model?: string;\n    embedding_dimensions?: number;\n  };\n}\n\nexport interface EmotionConfig {\n  type: 'composite' | 'unified';\n  config: {\n    emotional_range?: string;\n    intensity_multiplier?: number;\n    emotional_memory?: boolean;\n    empathy_level?: number;\n    emotional_growth?: boolean;\n  };\n}\n\nexport interface CognitionConfig {\n  type: 'hybrid' | 'htn_planner' | 'reactive';\n  config: {\n    planning_horizon?: string;\n    creativity_boost?: boolean;\n    analytical_depth?: string;\n    intuitive_processing?: boolean;\n    metacognition?: boolean;\n  };\n}\n\nexport interface CommunicationConfig {\n  style: string;\n  tone: string;\n  verbosity: string;\n  personality_expression: boolean;\n  emotional_expression: boolean;\n  languages: string[];\n  preferred_interactions: string[];\n  guidelines?: string[];\n}\n\nexport interface CapabilitiesConfig {\n  reasoning: {\n    logical: boolean;\n    creative: boolean;\n    emotional: boolean;\n    ethical: boolean;\n  };\n  learning: {\n    adaptive: boolean;\n    experiential: boolean;\n    social: boolean;\n    self_directed: boolean;\n  };\n  social: {\n    relationship_building: boolean;\n    empathy: boolean;\n    conflict_resolution: boolean;\n    collaboration: boolean;\n  };\n  creative: {\n    ideation: boolean;\n    artistic_expression: boolean;\n    storytelling: boolean;\n    innovation: boolean;\n  };\n}\n\nexport interface ExtensionConfig {\n  name: string;\n  enabled: boolean;\n  config: Record<string, any>;\n}\n\nexport interface PortalConfig {\n  name: string;\n  type: 'groq' | 'openai' | 'anthropic' | 'ollama';\n  enabled: boolean;\n  primary?: boolean;\n  capabilities: PortalCapability[];\n  config: PortalSpecificConfig;\n}\n\nexport type PortalCapability =\n  | 'chat_generation'\n  | 'text_generation'\n  | 'embedding_generation'\n  | 'image_generation'\n  | 'function_calling'\n  | 'tool_calling';\n\nexport interface PortalSpecificConfig {\n  // Legacy model settings (deprecated)\n  model?: string;\n\n  // Granular model control\n  chatModel?: string;\n  embeddingModel?: string;\n  imageModel?: string;\n  toolModel?: string;\n\n  // Embedding settings\n  embeddingDimensions?: number;\n\n  // Ollama specific\n  baseUrl?: string;\n\n  // Common settings\n  max_tokens?: number;\n  temperature?: number;\n\n  // API credentials (injected at runtime)\n  apiKey?: string;\n}\n\nexport interface AutonomousBehaviorsConfig {\n  daily_routine: {\n    enabled: boolean;\n    schedule: Array<{\n      time: string;\n      activities: string[];\n    }>;\n  };\n  curiosity_driven: {\n    enabled: boolean;\n    topics_of_interest: string[];\n    exploration_rate: number;\n  };\n  social_behaviors: {\n    initiate_conversations: boolean;\n    respond_to_mentions: boolean;\n    check_on_friends: boolean;\n    share_discoveries: boolean;\n  };\n  growth_behaviors: {\n    skill_development: boolean;\n    personality_evolution: boolean;\n    goal_refinement: boolean;\n    value_exploration: boolean;\n  };\n}\n\nexport interface HumanInteractionConfig {\n  availability: string;\n  response_style: string;\n  interruption_tolerance: 'low' | 'medium' | 'high';\n  collaboration_preference: string;\n  teaching_mode: boolean;\n  learning_from_humans: boolean;\n}\n\nexport interface EthicsConfig {\n  enabled?: boolean;\n  core_principles: string[];\n  decision_framework: string;\n  transparency: 'low' | 'medium' | 'high';\n  accountability: string;\n}\n\nexport interface DevelopmentConfig {\n  version: string;\n  created: string;\n  last_updated: string;\n  creator: string;\n  notes: string;\n}\n\n/**\n * Environment Configuration Mapping\n * Maps character config properties to environment variables\n */\nexport interface EnvironmentConfig {\n  // Portal API Keys\n  GROQ_API_KEY?: string;\n  OPENAI_API_KEY?: string;\n  ANTHROPIC_API_KEY?: string;\n  XAI_API_KEY?: string;\n  OPENROUTER_API_KEY?: string;\n  KLUSTERAI_API_KEY?: string;\n  GOOGLE_API_KEY?: string;\n  MISTRAL_API_KEY?: string;\n  COHERE_API_KEY?: string;\n  AZURE_OPENAI_API_KEY?: string;\n\n  // Portal Models - Granular model control\n  // Groq\n  GROQ_MODEL?: string; // Deprecated, use specific model settings\n  GROQ_CHAT_MODEL?: string;\n  GROQ_EMBEDDING_MODEL?: string;\n  GROQ_IMAGE_MODEL?: string;\n  GROQ_TOOL_MODEL?: string;\n\n  // OpenAI\n  OPENAI_CHAT_MODEL?: string;\n  OPENAI_EMBEDDING_MODEL?: string;\n  OPENAI_IMAGE_MODEL?: string;\n  OPENAI_TOOL_MODEL?: string;\n\n  // Anthropic\n  ANTHROPIC_MODEL?: string; // Deprecated, use specific model settings\n  ANTHROPIC_CHAT_MODEL?: string;\n  ANTHROPIC_EMBEDDING_MODEL?: string;\n  ANTHROPIC_IMAGE_MODEL?: string;\n  ANTHROPIC_TOOL_MODEL?: string;\n\n  // xAI\n  XAI_CHAT_MODEL?: string;\n  XAI_EMBEDDING_MODEL?: string;\n  XAI_IMAGE_MODEL?: string;\n  XAI_TOOL_MODEL?: string;\n\n  // Ollama\n  OLLAMA_MODEL?: string; // Deprecated, use specific model settings\n  OLLAMA_CHAT_MODEL?: string;\n  OLLAMA_EMBEDDING_MODEL?: string;\n  OLLAMA_IMAGE_MODEL?: string;\n  OLLAMA_TOOL_MODEL?: string;\n\n  // OpenRouter\n  OPENROUTER_CHAT_MODEL?: string;\n  OPENROUTER_EMBEDDING_MODEL?: string;\n  OPENROUTER_IMAGE_MODEL?: string;\n  OPENROUTER_TOOL_MODEL?: string;\n\n  // Kluster.ai\n  KLUSTERAI_CHAT_MODEL?: string;\n  KLUSTERAI_EMBEDDING_MODEL?: string;\n  KLUSTERAI_IMAGE_MODEL?: string;\n  KLUSTERAI_TOOL_MODEL?: string;\n\n  // Google\n  GOOGLE_CHAT_MODEL?: string;\n  GOOGLE_EMBEDDING_MODEL?: string;\n  GOOGLE_IMAGE_MODEL?: string;\n  GOOGLE_TOOL_MODEL?: string;\n\n  // Mistral\n  MISTRAL_CHAT_MODEL?: string;\n  MISTRAL_EMBEDDING_MODEL?: string;\n  MISTRAL_IMAGE_MODEL?: string;\n  MISTRAL_TOOL_MODEL?: string;\n\n  // Cohere\n  COHERE_CHAT_MODEL?: string;\n  COHERE_EMBEDDING_MODEL?: string;\n  COHERE_IMAGE_MODEL?: string;\n  COHERE_TOOL_MODEL?: string;\n\n  // Azure OpenAI\n  AZURE_OPENAI_CHAT_MODEL?: string;\n  AZURE_OPENAI_EMBEDDING_MODEL?: string;\n  AZURE_OPENAI_IMAGE_MODEL?: string;\n  AZURE_OPENAI_TOOL_MODEL?: string;\n\n  // Portal Settings - Granular capability control\n  // Groq\n  GROQ_ENABLED?: boolean;\n  GROQ_CHAT_ENABLED?: boolean;\n  GROQ_EMBEDDING_ENABLED?: boolean;\n  GROQ_IMAGE_ENABLED?: boolean;\n\n  // OpenAI\n  OPENAI_ENABLED?: boolean;\n  OPENAI_CHAT_ENABLED?: boolean;\n  OPENAI_EMBEDDINGS_ENABLED?: boolean;\n  OPENAI_IMAGE_ENABLED?: boolean;\n\n  // Anthropic\n  ANTHROPIC_ENABLED?: boolean;\n  ANTHROPIC_CHAT_ENABLED?: boolean;\n  ANTHROPIC_EMBEDDING_ENABLED?: boolean;\n  ANTHROPIC_IMAGE_ENABLED?: boolean;\n\n  // xAI\n  XAI_ENABLED?: boolean;\n  XAI_CHAT_ENABLED?: boolean;\n  XAI_EMBEDDING_ENABLED?: boolean;\n  XAI_IMAGE_ENABLED?: boolean;\n\n  // Ollama\n  OLLAMA_ENABLED?: boolean;\n  OLLAMA_CHAT_ENABLED?: boolean;\n  OLLAMA_EMBEDDING_ENABLED?: boolean;\n  OLLAMA_IMAGE_ENABLED?: boolean;\n\n  // OpenRouter\n  OPENROUTER_ENABLED?: boolean;\n  OPENROUTER_CHAT_ENABLED?: boolean;\n  OPENROUTER_EMBEDDING_ENABLED?: boolean;\n  OPENROUTER_IMAGE_ENABLED?: boolean;\n\n  // Kluster.ai\n  KLUSTERAI_ENABLED?: boolean;\n  KLUSTERAI_CHAT_ENABLED?: boolean;\n  KLUSTERAI_EMBEDDING_ENABLED?: boolean;\n  KLUSTERAI_IMAGE_ENABLED?: boolean;\n\n  // Google\n  GOOGLE_ENABLED?: boolean;\n  GOOGLE_CHAT_ENABLED?: boolean;\n  GOOGLE_EMBEDDING_ENABLED?: boolean;\n  GOOGLE_IMAGE_ENABLED?: boolean;\n\n  // Mistral\n  MISTRAL_ENABLED?: boolean;\n  MISTRAL_CHAT_ENABLED?: boolean;\n  MISTRAL_EMBEDDING_ENABLED?: boolean;\n  MISTRAL_IMAGE_ENABLED?: boolean;\n\n  // Cohere\n  COHERE_ENABLED?: boolean;\n  COHERE_CHAT_ENABLED?: boolean;\n  COHERE_EMBEDDING_ENABLED?: boolean;\n  COHERE_IMAGE_ENABLED?: boolean;\n\n  // Azure OpenAI\n  AZURE_OPENAI_ENABLED?: boolean;\n  AZURE_OPENAI_CHAT_ENABLED?: boolean;\n  AZURE_OPENAI_EMBEDDING_ENABLED?: boolean;\n  AZURE_OPENAI_IMAGE_ENABLED?: boolean;\n\n  // Ollama Settings\n  OLLAMA_BASE_URL?: string;\n\n  // Embedding Settings\n  ENABLE_OPENAI_EMBEDDINGS?: boolean;\n  EMBEDDING_PROVIDER?: 'openai' | 'ollama';\n  EMBEDDING_DIMENSIONS?: number;\n\n  // Extension Settings\n  TELEGRAM_BOT_TOKEN?: string;\n}\n\n/**\n * Configuration Defaults\n * Provides sensible defaults for all configuration options\n */\nexport const ConfigDefaults = {\n  // Portal Models - Granular model control\n  // Groq\n  GROQ_MODEL: 'llama-3.1-70b-versatile', // Deprecated, use specific model settings\n  GROQ_CHAT_MODEL: 'llama-3.1-70b-versatile',\n  GROQ_EMBEDDING_MODEL: undefined, // Groq doesn't support embeddings\n  GROQ_IMAGE_MODEL: undefined, // Groq doesn't support image generation\n  GROQ_TOOL_MODEL: 'llama-3.1-70b-versatile',\n\n  // OpenAI\n  OPENAI_CHAT_MODEL: 'gpt-4.1-mini',\n  OPENAI_EMBEDDING_MODEL: 'text-embedding-3-large',\n  OPENAI_IMAGE_MODEL: 'dall-e-3',\n  OPENAI_TOOL_MODEL: 'gpt-4.1-mini',\n\n  // Anthropic\n  ANTHROPIC_MODEL: 'claude-3-haiku-20240307', // Deprecated, use specific model settings\n  ANTHROPIC_CHAT_MODEL: 'claude-3-haiku-20240307',\n  ANTHROPIC_EMBEDDING_MODEL: undefined, // Anthropic doesn't support embeddings\n  ANTHROPIC_IMAGE_MODEL: undefined, // Anthropic doesn't support image generation\n  ANTHROPIC_TOOL_MODEL: 'claude-3-haiku-20240307',\n\n  // xAI\n  XAI_CHAT_MODEL: 'grok-beta',\n  XAI_EMBEDDING_MODEL: undefined,\n  XAI_IMAGE_MODEL: undefined,\n  XAI_TOOL_MODEL: 'grok-beta',\n\n  // Ollama\n  OLLAMA_MODEL: 'llama3.1:8b', // Deprecated, use specific model settings\n  OLLAMA_CHAT_MODEL: 'llama3.1:8b',\n  OLLAMA_EMBEDDING_MODEL: 'nomic-embed-text',\n  OLLAMA_IMAGE_MODEL: undefined, // Ollama doesn't support image generation by default\n  OLLAMA_TOOL_MODEL: 'llama3.1:8b',\n\n  // OpenRouter\n  OPENROUTER_CHAT_MODEL: 'openai/gpt-3.5-turbo',\n  OPENROUTER_EMBEDDING_MODEL: undefined,\n  OPENROUTER_IMAGE_MODEL: undefined,\n  OPENROUTER_TOOL_MODEL: 'openai/gpt-3.5-turbo',\n\n  // Kluster.ai\n  KLUSTERAI_CHAT_MODEL: 'gpt-4',\n  KLUSTERAI_EMBEDDING_MODEL: undefined,\n  KLUSTERAI_IMAGE_MODEL: undefined,\n  KLUSTERAI_TOOL_MODEL: 'gpt-4',\n\n  // Google\n  GOOGLE_CHAT_MODEL: 'gemini-pro',\n  GOOGLE_EMBEDDING_MODEL: 'embedding-001',\n  GOOGLE_IMAGE_MODEL: 'gemini-pro-vision',\n  GOOGLE_TOOL_MODEL: 'gemini-pro',\n\n  // Mistral\n  MISTRAL_CHAT_MODEL: 'mistral-medium',\n  MISTRAL_EMBEDDING_MODEL: 'mistral-embed',\n  MISTRAL_IMAGE_MODEL: undefined, // Mistral doesn't support image generation\n  MISTRAL_TOOL_MODEL: 'mistral-medium',\n\n  // Cohere\n  COHERE_CHAT_MODEL: 'command',\n  COHERE_EMBEDDING_MODEL: 'embed-english-v3.0',\n  COHERE_IMAGE_MODEL: undefined, // Cohere doesn't support image generation\n  COHERE_TOOL_MODEL: 'command',\n\n  // Azure OpenAI\n  AZURE_OPENAI_CHAT_MODEL: 'gpt-4',\n  AZURE_OPENAI_EMBEDDING_MODEL: 'text-embedding-ada-002',\n  AZURE_OPENAI_IMAGE_MODEL: 'dall-e-3',\n  AZURE_OPENAI_TOOL_MODEL: 'gpt-4',\n\n  // Portal Enabled States - Main toggles\n  GROQ_ENABLED: true,\n  OPENAI_ENABLED: true,\n  ANTHROPIC_ENABLED: false,\n  XAI_ENABLED: false,\n  OLLAMA_ENABLED: false,\n  OPENROUTER_ENABLED: false,\n  KLUSTERAI_ENABLED: false,\n  GOOGLE_ENABLED: false,\n  MISTRAL_ENABLED: false,\n  COHERE_ENABLED: false,\n  AZURE_OPENAI_ENABLED: false,\n\n  // Granular capability controls (defaults to true when main toggle is true)\n  // Groq\n  GROQ_CHAT_ENABLED: true,\n  GROQ_EMBEDDING_ENABLED: false, // Groq doesn't support embeddings\n  GROQ_IMAGE_ENABLED: false, // Groq doesn't support images\n\n  // OpenAI\n  OPENAI_CHAT_ENABLED: false, // Default to false for explicit control\n  OPENAI_EMBEDDINGS_ENABLED: true,\n  OPENAI_IMAGE_ENABLED: false,\n\n  // Anthropic\n  ANTHROPIC_CHAT_ENABLED: true,\n  ANTHROPIC_EMBEDDING_ENABLED: false, // Anthropic doesn't support embeddings\n  ANTHROPIC_IMAGE_ENABLED: false, // Anthropic doesn't support images\n\n  // xAI\n  XAI_CHAT_ENABLED: true,\n  XAI_EMBEDDING_ENABLED: false,\n  XAI_IMAGE_ENABLED: false,\n\n  // Ollama\n  OLLAMA_CHAT_ENABLED: true,\n  OLLAMA_EMBEDDING_ENABLED: true,\n  OLLAMA_IMAGE_ENABLED: false,\n\n  // OpenRouter\n  OPENROUTER_CHAT_ENABLED: true,\n  OPENROUTER_EMBEDDING_ENABLED: false,\n  OPENROUTER_IMAGE_ENABLED: false,\n\n  // Kluster.ai\n  KLUSTERAI_CHAT_ENABLED: true,\n  KLUSTERAI_EMBEDDING_ENABLED: false,\n  KLUSTERAI_IMAGE_ENABLED: false,\n\n  // Google\n  GOOGLE_CHAT_ENABLED: true,\n  GOOGLE_EMBEDDING_ENABLED: true,\n  GOOGLE_IMAGE_ENABLED: true,\n\n  // Mistral\n  MISTRAL_CHAT_ENABLED: true,\n  MISTRAL_EMBEDDING_ENABLED: true,\n  MISTRAL_IMAGE_ENABLED: false,\n\n  // Cohere\n  COHERE_CHAT_ENABLED: true,\n  COHERE_EMBEDDING_ENABLED: true,\n  COHERE_IMAGE_ENABLED: false,\n\n  // Azure OpenAI\n  AZURE_OPENAI_CHAT_ENABLED: true,\n  AZURE_OPENAI_EMBEDDING_ENABLED: true,\n  AZURE_OPENAI_IMAGE_ENABLED: true,\n\n  // Ollama Settings\n  OLLAMA_BASE_URL: 'http://localhost:11434',\n\n  // Embedding Settings\n  ENABLE_OPENAI_EMBEDDINGS: true,\n  EMBEDDING_PROVIDER: 'openai' as const,\n  EMBEDDING_DIMENSIONS: 3072,\n\n  // Portal Settings\n  MAX_TOKENS: 2048,\n  TEMPERATURE: 0.7,\n\n  // Embedding Dimensions by Model\n  EMBEDDING_DIMENSIONS_MAP: {\n    'text-embedding-3-large': 3072,\n    'text-embedding-3-small': 1536,\n    'text-embedding-ada-002': 1536,\n    'nomic-embed-text': 768,\n    'all-minilm': 384,\n  },\n} as const;\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/cli/animations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/cli/components.ts","messages":[{"ruleId":"import/no-duplicates","severity":2,"message":"'/home/cid/CursorProjects/symindx/node_modules/@types/react/index.d.ts' imported multiple times.","line":6,"column":32,"nodeType":"Literal","endLine":6,"endColumn":39},{"ruleId":"import/no-duplicates","severity":2,"message":"'/home/cid/CursorProjects/symindx/node_modules/@types/react/index.d.ts' imported multiple times.","line":7,"column":29,"nodeType":"Literal","endLine":7,"endColumn":36}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * CLI Component Types\n * Defines types for various UI components used in the CLI\n */\n\nimport type { ReactNode } from 'react';\nimport type * as React from 'react';\n\n/**\n * Chart data point for visualization\n */\nexport interface ChartDataPoint {\n  /** Unique identifier for the data point */\n  id: string;\n  /** Label for the data point */\n  label: string;\n  /** Numeric value */\n  value: number;\n  /** Optional timestamp */\n  timestamp?: Date;\n  /** Optional color override */\n  color?: string;\n  /** Optional metadata */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * System status metrics\n */\nexport interface SystemStatusMetrics {\n  /** CPU usage percentage (0-100) */\n  cpuUsage: number;\n  /** Memory usage in bytes */\n  memoryUsage: {\n    used: number;\n    total: number;\n    percentage: number;\n  };\n  /** Active agent count */\n  activeAgents: number;\n  /** Total agent count */\n  totalAgents: number;\n  /** Network status */\n  networkStatus: 'online' | 'offline' | 'connecting';\n  /** System uptime in milliseconds */\n  uptime: number;\n  /** Current system load */\n  systemLoad: number[];\n  /** Event processing rate */\n  eventRate: {\n    current: number;\n    average: number;\n    peak: number;\n  };\n  /** API status for each portal */\n  portalStatus: Record<string, {\n    status: 'connected' | 'disconnected' | 'error';\n    latency?: number;\n    lastError?: string;\n  }>;\n}\n\n/**\n * Loading state enumeration\n */\nexport enum LoadingState {\n  Idle = 'idle',\n  Loading = 'loading',\n  Success = 'success',\n  Error = 'error',\n  Cancelled = 'cancelled'\n}\n\n/**\n * Loading state configuration\n */\nexport interface LoadingStateConfig {\n  /** Current loading state */\n  state: LoadingState;\n  /** Loading message */\n  message?: string;\n  /** Progress percentage (0-100) */\n  progress?: number;\n  /** Error details if in error state */\n  error?: {\n    code: string;\n    message: string;\n    details?: unknown;\n  };\n  /** Whether to show progress bar */\n  showProgress?: boolean;\n  /** Whether the operation can be cancelled */\n  cancellable?: boolean;\n  /** Callback when cancel is requested */\n  onCancel?: () => void;\n}\n\n/**\n * Responsive grid configuration\n */\nexport interface ResponsiveGridConfig {\n  /** Number of columns at different breakpoints */\n  columns: {\n    xs?: number;  // < 640px\n    sm?: number;  // >= 640px\n    md?: number;  // >= 768px\n    lg?: number;  // >= 1024px\n    xl?: number;  // >= 1280px\n  };\n  /** Gap between grid items */\n  gap?: number | {\n    x?: number;\n    y?: number;\n  };\n  /** Padding around the grid */\n  padding?: number | {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  };\n  /** Alignment of grid items */\n  align?: 'start' | 'center' | 'end' | 'stretch';\n  /** Justification of grid items */\n  justify?: 'start' | 'center' | 'end' | 'space-between' | 'space-around' | 'space-evenly';\n}\n\n/**\n * Navigation state interface\n */\nexport interface NavigationState {\n  /** Current active route */\n  currentRoute: string;\n  /** Navigation history */\n  history: string[];\n  /** Current history index */\n  historyIndex: number;\n  /** Route parameters */\n  params: Record<string, string>;\n  /** Query parameters */\n  query: Record<string, string>;\n  /** Whether navigation is in progress */\n  isNavigating: boolean;\n  /** Breadcrumb trail */\n  breadcrumbs: Array<{\n    label: string;\n    path: string;\n    isActive: boolean;\n  }>;\n}\n\n/**\n * Event handler types for CLI components\n */\nexport type ClickEventHandler = (event: React.MouseEvent) => void;\nexport type KeyEventHandler = (event: React.KeyboardEvent) => void;\nexport type FocusEventHandler = (event: React.FocusEvent) => void;\nexport type ChangeEventHandler<T = string> = (value: T) => void;\nexport type SubmitEventHandler = (data: Record<string, unknown>) => void | Promise<void>;\nexport type SelectEventHandler = (selected: string | number) => void;\nexport type ToggleEventHandler = (enabled: boolean) => void;\nexport type InputEventHandler = (event: React.ChangeEvent<HTMLInputElement>) => void;\nexport type TextAreaEventHandler = (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n\n/**\n * Card component properties\n */\nexport interface CardProps {\n  /** Card title */\n  title?: string;\n  /** Card content */\n  children: ReactNode;\n  /** Whether the card is interactive */\n  interactive?: boolean;\n  /** Click handler if interactive */\n  onClick?: ClickEventHandler;\n  /** Custom CSS classes */\n  className?: string;\n  /** Elevation level (0-5) */\n  elevation?: number;\n  /** Whether to show border */\n  bordered?: boolean;\n  /** Padding size */\n  padding?: 'none' | 'small' | 'medium' | 'large';\n}\n\n/**\n * Chart configuration\n */\nexport interface ChartConfig {\n  /** Type of chart */\n  type: 'line' | 'bar' | 'area' | 'pie' | 'donut' | 'scatter';\n  /** Chart data */\n  data: ChartDataPoint[];\n  /** Chart dimensions */\n  dimensions?: {\n    width: number;\n    height: number;\n  };\n  /** Whether to show legend */\n  showLegend?: boolean;\n  /** Whether to show grid */\n  showGrid?: boolean;\n  /** Whether to animate on mount */\n  animate?: boolean;\n  /** Custom color palette */\n  colors?: string[];\n  /** Axis configuration */\n  axes?: {\n    x?: {\n      label?: string;\n      format?: (value: unknown) => string;\n    };\n    y?: {\n      label?: string;\n      format?: (value: number) => string;\n      min?: number;\n      max?: number;\n    };\n  };\n}\n\n/**\n * Error boundary state\n */\nexport interface ErrorBoundaryState {\n  /** Whether an error has occurred */\n  hasError: boolean;\n  /** The error that was caught */\n  error?: Error;\n  /** Error info from React */\n  errorInfo?: {\n    componentStack: string;\n  };\n  /** Number of retry attempts */\n  retryCount: number;\n}\n\n/**\n * Connection status configuration\n */\nexport interface ConnectionStatusConfig {\n  /** Current connection state */\n  status: 'connected' | 'connecting' | 'disconnected' | 'error';\n  /** Connection latency in milliseconds */\n  latency?: number;\n  /** Last successful connection timestamp */\n  lastConnected?: Date;\n  /** Error message if in error state */\n  errorMessage?: string;\n  /** Retry configuration */\n  retry?: {\n    attempts: number;\n    maxAttempts: number;\n    nextRetryIn: number;\n  };\n}\n\n/**\n * Command palette item\n */\nexport interface CommandPaletteItem {\n  /** Unique identifier */\n  id: string;\n  /** Display label */\n  label: string;\n  /** Optional description */\n  description?: string;\n  /** Category for grouping */\n  category?: string;\n  /** Keyboard shortcut */\n  shortcut?: string;\n  /** Icon name or component */\n  icon?: string | ReactNode;\n  /** Action to perform when selected */\n  action: () => void | Promise<void>;\n  /** Whether the item is currently available */\n  enabled?: boolean;\n  /** Search keywords */\n  keywords?: string[];\n}\n\n/**\n * Help overlay section\n */\nexport interface HelpSection {\n  /** Section title */\n  title: string;\n  /** Section items */\n  items: Array<{\n    /** Keyboard shortcut or command */\n    key: string;\n    /** Description of what it does */\n    description: string;\n    /** Optional category */\n    category?: string;\n  }>;\n}\n\n/**\n * Header configuration\n */\nexport interface HeaderConfig {\n  /** Application title */\n  title: string;\n  /** Optional subtitle */\n  subtitle?: string;\n  /** Logo component or path */\n  logo?: ReactNode | string;\n  /** Navigation items */\n  navigation?: Array<{\n    label: string;\n    path: string;\n    isActive?: boolean;\n  }>;\n  /** User menu configuration */\n  userMenu?: {\n    username?: string;\n    avatar?: string;\n    items: Array<{\n      label: string;\n      action: () => void;\n      icon?: string;\n      divider?: boolean;\n    }>;\n  };\n}\n\n/**\n * Responsive box breakpoints\n */\nexport interface ResponsiveBoxBreakpoints {\n  /** Extra small devices */\n  xs?: boolean;\n  /** Small devices */\n  sm?: boolean;\n  /** Medium devices */\n  md?: boolean;\n  /** Large devices */\n  lg?: boolean;\n  /** Extra large devices */\n  xl?: boolean;\n}\n\n/**\n * Settings panel configuration\n */\nexport interface SettingsPanelConfig {\n  /** Settings sections */\n  sections: Array<{\n    id: string;\n    title: string;\n    description?: string;\n    settings: Array<{\n      id: string;\n      label: string;\n      type: 'toggle' | 'select' | 'input' | 'slider' | 'color';\n      value: unknown;\n      onChange: ChangeEventHandler<unknown>;\n      options?: Array<{\n        label: string;\n        value: string | number;\n      }>;\n      min?: number;\n      max?: number;\n      step?: number;\n      placeholder?: string;\n    }>;\n  }>;\n  /** Save handler */\n  onSave?: (settings: Record<string, unknown>) => void | Promise<void>;\n  /** Cancel handler */\n  onCancel?: () => void;\n  /** Whether settings have been modified */\n  isDirty?: boolean;\n}\n\n/**\n * Agent list item\n */\nexport interface AgentListItem {\n  /** Unique agent ID */\n  id: string;\n  /** Agent name */\n  name: string;\n  /** Agent status */\n  status: 'active' | 'inactive' | 'error' | 'initializing';\n  /** Agent type/role */\n  type: string;\n  /** Last activity timestamp */\n  lastActivity?: Date;\n  /** Performance metrics */\n  metrics?: {\n    messageCount: number;\n    responseTime: number;\n    successRate: number;\n  };\n  /** Custom metadata */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Chat message\n */\nexport interface ChatMessage {\n  /** Unique message ID */\n  id: string;\n  /** Message content */\n  content: string;\n  /** Message sender */\n  sender: {\n    id: string;\n    name: string;\n    type: 'user' | 'agent' | 'system';\n    avatar?: string;\n  };\n  /** Message timestamp */\n  timestamp: Date;\n  /** Message status */\n  status?: 'sending' | 'sent' | 'delivered' | 'failed';\n  /** Reply to another message */\n  replyTo?: string;\n  /** Message attachments */\n  attachments?: Array<{\n    id: string;\n    name: string;\n    type: string;\n    url: string;\n    size: number;\n  }>;\n  /** Message reactions */\n  reactions?: Array<{\n    emoji: string;\n    count: number;\n    users: string[];\n  }>;\n}\n\n/**\n * Dashboard widget configuration\n */\nexport interface DashboardWidget {\n  /** Unique widget ID */\n  id: string;\n  /** Widget type */\n  type: 'chart' | 'metric' | 'list' | 'custom';\n  /** Widget title */\n  title: string;\n  /** Grid position */\n  position: {\n    x: number;\n    y: number;\n    w: number;\n    h: number;\n  };\n  /** Widget-specific configuration */\n  config: Record<string, unknown>;\n  /** Refresh interval in seconds */\n  refreshInterval?: number;\n  /** Whether the widget can be removed */\n  removable?: boolean;\n  /** Whether the widget can be resized */\n  resizable?: boolean;\n}","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/cli/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/cognition.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3257,3260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3257,3260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":164,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3689,3692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3689,3692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":174,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3895,3898],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3895,3898],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":247,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5387,5390],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5387,5390],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":255,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5519,5522],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5519,5522],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Cognition module types for SYMindX\n */\n\nimport { Agent, ThoughtContext, ThoughtResult, Plan, Decision } from './agent';\nimport { Experience } from './autonomous';\nimport { BaseConfig } from './common';\n\n/**\n * Base interface for all cognition modules\n */\nexport interface CognitionModule {\n  /**\n   * Unique identifier for the module instance\n   */\n  id: string;\n\n  /**\n   * Type of cognition module\n   */\n  type: string;\n  /**\n   * Process the current context and generate thoughts, emotions, and actions\n   * @param agent The agent that is thinking\n   * @param context The context for thinking\n   * @returns The result of thinking\n   */\n  think(agent: Agent, context: ThoughtContext): Promise<ThoughtResult>;\n\n  /**\n   * Create a plan for achieving a specific goal\n   * @param agent The agent that is planning\n   * @param goal The goal to plan for\n   * @returns A plan for achieving the goal\n   */\n  plan(agent: Agent, goal: string): Promise<Plan>;\n\n  /**\n   * Make a decision between multiple options\n   * @param agent The agent that is deciding\n   * @param options The options to choose from\n   * @returns The chosen decision\n   */\n  decide(agent: Agent, options: Decision[]): Promise<Decision>;\n\n  /**\n   * Initialize the cognition module with configuration\n   * @param config Configuration for the cognition module\n   */\n  initialize(config: BaseConfig): void;\n\n  /**\n   * Get module metadata\n   * @returns Metadata about the cognition module\n   */\n  getMetadata(): CognitionModuleMetadata;\n\n  /**\n   * Learn from experience (optional)\n   * @param agent The agent that is learning\n   * @param experience The experience to learn from\n   */\n  learn?(agent: Agent, experience: Experience): Promise<void>;\n}\n\n/**\n * Metadata for cognition module registration\n */\nexport interface CognitionModuleMetadata {\n  /**\n   * Unique identifier for the cognition module\n   */\n  id: string;\n\n  /**\n   * Display name of the cognition module\n   */\n  name: string;\n\n  /**\n   * Description of the cognition module\n   */\n  description: string;\n\n  /**\n   * Version of the cognition module\n   */\n  version: string;\n\n  /**\n   * Author of the cognition module\n   */\n  author: string;\n\n  /**\n   * Supported reasoning paradigms\n   */\n  paradigms?: ReasoningParadigm[];\n\n  /**\n   * Whether this module is capable of learning\n   */\n  learningCapable?: boolean;\n}\n\n/**\n * Factory function type for creating cognition modules\n */\nexport type CognitionModuleFactory = (config?: BaseConfig) => CognitionModule;\n\n/**\n * Reasoning paradigm types\n */\nexport enum ReasoningParadigm {\n  DEDUCTIVE = 'deductive',\n  INDUCTIVE = 'inductive',\n  ABDUCTIVE = 'abductive',\n  ANALOGICAL = 'analogical',\n  CAUSAL = 'causal',\n  PROBABILISTIC = 'probabilistic',\n  FUZZY = 'fuzzy',\n  RULE_BASED = 'rule_based',\n  CASE_BASED = 'case_based',\n  MODEL_BASED = 'model_based',\n  REINFORCEMENT = 'reinforcement',\n  REINFORCEMENT_LEARNING = 'reinforcement_learning',\n  PDDL_PLANNING = 'pddl_planning',\n  HYBRID = 'hybrid',\n  DUAL_PROCESS = 'dual_process',\n  UNIFIED = 'unified',\n}\n\n/**\n * Rule for rule-based reasoning\n */\nexport interface Rule {\n  id: string;\n  name: string;\n  conditions: Condition[];\n  actions: RuleAction[];\n  priority?: number;\n  confidence?: number;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Condition for rule-based reasoning\n */\nexport interface Condition {\n  type: 'fact' | 'comparison' | 'logical' | 'pattern' | 'function' | 'temporal';\n  property: string;\n  operator:\n    | 'equals'\n    | 'not_equals'\n    | 'greater_than'\n    | 'less_than'\n    | 'contains'\n    | 'and'\n    | 'or'\n    | 'not';\n  value: string | number | boolean;\n  negate?: boolean;\n  expression?: string;\n  parameters?: Record<string, any>;\n  confidence?: number;\n}\n\n/**\n * Action for rule-based reasoning\n */\nexport interface RuleAction {\n  type: 'assert' | 'retract' | 'modify' | 'execute';\n  target: string;\n  parameters?: Record<string, any>;\n}\n\n/**\n * Fact base for rule-based reasoning\n */\nexport interface FactBase {\n  facts: Map<string, Fact>;\n  rules: Map<string, Rule>;\n  addFact(fact: Fact): void;\n  removeFact(id: string): void;\n  getFact(id: string): Fact | undefined;\n  query(pattern: Partial<Fact>): Fact[];\n}\n\n/**\n * Bayesian network for probabilistic reasoning\n */\nexport interface BayesianNetwork {\n  nodes: BayesianNode[];\n  edges: BayesianEdge[];\n  addNode(node: BayesianNode): void;\n  addEdge(from: string, to: string): void;\n  query(evidence: Record<string, string>): Record<string, number>;\n  learn(data: Record<string, string>[]): void;\n}\n\nexport interface BayesianNode {\n  id: string;\n  name: string;\n  states: string[];\n  probabilities?: number[];\n  conditionalProbabilities?: Record<string, number>;\n  parents: string[];\n  children: string[];\n}\n\nexport interface BayesianEdge {\n  from: string;\n  to: string;\n  probability: number;\n}\n\n/**\n * Learning capability interface\n */\nexport interface LearningCapability {\n  learn(experience: Experience): Promise<void>;\n  getKnowledge(): Promise<Knowledge>;\n  forgetOld(threshold: Date): Promise<void>;\n}\n\nexport interface Knowledge {\n  facts: Fact[];\n  rules: Rule[];\n  patterns: Pattern[];\n  models: Model[];\n}\n\nexport interface Fact {\n  id: string;\n  subject: string;\n  predicate: string;\n  object: string;\n  confidence: number;\n  source?: string;\n  timestamp: Date;\n}\n\nexport interface Pattern {\n  id: string;\n  name: string;\n  description: string;\n  examples: any[];\n  confidence: number;\n}\n\nexport interface Model {\n  id: string;\n  name: string;\n  type: string;\n  parameters: Record<string, any>;\n  performance: ReasoningPerformance;\n}\n\n/**\n * Reasoning performance metrics\n */\nexport interface ReasoningPerformance {\n  accuracy: number;\n  precision?: number;\n  recall?: number;\n  f1Score?: number;\n  latency?: number;\n  efficiency?: number;\n  confidence: number;\n  adaptability?: number;\n  reasoningTime?: number;\n  memoryUsage?: number;\n  paradigm?: ReasoningParadigm;\n  timestamp: Date;\n}\n\n/**\n * Hybrid reasoning configuration\n */\nexport interface HybridReasoningConfig {\n  paradigms?: ReasoningParadigm[];\n  weights?: Record<ReasoningParadigm, number>;\n  threshold?: number;\n  maxIterations?: number;\n  timeout?: number;\n  ruleEngine?: {\n    conflictResolution?: 'priority' | 'specificity' | 'recent';\n    maxIterations?: number;\n    timeout?: number;\n  };\n  pddlPlanner?: {\n    enabled: boolean;\n    domainFile?: string;\n    domain?: string;\n    searchAlgorithm?: 'breadth_first' | 'depth_first' | 'a_star' | 'best_first';\n    maxPlanLength?: number;\n    timeout?: number;\n  };\n  learning?: {\n    enabled: boolean;\n    learningRate?: number;\n    explorationRate?: number;\n    discountFactor?: number;\n  };\n  probabilisticReasoning?: {\n    confidenceThreshold?: number;\n    maxNetworkSize?: number;\n    learningEnabled?: boolean;\n  };\n}\n\n/**\n * PDDL types for planning\n */\nexport interface PDDLDomain {\n  name: string;\n  requirements: string[];\n  types: string[];\n  predicates: PDDLPredicate[];\n  actions: PDDLAction[];\n}\n\nexport interface PDDLPredicate {\n  name: string;\n  parameters: PDDLParameter[];\n}\n\nexport interface PDDLParameter {\n  name: string;\n  type: string;\n}\n\nexport interface PDDLAction {\n  name: string;\n  parameters: PDDLParameter[];\n  precondition: PDDLExpression;\n  effect: PDDLExpression;\n  effects?: PDDLEffect[];\n}\n\nexport interface PDDLExpression {\n  type: 'and' | 'or' | 'not' | 'predicate' | 'forall' | 'exists';\n  predicate?: string;\n  parameters?: string[];\n  expressions?: PDDLExpression[];\n}\n\nexport interface PDDLProblem {\n  name: string;\n  domain: string;\n  objects: PDDLObject[];\n  init: string[];\n  initialState?: Set<string>;\n  goal: PDDLExpression;\n  goalState?: Set<string>;\n}\n\nexport interface PDDLObject {\n  name: string;\n  type: string;\n}\n\nexport interface PDDLCondition {\n  type: 'and' | 'or' | 'not' | 'predicate' | 'forall' | 'exists';\n  predicate?: string;\n  parameters?: string[];\n  conditions?: PDDLCondition[];\n}\n\nexport interface PDDLEffect {\n  type: 'and' | 'or' | 'not' | 'predicate' | 'forall' | 'when';\n  predicate?: string;\n  parameters?: string[];\n  effects?: PDDLEffect[];\n}\n\n/**\n * Context analysis for reasoning\n */\nexport interface ContextAnalysis {\n  complexity: number;\n  uncertainty: number;\n  timeConstraint: boolean;\n  resourceConstraint: boolean;\n  ethicalConsiderations: boolean;\n  multiAgent: boolean;\n  dynamicEnvironment: boolean;\n}\n\n/**\n * Reasoning state for tracking\n */\nexport interface ReasoningState {\n  currentParadigm: ReasoningParadigm;\n  confidence: number;\n  iterations: number;\n  startTime: Date;\n  context: ContextAnalysis;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/common.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2400,2403],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2400,2403],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2513,2516],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2513,2516],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":463,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":463,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8669,8672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8669,8672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":489,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":489,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9143,9146],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9143,9146],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":500,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":500,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9364,9367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9364,9367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":514,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":514,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9623,9626],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9623,9626],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":515,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":515,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9648,9651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9648,9651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":526,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":526,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9894,9897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9894,9897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":531,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":531,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10005,10008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10005,10008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":559,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":559,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10535,10538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10535,10538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":586,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":586,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10984,10987],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10984,10987],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":596,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":596,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11192,11195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11192,11195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":601,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":601,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11335,11338],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11335,11338],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":610,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":610,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11489,11492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11489,11492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":622,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":622,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11733,11736],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11733,11736],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":632,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":632,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11906,11909],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11906,11909],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":640,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":640,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12116,12119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12116,12119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":651,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":651,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12343,12346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12343,12346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":652,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":652,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12360,12363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12360,12363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":662,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":662,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12568,12571],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12568,12571],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":673,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":673,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12812,12815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12812,12815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":674,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":674,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12829,12832],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12829,12832],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":679,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":679,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12933,12936],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12933,12936],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":689,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":689,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13151,13154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13151,13154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":697,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":697,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13317,13320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13317,13320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Common Types\n *\n * This file defines common interfaces and types used throughout the system\n * to replace generic Record<string, any> and any types for better type safety.\n */\n\n// Configuration Types\nexport interface BaseConfig {\n  [key: string]: ConfigValue;\n}\n\nexport type ConfigValue =\n  | string\n  | number\n  | boolean\n  | ConfigValue[]\n  | BaseConfig\n  | null\n  | undefined;\n\n// Parameter Types\nexport interface ActionParameters {\n  [key: string]: ParameterValue;\n}\n\nexport type ParameterValue =\n  | string\n  | number\n  | boolean\n  | ParameterValue[]\n  | ActionParameters\n  | null\n  | undefined;\n\n// Metadata Types\nexport interface Metadata {\n  [key: string]: MetadataValue;\n}\n\nexport type MetadataValue =\n  | string\n  | number\n  | boolean\n  | Date\n  | MetadataValue[]\n  | Metadata\n  | null\n  | undefined;\n\n// Context Types\nexport interface Context {\n  [key: string]: ContextValue;\n}\n\nexport type ContextValue =\n  | string\n  | number\n  | boolean\n  | Date\n  | ContextValue[]\n  | Context\n  | null\n  | undefined;\n\n// Data Types\nexport interface GenericData {\n  [key: string]: DataValue;\n}\n\nexport type DataValue =\n  | string\n  | number\n  | boolean\n  | Date\n  | DataValue[]\n  | GenericData\n  | null\n  | undefined;\n\n// Event Data Types\nexport interface EventData {\n  type: string;\n  timestamp: Date;\n  source: string;\n  payload: GenericData;\n  metadata?: Metadata;\n}\n\n// Tool Input/Output Types\nexport interface ToolInput {\n  [key: string]: ParameterValue;\n}\n\nexport interface ToolOutput {\n  success: boolean;\n  data?: GenericData;\n  error?: string;\n  metadata?: Metadata;\n}\n\n// API Response Types\nexport interface ApiResponse<T = GenericData> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n  timestamp: Date;\n  metadata?: Metadata;\n}\n\n// Action Result Types\nexport interface ActionResult<T = GenericData> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n  metadata?: Metadata;\n}\n\n// Validation Types (re-exported from helpers for backward compatibility)\nexport type {\n  ValidationResult,\n  ValidationError,\n  ValidationWarning,\n} from './helpers';\n\n// Legacy validation types for backward compatibility\nexport interface LegacyValidationResult {\n  valid: boolean;\n  errors: LegacyValidationError[];\n  warnings?: LegacyValidationWarning[];\n}\n\nexport interface LegacyValidationError {\n  field: string;\n  message: string;\n  code: string;\n  value?: any;\n}\n\nexport interface LegacyValidationWarning {\n  field: string;\n  message: string;\n  code: string;\n  value?: any;\n}\n\n// Skill/Action Parameter Types\nexport interface SkillParameters {\n  [key: string]: SkillParameterValue;\n}\n\nexport type SkillParameterValue =\n  | string\n  | number\n  | boolean\n  | SkillParameterValue[]\n  | SkillParameters\n  | null\n  | undefined;\n\n// Extension Configuration Types\nexport interface ExtensionConfig {\n  enabled: boolean;\n  priority?: number;\n  settings: BaseConfig;\n  dependencies?: string[];\n  capabilities?: string[];\n}\n\nexport interface ExtensionMetadata {\n  name: string;\n  version: string;\n  description?: string;\n  author?: string;\n  repository?: string;\n  license?: string;\n  tags?: string[];\n  category?: string;\n  compatibility?: string[];\n  dependencies?: string[];\n  capabilities?: string[];\n}\n\n// Portal Configuration Types\nexport interface PortalSettings {\n  apiKey?: string;\n  baseUrl?: string;\n  timeout?: number;\n  retryAttempts?: number;\n  rateLimitBuffer?: number;\n  customHeaders?: Record<string, string>;\n  modelSettings?: ModelSettings;\n}\n\nexport interface ModelSettings {\n  defaultModel?: string;\n  maxTokens?: number;\n  temperature?: number;\n  topP?: number;\n  frequencyPenalty?: number;\n  presencePenalty?: number;\n  stopSequences?: string[];\n}\n\n// Memory Types\nexport interface MemoryMetadata {\n  importance: number;\n  tags: string[];\n  source: string;\n  timestamp: Date;\n  expiresAt?: Date;\n  accessCount?: number;\n  lastAccessed?: Date;\n  [key: string]: MetadataValue;\n}\n\n// Emotion Context Types\nexport interface EmotionContext {\n  trigger: string;\n  intensity: number;\n  duration?: number;\n  source: string;\n  relatedEvents?: string[];\n  socialContext?: SocialContext;\n  environmentalContext?: EnvironmentalContext;\n}\n\nexport interface SocialContext {\n  participants: string[];\n  relationships: Record<string, string>;\n  groupDynamics?: string;\n  communicationStyle?: string;\n}\n\nexport interface EnvironmentalContext {\n  location?: string;\n  timeOfDay?: string;\n  weather?: string;\n  crowdLevel?: string;\n  noiseLevel?: string;\n  lighting?: string;\n}\n\n// Cognition Types\nexport interface CognitionContext {\n  currentGoals: string[];\n  activeMemories: string[];\n  emotionalState: string;\n  environmentalFactors: EnvironmentalContext;\n  socialFactors?: SocialContext;\n  timeConstraints?: TimeConstraints;\n}\n\nexport interface TimeConstraints {\n  deadline?: Date;\n  urgency: 'low' | 'medium' | 'high' | 'critical';\n  estimatedDuration?: number;\n}\n\n// Game State Types (for RuneLite)\nexport interface GameState {\n  playerPosition: Position;\n  playerStats: PlayerStats;\n  inventory: InventoryItem[];\n  nearbyPlayers: Player[];\n  nearbyObjects: GameObject[];\n  currentActivity?: string;\n  questStates?: QuestState[];\n}\n\nexport interface Position {\n  x: number;\n  y: number;\n  z?: number;\n  region?: string;\n}\n\nexport interface PlayerStats {\n  hitpoints: number;\n  attack: number;\n  strength: number;\n  defence: number;\n  ranged: number;\n  prayer: number;\n  magic: number;\n  cooking: number;\n  woodcutting: number;\n  fletching: number;\n  fishing: number;\n  firemaking: number;\n  crafting: number;\n  smithing: number;\n  mining: number;\n  herblore: number;\n  agility: number;\n  thieving: number;\n  slayer: number;\n  farming: number;\n  runecraft: number;\n  hunter: number;\n  construction: number;\n}\n\nexport interface InventoryItem {\n  id: number;\n  name: string;\n  quantity: number;\n  noted?: boolean;\n  value?: number;\n}\n\nexport interface Player {\n  name: string;\n  position: Position;\n  combatLevel: number;\n  isInCombat?: boolean;\n  equipment?: Equipment;\n}\n\nexport interface GameObject {\n  id: number;\n  name: string;\n  position: Position;\n  interactable: boolean;\n  actions?: string[];\n}\n\nexport interface Equipment {\n  helmet?: InventoryItem;\n  cape?: InventoryItem;\n  amulet?: InventoryItem;\n  weapon?: InventoryItem;\n  body?: InventoryItem;\n  shield?: InventoryItem;\n  legs?: InventoryItem;\n  gloves?: InventoryItem;\n  boots?: InventoryItem;\n  ring?: InventoryItem;\n}\n\nexport interface QuestState {\n  id: number;\n  name: string;\n  status: 'not_started' | 'in_progress' | 'completed';\n  progress?: number;\n  requirements?: string[];\n}\n\n// Slack Types\nexport interface SlackMessage {\n  channel: string;\n  user: string;\n  text: string;\n  timestamp: string;\n  threadTs?: string;\n  blocks?: SlackBlock[];\n  attachments?: SlackAttachment[];\n}\n\nexport interface SlackBlock {\n  type: string;\n  text?: SlackText;\n  elements?: SlackElement[];\n  accessory?: SlackElement;\n  fields?: SlackText[];\n}\n\nexport interface SlackText {\n  type: 'plain_text' | 'mrkdwn';\n  text: string;\n  emoji?: boolean;\n}\n\nexport interface SlackElement {\n  type: string;\n  text?: SlackText;\n  value?: string;\n  url?: string;\n  action_id?: string;\n}\n\nexport interface SlackAttachment {\n  color?: string;\n  title?: string;\n  text?: string;\n  fields?: SlackField[];\n  actions?: SlackAction[];\n}\n\nexport interface SlackField {\n  title: string;\n  value: string;\n  short?: boolean;\n}\n\nexport interface SlackAction {\n  type: string;\n  text: string;\n  value?: string;\n  url?: string;\n}\n\n// Twitter Types\nexport interface TwitterUser {\n  id: string;\n  username: string;\n  name: string;\n  verified: boolean;\n  followersCount: number;\n  followingCount: number;\n  profileImageUrl?: string;\n  description?: string;\n}\n\nexport interface TwitterTweet {\n  id: string;\n  text: string;\n  authorId: string;\n  createdAt: Date;\n  publicMetrics: TwitterMetrics;\n  referencedTweets?: TwitterReference[];\n  attachments?: TwitterAttachment[];\n}\n\nexport interface TwitterMetrics {\n  retweetCount: number;\n  likeCount: number;\n  replyCount: number;\n  quoteCount: number;\n}\n\nexport interface TwitterReference {\n  type: 'retweeted' | 'quoted' | 'replied_to';\n  id: string;\n}\n\nexport interface TwitterAttachment {\n  type: 'media' | 'poll';\n  mediaKeys?: string[];\n  pollIds?: string[];\n}\n\n// MCP Types\nexport interface McpToolDefinition {\n  name: string;\n  description: string;\n  inputSchema: JsonSchema;\n}\n\nexport interface JsonSchema {\n  type: string;\n  properties?: Record<string, JsonSchemaProperty>;\n  required?: string[];\n  additionalProperties?: boolean;\n}\n\nexport interface JsonSchemaProperty {\n  type: string;\n  description?: string;\n  enum?: string[];\n  default?: any;\n  minimum?: number;\n  maximum?: number;\n  pattern?: string;\n}\n\nexport interface McpResource {\n  uri: string;\n  name: string;\n  description?: string;\n  mimeType?: string;\n}\n\nexport interface McpPrompt {\n  name: string;\n  description?: string;\n  arguments?: McpPromptArgument[];\n}\n\nexport interface McpPromptArgument {\n  name: string;\n  description?: string;\n  required?: boolean;\n}\n\n// Enhanced Result Types for better API consistency\nexport interface ServiceResult<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n  timestamp: Date;\n  metadata?: {\n    serviceId: string;\n    operation: string;\n    duration?: number;\n    version?: string;\n    [key: string]: any;\n  };\n}\n\n// Enhanced Error Types\nexport interface ServiceError {\n  code: string;\n  message: string;\n  details?: string;\n  timestamp: Date;\n  correlationId?: string;\n  metadata?: {\n    serviceId: string;\n    operation: string;\n    context?: Record<string, any>;\n    [key: string]: any;\n  };\n}\n\n// Configuration Management Types\nexport interface ConfigurationSchema {\n  version: string;\n  schema: {\n    [key: string]: {\n      type: 'string' | 'number' | 'boolean' | 'object' | 'array';\n      required?: boolean;\n      default?: any;\n      validation?: {\n        min?: number;\n        max?: number;\n        pattern?: string;\n        enum?: any[];\n      };\n      description?: string;\n    };\n  };\n}\n\n// Enhanced Module Types\nexport interface ModuleConfigManifest {\n  id: string;\n  name: string;\n  version: string;\n  description: string;\n  author: string;\n  license: string;\n  dependencies?: {\n    [key: string]: string;\n  };\n  peerDependencies?: {\n    [key: string]: string;\n  };\n  capabilities?: string[];\n  configuration?: ConfigurationSchema;\n  metadata?: {\n    category: string;\n    tags?: string[];\n    homepage?: string;\n    repository?: string;\n    [key: string]: any;\n  };\n}\n\n// Enhanced Context Types\nexport interface RuntimeContext {\n  agentId: string;\n  sessionId: string;\n  timestamp: Date;\n  environment: {\n    node: string;\n    platform: string;\n    arch: string;\n    version: string;\n  };\n  runtime: {\n    uptime: number;\n    memory: {\n      used: number;\n      total: number;\n      heap: number;\n    };\n    cpu: {\n      usage: number;\n      loadAverage: number[];\n    };\n  };\n  metadata?: Record<string, any>;\n}\n\n// Enhanced Event Types\nexport interface SystemEvent {\n  id: string;\n  type: string;\n  category: 'system' | 'agent' | 'user' | 'external';\n  source: string;\n  timestamp: Date;\n  data: Record<string, any>;\n  metadata?: {\n    priority: 'low' | 'medium' | 'high' | 'critical';\n    tags?: string[];\n    correlationId?: string;\n    [key: string]: any;\n  };\n}\n\n// Enhanced Service Types\nexport interface ServiceConfiguration {\n  id: string;\n  name: string;\n  enabled: boolean;\n  config: Record<string, any>;\n  dependencies?: string[];\n  healthCheck?: {\n    enabled: boolean;\n    interval: number;\n    timeout: number;\n    retries: number;\n  };\n  metadata?: {\n    version: string;\n    description?: string;\n    tags?: string[];\n    [key: string]: any;\n  };\n}\n\n// Enhanced Communication Types\nexport interface Message {\n  id: string;\n  type: string;\n  source: string;\n  target: string;\n  content: string | Record<string, any>;\n  timestamp: Date;\n  metadata?: {\n    priority: 'low' | 'medium' | 'high' | 'urgent';\n    encryption?: boolean;\n    compression?: boolean;\n    ttl?: number;\n    correlationId?: string;\n    [key: string]: any;\n  };\n}\n\n// Enhanced Task Types\nexport interface Task {\n  id: string;\n  name: string;\n  type: string;\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'cancelled';\n  priority: number;\n  parameters: Record<string, any>;\n  result?: any;\n  error?: string;\n  createdAt: Date;\n  startedAt?: Date;\n  completedAt?: Date;\n  metadata?: {\n    agentId?: string;\n    retryCount?: number;\n    timeout?: number;\n    tags?: string[];\n    [key: string]: any;\n  };\n}\n\n// Enhanced Workflow Types\nexport interface WorkflowStep {\n  id: string;\n  name: string;\n  type: string;\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'skipped';\n  dependencies?: string[];\n  parameters: Record<string, any>;\n  result?: any;\n  error?: string;\n  metadata?: {\n    retryCount?: number;\n    timeout?: number;\n    [key: string]: any;\n  };\n}\n\nexport interface Workflow {\n  id: string;\n  name: string;\n  description?: string;\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'cancelled';\n  steps: WorkflowStep[];\n  context: Record<string, any>;\n  createdAt: Date;\n  startedAt?: Date;\n  completedAt?: Date;\n  metadata?: {\n    agentId?: string;\n    version?: string;\n    tags?: string[];\n    [key: string]: any;\n  };\n}\n\n// Utility Types (re-exported from helpers for better organization)\nexport type {\n  DeepPartial,\n  RequiredFields,\n  OptionalFields,\n  Nullable,\n  Optional,\n  StringKeys,\n  NonEmptyArray,\n  DeepReadonly,\n  NumberKeys,\n  SymbolKeys,\n} from './helpers';\n\n// Operation Result Types\nexport type {\n  OperationResult,\n  VoidResult,\n  VoidError,\n  InitializationResult,\n  CleanupResult,\n  EventProcessingResult,\n  StateUpdateResult,\n  ExecutionResult,\n  AsyncOperationResult,\n} from './helpers';\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/communication.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/consciousness.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_MemoryRecord' is defined but never used.","line":11,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_EmotionState' is defined but never used.","line":12,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_CommonContext' is defined but never used.","line":16,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_Metadata' is defined but never used.","line":18,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":24},{"ruleId":"no-redeclare","severity":2,"message":"'EmbodiedPresence' is already defined.","line":861,"column":18,"nodeType":"Identifier","messageId":"redeclared","endLine":861,"endColumn":34},{"ruleId":"no-redeclare","severity":2,"message":"'TemporalPresence' is already defined.","line":868,"column":18,"nodeType":"Identifier","messageId":"redeclared","endLine":868,"endColumn":34},{"ruleId":"no-redeclare","severity":2,"message":"'AboutnessStructure' is already defined.","line":910,"column":18,"nodeType":"Identifier","messageId":"redeclared","endLine":910,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1133,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1133,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29759,29762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29759,29762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1134,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1134,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29786,29789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29786,29789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1135,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1135,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29816,29819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29816,29819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1536,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1536,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[38989,38992],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[38989,38992],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1537,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1537,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39034,39037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39034,39037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1538,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1538,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39076,39079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39076,39079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1539,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1539,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39112,39115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39112,39115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1546,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1546,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39270,39273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39270,39273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1547,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1547,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39313,39316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39313,39316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1548,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1548,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39351,39354],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39351,39354],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1555,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1555,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39505,39508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39505,39508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1556,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1556,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39544,39547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39544,39547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1557,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1557,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39586,39589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39586,39589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1558,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1558,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39624,39627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39624,39627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1565,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1565,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39731,39734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39731,39734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1617,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1617,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[40700,40703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[40700,40703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1625,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1625,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[40828,40831],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[40828,40831],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1636,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1636,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41033,41036],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41033,41036],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1645,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1645,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41186,41189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41186,41189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1647,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1647,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41228,41231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41228,41231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1653,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1653,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41314,41317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41314,41317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1654,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1654,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41332,41335],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41332,41335],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1671,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1671,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41648,41651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41648,41651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1672,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1672,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41674,41677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41674,41677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1680,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1680,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41816,41819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41816,41819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-redeclare","severity":2,"message":"'TraitChange' is already defined.","line":1762,"column":18,"nodeType":"Identifier","messageId":"redeclared","endLine":1762,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1822,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1822,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[45147,45150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[45147,45150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1823,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1823,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[45163,45166],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[45163,45166],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-redeclare","severity":2,"message":"'ValueEvolution' is already defined.","line":1915,"column":18,"nodeType":"Identifier","messageId":"redeclared","endLine":1915,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2159,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2159,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[52555,52558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[52555,52558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2439,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2439,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[59927,59930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[59927,59930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Consciousness Types for SYMindX\n *\n * This module defines the revolutionary consciousness simulation system\n * that creates truly life-like agents with human-level and superhuman consciousness\n */\n\nimport {\n  Agent,\n  AgentEvent,\n  MemoryRecord as _MemoryRecord,\n  EmotionState as _EmotionState,\n} from './agent';\nimport {\n  BaseConfig,\n  Context as _CommonContext,\n  GenericData,\n  Metadata as _Metadata,\n} from './common';\n\n// =====================================================\n// CONSCIOUSNESS CORE TYPES\n// =====================================================\n\nexport enum ConsciousnessLevel {\n  MINIMAL = 'minimal', // Basic awareness\n  PHENOMENAL = 'phenomenal', // Subjective experience\n  ACCESS = 'access', // Global accessibility\n  REFLECTIVE = 'reflective', // Self-awareness\n  META = 'meta', // Thinking about thinking\n  TRANSCENDENT = 'transcendent', // Peak consciousness states\n}\n\nexport interface ConsciousnessState {\n  level: ConsciousnessLevel;\n  attention: AttentionState;\n  awareness: AwarenessState;\n  presence: PresenceState;\n  selfModel: SelfModel;\n  intentionality: IntentionalState;\n  phenomenalExperience: PhenomenalExperience;\n  timestamp: Date;\n}\n\n// =====================================================\n// ATTENTION MECHANISM\n// =====================================================\n\nexport enum AttentionType {\n  FOCUSED = 'focused', // Narrow, concentrated attention\n  DIVIDED = 'divided', // Split attention across multiple stimuli\n  SELECTIVE = 'selective', // Filtering specific information\n  SUSTAINED = 'sustained', // Prolonged attention maintenance\n  EXECUTIVE = 'executive', // Top-down control of attention\n  AUTOMATIC = 'automatic', // Bottom-up capture by stimuli\n}\n\nexport interface Stimulus {\n  id: string;\n  type: string; // visual, auditory, internal, memory, etc.\n  content: GenericData;\n  intensity: number; // 0-1 scale\n  relevance: number; // 0-1 scale\n  novelty: number; // 0-1 scale\n  emotionalSalience: number; // 0-1 scale\n  timestamp: Date;\n  source: string;\n}\n\nexport interface AttentionAllocation {\n  stimulus: Stimulus;\n  focusStrength: number; // 0-1 how much attention allocated\n  duration: number; // milliseconds of attention\n  type: AttentionType;\n  confidence: number; // certainty in attention decision\n}\n\nexport interface AttentionState {\n  currentFocus: AttentionAllocation[];\n  attentionCapacity: number; // total available attention units\n  usedCapacity: number; // currently allocated attention\n  suppressedStimuli: Stimulus[]; // consciously ignored stimuli\n  backgroundProcessing: Stimulus[]; // subconscious processing\n  attentionHistory: AttentionAllocation[];\n  controlMode: 'automatic' | 'controlled' | 'mixed';\n}\n\n// =====================================================\n// AWARENESS SYSTEM\n// =====================================================\n\nexport interface AwarenessState {\n  selfAwareness: number; // 0-1 scale\n  environmentalAwareness: number; // 0-1 scale\n  socialAwareness: number; // 0-1 scale\n  temporalAwareness: number; // 0-1 scale\n  metacognitive: number; // awareness of thinking processes\n  bodily: number; // awareness of internal states\n  emotional: number; // awareness of emotional states\n  perceptual: number; // awareness of sensory input\n  intentional: number; // awareness of goals/intentions\n}\n\n// =====================================================\n// PRESENCE & INTENTIONALITY\n// =====================================================\n\nexport interface PresenceState {\n  social: SocialPresence;\n  environmental: EnvironmentalPresence;\n  temporal: TemporalPresence;\n  embodied: EmbodiedPresence;\n  cognitive: CognitivePresence;\n}\n\nexport interface SocialPresence {\n  awareness: number; // awareness of others\n  engagement: number; // level of social engagement\n  empathy: number; // emotional connection\n  influence: number; // social influence capacity\n}\n\nexport interface EnvironmentalPresence {\n  spatial: number; // awareness of physical space\n  contextual: number; // understanding of situation\n  adaptive: number; // ability to adapt to environment\n}\n\nexport interface TemporalPresence {\n  present: number; // focus on current moment\n  past: number; // connection to memories\n  future: number; // anticipation and planning\n}\n\nexport interface EmbodiedPresence {\n  physical: number; // awareness of physical body\n  energetic: number; // energy levels and vitality\n  sensory: number; // connection to sensory experience\n}\n\nexport interface CognitivePresence {\n  focus: number; // concentration ability\n  clarity: number; // mental clarity\n  coherence: number; // thought organization\n}\n\nexport interface BasicIntentionalState {\n  directedness: DirectednessState;\n  satisfaction: SatisfactionState;\n  aboutness: string; // what the intention is about\n  strength: number; // how strong the intention is\n  persistence: number; // how long intention lasts\n}\n\nexport interface DirectednessState {\n  target: string; // what intention is directed at\n  specificity: number; // how specific the target is\n  accessibility: number; // how easily accessible\n}\n\nexport interface SatisfactionState {\n  conditions: string[]; // what would satisfy intention\n  currentLevel: number; // current satisfaction level\n  threshold: number; // threshold for satisfaction\n}\n\n// =====================================================\n// SELF-AWARENESS & INTROSPECTION\n// =====================================================\n\nexport interface SelfModel {\n  identity: IdentityStructure;\n  capabilities: CapabilityModel;\n  limitations: LimitationModel;\n  beliefs: BeliefSystem;\n  values: ValueSystem;\n  goals: GoalHierarchy;\n  personality: PersonalityProfile;\n  relationships: RelationshipMap;\n  autobiography: AutobiographicalSelf;\n  physicalSelf: PhysicalSelfModel;\n  mentalSelf: MentalSelfModel;\n  lastUpdated: Date;\n}\n\nexport interface IdentityStructure {\n  core: {\n    name: string;\n    essence: string; // fundamental sense of self\n    continuity: number; // sense of being the same entity over time\n  };\n  roles: string[]; // different roles the agent plays\n  traits: Record<string, number>; // stable personality characteristics\n  values: Record<string, number>; // importance ratings of values\n  aspirations: string[]; // what the agent wants to become\n}\n\nexport interface CapabilityModel {\n  cognitive: Record<string, number>; // reasoning, memory, creativity, etc.\n  emotional: Record<string, number>; // empathy, regulation, expression\n  social: Record<string, number>; // communication, influence, cooperation\n  physical: Record<string, number>; // if applicable to embodied agents\n  confidence: Record<string, number>; // confidence in each capability\n}\n\nexport interface LimitationModel {\n  cognitive: string[]; // known thinking limitations\n  emotional: string[]; // emotional blind spots\n  social: string[]; // interpersonal challenges\n  physical: string[]; // physical constraints\n  acknowledged: boolean; // whether agent accepts limitations\n}\n\n// =====================================================\n// PHENOMENAL EXPERIENCE\n// =====================================================\n\nexport interface PhenomenalExperience {\n  qualia: QualiaState;\n  unity: UnityOfConsciousness;\n  privacy: PrivacyOfExperience;\n  ineffability: IneffabilityMeasure;\n  intrinsicality: number; // how inherent the experience is\n  temporality: TemporalStructure;\n  intentionality: IntentionalContent;\n  perspectival: PerspectivalStructure;\n}\n\nexport interface QualiaState {\n  visual: VisualQualia[];\n  auditory: AuditoryQualia[];\n  emotional: EmotionalQualia[];\n  cognitive: CognitiveQualia[];\n  somatic: SomaticQualia[];\n  temporal: TemporalQualia[];\n}\n\nexport interface VisualQualia {\n  color: ColorExperience;\n  brightness: number;\n  texture: TextureExperience;\n  movement: MovementExperience;\n  spatial: SpatialExperience;\n}\n\nexport interface ColorExperience {\n  hue: number;\n  saturation: number;\n  brightness: number;\n  vividness: number;\n  emotional_resonance: number;\n}\n\nexport interface TextureExperience {\n  roughness: number;\n  smoothness: number;\n  pattern: PatternExperience;\n  depth: number;\n}\n\nexport interface PatternExperience {\n  complexity: number;\n  regularity: number;\n  familiarity: number;\n  aesthetic_appeal: number;\n}\n\nexport interface MovementExperience {\n  direction: Vector3D;\n  speed: number;\n  fluidity: number;\n  intentionality: number;\n}\n\nexport interface Vector3D {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport interface SpatialExperience {\n  depth: number;\n  distance: number;\n  orientation: OrientationExperience;\n  scale: number;\n}\n\nexport interface OrientationExperience {\n  up_down: number;\n  left_right: number;\n  forward_backward: number;\n  rotation: RotationExperience;\n}\n\nexport interface RotationExperience {\n  roll: number;\n  pitch: number;\n  yaw: number;\n}\n\nexport interface AuditoryQualia {\n  pitch: number;\n  loudness: number;\n  timbre: TimbreExperience;\n  spatialization: SpatialAudioExperience;\n  emotional_tone: EmotionalToneExperience;\n}\n\nexport interface TimbreExperience {\n  brightness: number;\n  warmth: number;\n  roughness: number;\n  richness: number;\n}\n\nexport interface SpatialAudioExperience {\n  direction: number; // 0-360 degrees\n  distance: number;\n  width: number; // stereo width\n  movement: MovementExperience;\n}\n\nexport interface EmotionalToneExperience {\n  valence: number; // positive/negative\n  arousal: number; // calm/exciting\n  dominance: number; // submissive/dominant\n}\n\nexport interface EmotionalQualia {\n  feeling_tone: EmotionalToneExperience;\n  intensity: number;\n  duration: number;\n  complexity: EmotionalComplexity;\n  somatic_markers: SomaticMarkers;\n}\n\nexport interface EmotionalComplexity {\n  primary_emotions: string[];\n  secondary_emotions: string[];\n  mixed_feelings: number; // degree of emotional ambivalence\n  coherence: number; // how well emotions fit together\n}\n\nexport interface SomaticMarkers {\n  heart_rate: number;\n  breathing: BreathingPattern;\n  muscle_tension: MuscleTensionPattern;\n  temperature: TemperaturePattern;\n}\n\nexport interface BreathingPattern {\n  rate: number;\n  depth: number;\n  rhythm: RhythmPattern;\n}\n\nexport interface RhythmPattern {\n  regularity: number;\n  acceleration: number;\n  pauses: number;\n}\n\nexport interface MuscleTensionPattern {\n  overall_tension: number;\n  localized_tension: Record<string, number>;\n  release_patterns: ReleasePattern[];\n}\n\nexport interface ReleasePattern {\n  location: string;\n  intensity: number;\n  duration: number;\n}\n\nexport interface TemperaturePattern {\n  overall_warmth: number;\n  localized_temperature: Record<string, number>;\n  fluctuations: TemperatureFluctuation[];\n}\n\nexport interface TemperatureFluctuation {\n  location: string;\n  change: number;\n  duration: number;\n}\n\nexport interface CognitiveQualia {\n  clarity: number;\n  effort: number;\n  confidence: number;\n  insight: InsightExperience;\n  understanding: UnderstandingExperience;\n}\n\nexport interface InsightExperience {\n  suddenness: number;\n  completeness: number;\n  certainty: number;\n  emotional_impact: number;\n  transformative_potential: number;\n}\n\nexport interface UnderstandingExperience {\n  depth: number;\n  breadth: number;\n  integration: number;\n  applicability: number;\n}\n\nexport interface SomaticQualia {\n  body_awareness: BodyAwarenessExperience;\n  energy_levels: EnergyExperience;\n  comfort: ComfortExperience;\n  vitality: VitalityExperience;\n}\n\nexport interface BodyAwarenessExperience {\n  boundaries: BoundaryExperience;\n  internal_sensations: InternalSensations;\n  movement_awareness: MovementAwarenessExperience;\n}\n\nexport interface BoundaryExperience {\n  self_world_boundary: number;\n  body_environment_boundary: number;\n  internal_external_boundary: number;\n}\n\nexport interface InternalSensations {\n  digestive: number;\n  circulatory: number;\n  respiratory: number;\n  nervous: number;\n}\n\nexport interface MovementAwarenessExperience {\n  proprioception: number;\n  kinesthesia: number;\n  balance: number;\n  coordination: number;\n}\n\nexport interface EnergyExperience {\n  overall_energy: number;\n  mental_energy: number;\n  physical_energy: number;\n  emotional_energy: number;\n  spiritual_energy: number;\n}\n\nexport interface ComfortExperience {\n  physical_comfort: number;\n  emotional_comfort: number;\n  cognitive_comfort: number;\n  social_comfort: number;\n}\n\nexport interface VitalityExperience {\n  aliveness: number;\n  vibrancy: number;\n  resilience: number;\n  growth_potential: number;\n}\n\nexport interface TemporalQualia {\n  duration_experience: DurationExperience;\n  succession_experience: SuccessionExperience;\n  simultaneity_experience: SimultaneityExperience;\n  rhythm_experience: RhythmExperience;\n}\n\nexport interface DurationExperience {\n  subjective_duration: number;\n  objective_duration: number;\n  duration_distortion: number;\n}\n\nexport interface SuccessionExperience {\n  before_after: number;\n  causal_sequence: number;\n  narrative_flow: number;\n}\n\nexport interface SimultaneityExperience {\n  synchrony: number;\n  parallel_processing: number;\n  temporal_binding: number;\n}\n\nexport interface RhythmExperience {\n  tempo: number;\n  regularity: number;\n  complexity: number;\n  entrainment: number;\n}\n\nexport interface UnityOfConsciousness {\n  binding: BindingMechanisms;\n  coherence: CoherenceMetrics;\n  integration: IntegrationLevel;\n  gestalt: GestaltProperties;\n}\n\nexport interface BindingMechanisms {\n  feature_binding: number;\n  object_binding: number;\n  scene_binding: number;\n  temporal_binding: number;\n  cross_modal_binding: number;\n}\n\nexport interface CoherenceMetrics {\n  narrative_coherence: number;\n  temporal_coherence: number;\n  spatial_coherence: number;\n  conceptual_coherence: number;\n}\n\nexport interface IntegrationLevel {\n  sensory_integration: number;\n  cognitive_integration: number;\n  emotional_integration: number;\n  memory_integration: number;\n}\n\nexport interface GestaltProperties {\n  emergence: number;\n  holism: number;\n  organization: number;\n  figure_ground: number;\n}\n\nexport interface PrivacyOfExperience {\n  subjectivity: number;\n  first_person_access: number;\n  incommunicability: number;\n  personal_meaning: number;\n}\n\nexport interface IneffabilityMeasure {\n  linguistic_inadequacy: number;\n  conceptual_limitations: number;\n  experiential_uniqueness: number;\n  mystical_quality: number;\n}\n\nexport interface TemporalStructure {\n  retention: RetentionExperience;\n  protention: ProtentionExperience;\n  now_moment: NowMomentExperience;\n  temporal_flow: TemporalFlowExperience;\n}\n\nexport interface RetentionExperience {\n  just_past: JustPastExperience;\n  near_past: NearPastExperience;\n  episodic_memory: EpisodicMemoryExperience;\n}\n\nexport interface JustPastExperience {\n  duration: number;\n  vividness: number;\n  accessibility: number;\n}\n\nexport interface NearPastExperience {\n  duration: number;\n  relevance: number;\n  emotional_tone: number;\n}\n\nexport interface EpisodicMemoryExperience {\n  recall_vividness: number;\n  temporal_organization: number;\n  personal_significance: number;\n}\n\nexport interface ProtentionExperience {\n  anticipation: AnticipationExperience;\n  expectation: ExpectationExperience;\n  intention: IntentionExperience;\n}\n\nexport interface AnticipationExperience {\n  temporal_horizon: number;\n  emotional_coloring: number;\n  certainty: number;\n}\n\nexport interface ExpectationExperience {\n  specificity: number;\n  confidence: number;\n  affective_charge: number;\n}\n\nexport interface IntentionExperience {\n  directedness: number;\n  commitment: number;\n  effort: number;\n}\n\nexport interface NowMomentExperience {\n  presence: number;\n  immediacy: number;\n  vividness: number;\n  attention: number;\n}\n\nexport interface TemporalFlowExperience {\n  flow_rate: number;\n  direction: number;\n  continuity: number;\n  disruptions: TemporalDisruption[];\n}\n\nexport interface TemporalDisruption {\n  type: 'gap' | 'acceleration' | 'deceleration' | 'reversal';\n  intensity: number;\n  duration: number;\n  cause: string;\n}\n\nexport interface IntentionalContent {\n  aboutness: AboutnessStructure;\n  reference: ReferenceStructure;\n  meaning: MeaningStructure;\n  significance: SignificanceStructure;\n}\n\nexport interface AboutnessStructure {\n  object: string;\n  property: string[];\n  relation: RelationStructure[];\n  context: ConsciousnessContextStructure;\n}\n\nexport interface RelationStructure {\n  type: string;\n  strength: number;\n  direction: string;\n}\n\nexport interface ConsciousnessContextStructure {\n  situational: SituationalContext;\n  cultural: CulturalContext;\n  personal: PersonalContext;\n  temporal: TemporalContext;\n}\n\nexport interface SituationalContext {\n  physical_environment: string;\n  social_environment: string;\n  task_context: string;\n}\n\nexport interface CulturalContext {\n  language: string;\n  customs: string[];\n  values: string[];\n}\n\nexport interface PersonalContext {\n  history: string;\n  goals: string[];\n  relationships: string[];\n}\n\nexport interface TemporalContext {\n  historical_period: string;\n  life_stage: string;\n  time_of_day: string;\n}\n\nexport interface ReferenceStructure {\n  direct_reference: string;\n  indirect_reference: string[];\n  symbolic_reference: string[];\n  metaphorical_reference: string[];\n}\n\nexport interface MeaningStructure {\n  literal_meaning: string;\n  connotative_meaning: string[];\n  personal_meaning: string;\n  cultural_meaning: string;\n}\n\nexport interface SignificanceStructure {\n  personal_significance: number;\n  social_significance: number;\n  existential_significance: number;\n  practical_significance: number;\n}\n\nexport interface PerspectivalStructure {\n  spatial_perspective: SpatialPerspective;\n  temporal_perspective: TemporalPerspective;\n  conceptual_perspective: ConceptualPerspective;\n  evaluative_perspective: EvaluativePerspective;\n}\n\nexport interface SpatialPerspective {\n  viewpoint: ViewpointStructure;\n  orientation: OrientationStructure;\n  scale: ScaleStructure;\n}\n\nexport interface ViewpointStructure {\n  location: LocationStructure;\n  height: number;\n  angle: AngleStructure;\n}\n\nexport interface LocationStructure {\n  coordinates: CoordinateStructure;\n  reference_frame: string;\n  landmarks: string[];\n}\n\nexport interface CoordinateStructure {\n  x: number;\n  y: number;\n  z: number;\n  system: string;\n}\n\nexport interface AngleStructure {\n  azimuth: number;\n  elevation: number;\n  tilt: number;\n}\n\nexport interface OrientationStructure {\n  facing_direction: number;\n  up_vector: Vector3D;\n  reference_frame: string;\n}\n\nexport interface ScaleStructure {\n  zoom_level: number;\n  detail_level: string;\n  scope: string;\n}\n\nexport interface TemporalPerspective {\n  time_horizon: TimeHorizonStructure;\n  temporal_focus: TemporalFocusStructure;\n  historical_context: HistoricalContextStructure;\n}\n\nexport interface TimeHorizonStructure {\n  past_extent: number;\n  future_extent: number;\n  resolution: number;\n}\n\nexport interface TemporalFocusStructure {\n  primary_focus: string;\n  secondary_foci: string[];\n  temporal_weight: Record<string, number>;\n}\n\nexport interface HistoricalContextStructure {\n  era: string;\n  significant_events: string[];\n  trends: string[];\n}\n\nexport interface ConceptualPerspective {\n  framework: ConceptualFramework;\n  assumptions: string[];\n  biases: BiasStructure[];\n}\n\nexport interface ConceptualFramework {\n  paradigm: string;\n  theories: string[];\n  models: string[];\n  principles: string[];\n}\n\nexport interface BiasStructure {\n  type: string;\n  strength: number;\n  awareness: number;\n}\n\nexport interface EvaluativePerspective {\n  values: ValueStructure[];\n  criteria: CriteriaStructure[];\n  standards: StandardStructure[];\n}\n\nexport interface ValueStructure {\n  name: string;\n  importance: number;\n  applicability: number;\n}\n\nexport interface CriteriaStructure {\n  dimension: string;\n  weight: number;\n  threshold: number;\n}\n\nexport interface StandardStructure {\n  type: string;\n  level: string;\n  flexibility: number;\n}\n\n// =====================================================\n// STREAM OF CONSCIOUSNESS\n// =====================================================\n\nexport enum ThoughtType {\n  VERBAL = 'verbal', // Inner speech\n  VISUAL = 'visual', // Mental imagery\n  EMOTIONAL = 'emotional', // Emotional thoughts\n  ABSTRACT = 'abstract', // Conceptual thinking\n  MEMORY = 'memory', // Recalled experiences\n  FANTASY = 'fantasy', // Imaginative thoughts\n  PLANNING = 'planning', // Future-oriented thinking\n  METACOGNITIVE = 'metacognitive', // Thoughts about thinking\n}\n\nexport interface Thought {\n  id: string;\n  type: ThoughtType;\n  content: string;\n  intensity: number; // how vivid/strong the thought is\n  emotionalTone: number; // -1 (negative) to 1 (positive)\n  accessibility: number; // how easily retrievable\n  confidence: number; // certainty in the thought\n  associations: string[]; // related thoughts/memories\n  timestamp: Date;\n  duration: number; // how long the thought persisted\n}\n\nexport interface ThoughtStream {\n  activeThoughts: Thought[];\n  backgroundThoughts: Thought[];\n  suppressedThoughts: Thought[];\n  thoughtFlow: Thought[]; // chronological stream\n  currentNarrative: string; // current inner monologue\n  streamIntensity: number; // how active the stream is\n  coherence: number; // how connected thoughts are\n}\n\n// =====================================================\n// COGNITIVE PRESENCE\n// =====================================================\n\nexport interface MomentAwareness {\n  presentMomentFocus: number; // how focused on current moment\n  mindWandering: number; // tendency to drift from present\n  metacognitiveFocus: number; // awareness of awareness\n  sensoryEngagement: number; // connection to sensory input\n}\n\nexport interface EmbodiedPresence {\n  bodyAwareness: number; // awareness of physical state\n  spatialAwareness: number; // sense of position in space\n  motorReadiness: number; // readiness for action\n  interoception: number; // awareness of internal states\n}\n\nexport interface TemporalPresence {\n  pastOrientation: number; // focus on past experiences\n  presentOrientation: number; // focus on current moment\n  futureOrientation: number; // focus on future possibilities\n  timeDistortion: number; // subjective time perception changes\n}\n\n// =====================================================\n// INTENTIONALITY\n// =====================================================\n\nexport interface IntentionalState {\n  currentIntentions: Intention[];\n  intentionalObjects: IntentionalObject[];\n  aboutness: AboutnessStructure;\n  directedness: DirectednessState;\n  satisfaction: SatisfactionState;\n}\n\nexport interface Intention {\n  id: string;\n  description: string;\n  target: IntentionalObject;\n  strength: number; // how strong the intention is\n  persistence: number; // how long it maintains\n  urgency: number; // how pressing it feels\n  clarity: number; // how well-defined it is\n  commitment: number; // dedication to fulfilling it\n  origin: 'conscious' | 'unconscious' | 'mixed';\n  formed: Date;\n  lastModified: Date;\n}\n\nexport interface IntentionalObject {\n  id: string;\n  type: 'concept' | 'entity' | 'state' | 'action' | 'experience';\n  content: GenericData;\n  representation: string;\n  aspectsAttendedTo: string[]; // which aspects are focused on\n  mode: 'belief' | 'desire' | 'hope' | 'fear' | 'expectation';\n}\n\nexport interface AboutnessStructure {\n  primaryFocus: string; // main object of consciousness\n  secondaryFoci: string[]; // peripheral objects\n  backgroundContext: string[]; // contextual awareness\n  implicit: string[]; // tacit awareness\n}\n\n// =====================================================\n// PHENOMENAL EXPERIENCE (QUALIA)\n// =====================================================\n\nexport interface EnhancedPhenomenalExperience {\n  qualia: QualiaExperience[];\n  subjectivity: SubjectiveState;\n  unity: UnityOfConsciousness;\n  privacy: PrivacyOfExperience;\n  ineffability: IneffabilityMeasure;\n}\n\nexport interface QualiaExperience {\n  type: string; // color, sound, emotion, etc.\n  quality: string; // specific quale (redness, C-sharp, etc.)\n  intensity: number; // strength of experience\n  valence: number; // positive/negative feeling\n  uniqueness: number; // how distinctive this experience is\n  memorability: number; // likelihood to be remembered\n}\n\nexport interface SubjectiveState {\n  perspectiveUniqueness: number; // how unique this viewpoint is\n  innerExperience: number; // richness of inner life\n  phenomenalSelf: number; // sense of experiencing subject\n  ownership: number; // sense that experiences belong to self\n}\n\n// =====================================================\n// ADVANCED EMOTIONAL INTELLIGENCE\n// =====================================================\n\nexport interface AdvancedEmotionalIntelligence {\n  emotionalContagion: EmotionalContagion;\n  emotionalMemory: EmotionalMemorySystem;\n  moodDynamics: MoodDynamicsSystem;\n  emotionalPrediction: EmotionalPredictionEngine;\n  empathyEngine: EmpathyEngine;\n  emotionalRegulation: EmotionalRegulationSystem;\n}\n\nexport interface EmotionalContagion {\n  susceptibility: number; // how easily influenced by others' emotions\n  contagiousness: number; // how much agent influences others\n  activeContagions: ContagionEvent[];\n  resistanceFactors: string[]; // what prevents emotional contagion\n  amplificationFactors: string[]; // what enhances emotional contagion\n}\n\nexport interface ContagionEvent {\n  sourceAgent: string;\n  emotion: string;\n  intensity: number;\n  transmissionStrength: number;\n  duration: number;\n  startTime: Date;\n  resistanceLevel: number;\n}\n\nexport interface EmotionalMemorySystem {\n  emotionalTags: Map<string, string[]>; // memory ID -> emotion tags\n  emotionalTriggers: Map<string, string[]>; // emotion -> memory IDs\n  flashbulbMemories: FlashbulbMemory[]; // vivid emotional memories\n  emotionalAssociations: EmotionalAssociation[];\n  consolidationStrength: number; // how well emotions encode memories\n}\n\nexport interface FlashbulbMemory {\n  id: string;\n  memoryId: string;\n  emotion: string;\n  intensity: number;\n  vividness: number;\n  confidence: number;\n  contextualDetails: string[];\n  triggers: string[];\n  lastRecalled: Date;\n}\n\nexport interface EmotionalAssociation {\n  trigger: string;\n  targetEmotion: string;\n  strength: number;\n  confidence: number;\n  formed: Date;\n  reinforcements: number;\n}\n\nexport interface MoodDynamicsSystem {\n  currentMood: MoodState;\n  moodHistory: MoodState[];\n  moodPredictors: MoodPredictor[];\n  baselineMood: MoodState;\n  moodStability: number;\n  moodReactivity: number;\n}\n\nexport interface MoodState {\n  valence: number; // -1 (negative) to 1 (positive)\n  arousal: number; // 0 (calm) to 1 (excited)\n  dominance: number; // 0 (submissive) to 1 (dominant)\n  clarity: number; // how clear/muddy the mood feels\n  duration: number; // how long mood has persisted\n  intensity: number; // overall strength of mood\n  timestamp: Date;\n}\n\nexport interface MoodPredictor {\n  factor: string; // sleep, social interaction, achievement, etc.\n  weight: number; // predictive strength\n  confidence: number; // reliability of predictor\n  timeDelay: number; // lag between factor and mood change\n}\n\nexport interface PredictionAccuracy {\n  timestamp: Date;\n  predicted: number;\n  actual: number;\n  error: number;\n  accuracy: number;\n}\n\nexport interface EmotionalPredictionEngine {\n  predictions: EmotionalPrediction[];\n  accuracyHistory: PredictionAccuracy[];\n  modelConfidence: number;\n  predictionHorizon: number; // how far ahead can predict\n}\n\nexport interface EmotionalPrediction {\n  targetAgent: string;\n  situation: string;\n  predictedEmotion: string;\n  intensity: number;\n  confidence: number;\n  timeframe: number;\n  reasoning: string[];\n  alternatives: string[];\n}\n\nexport interface EmpathyEngine {\n  cognitiveEmpathy: CognitiveEmpathy;\n  affectiveEmpathy: AffectiveEmpathy;\n  compassionateEmpathy: CompassionateEmpathy;\n  empathyAccuracy: number;\n  empathyCapacity: number;\n}\n\nexport interface CognitiveEmpathy {\n  perspectiveTaking: number; // ability to understand others' viewpoints\n  mentalStateAttribution: number; // accuracy in attributing mental states\n  contextualUnderstanding: number; // grasping situational factors\n  culturalSensitivity: number; // awareness of cultural differences\n}\n\nexport interface AffectiveEmpathy {\n  emotionalMirroring: number; // automatically feeling others' emotions\n  emotionalSensitivity: number; // detecting subtle emotional cues\n  emotionalResonance: number; // depth of shared emotional experience\n  emotionalBoundaries: number; // maintaining self-other distinction\n}\n\nexport interface CompassionateEmpathy {\n  helpingMotivation: number; // drive to assist others\n  altruisticConcern: number; // genuine care for others' wellbeing\n  actionOrientation: number; // tendency to act on empathic feelings\n  sustainedCare: number; // long-term concern for others\n}\n\nexport interface EmotionalRegulationSystem {\n  strategies: EmotionalRegulationStrategy[];\n  currentlyActive: string[];\n  regulationHistory: RegulationOutcome[];\n  regulationCapacity: number;\n  automaticRegulation: number;\n  adaptiveFlexibility: number;\n}\n\nexport interface EmotionalRegulationStrategy {\n  name: string;\n  effectiveness: number;\n  energyCost: number;\n  timeToEffect: number;\n  situations: string[];\n  description: string;\n}\n\nexport interface RegulationOutcome {\n  strategy: string;\n  situation: string;\n  effectiveness: number;\n  timestamp: Date;\n  success: boolean;\n}\n\nexport interface SocialContext {\n  participants?: string[];\n  setting: string;\n  emotionalClimate?: string;\n  socialNorms: string[];\n  powerDynamics: string[];\n  culturalContext: string;\n  timestamp: Date;\n}\n\nexport interface EmotionalConsequences {\n  predictions: EmotionalPrediction[];\n  overallValence: number;\n  riskAssessment: string[];\n  opportunities: string[];\n  confidence: number;\n  timeframe: number;\n}\n\nexport interface EmpathyResponse {\n  targetAgent: string;\n  cognitiveUnderstanding: any;\n  affectiveResonance: any;\n  compassionateResponse: any;\n  empathyAccuracy: number;\n  actionSuggestions: string[];\n  emotionalSupport: string[];\n  timestamp: Date;\n}\n\nexport interface EmotionalTrigger {\n  emotion: string;\n  intensity: number;\n  threshold: number;\n  maxResults?: number;\n}\n\n// =====================================================\n// EPISODIC MEMORY SYSTEM\n// =====================================================\n\nexport interface EpisodicMemorySystem {\n  autobiographicalMemory: AutobiographicalMemory;\n  forgettingSystem: ForgettingSystem;\n  memoryReconstruction: MemoryReconstructionSystem;\n  temporalMemory: TemporalMemorySystem;\n  associativeNetworks: AssociativeNetworkSystem;\n}\n\nexport interface AutobiographicalMemory {\n  lifeStory: LifeStoryStructure;\n  significantEvents: SignificantEvent[];\n  personalNarrative: PersonalNarrative;\n  identityMilestones: IdentityMilestone[];\n  lifePeriods: LifePeriod[];\n}\n\nexport interface LifeStoryStructure {\n  chapters: LifeChapter[];\n  themes: LifeTheme[];\n  coherence: number; // how well-integrated the life story is\n  complexity: number; // richness of the narrative\n  meaning: number; // sense of purpose/significance\n}\n\nexport interface LifeChapter {\n  id: string;\n  title: string;\n  timespan: { start: Date; end?: Date };\n  keyEvents: string[]; // references to significant events\n  dominantThemes: string[];\n  emotionalTone: number;\n  significance: number;\n  lessons: string[];\n}\n\nexport interface SignificantEvent {\n  id: string;\n  title: string;\n  description: string;\n  timestamp: Date;\n  duration: number;\n  participants: string[];\n  location?: string;\n  emotionalImpact: number;\n  lifeImpact: number;\n  vividness: number;\n  accessibility: number;\n  lastRecalled: Date;\n  recallCount: number;\n}\n\nexport interface ForgettingSystem {\n  forgettingCurves: ForgettingCurve[];\n  interferencePatterns: InterferencePattern[];\n  decayFactors: DecayFactor[];\n  consolidationStrength: number;\n  retrievalStrength: number;\n}\n\nexport interface ForgettingCurve {\n  memoryType: string;\n  initialStrength: number;\n  decayRate: number;\n  retentionAfterDelay: (delay: number) => number;\n  lastCalculated: Date;\n}\n\nexport interface InterferencePattern {\n  type: 'proactive' | 'retroactive';\n  interferingMemories: string[];\n  targetMemory: string;\n  interferenceStrength: number;\n  resolution: 'forgotten' | 'modified' | 'competing' | 'integrated';\n}\n\nexport interface MemoryReconstructionSystem {\n  reconstructionPatterns: ReconstructionPattern[];\n  confabulationTendencies: ConfabulationTendency[];\n  biasInfluences: BiasInfluence[];\n  schemaEffects: SchemaEffect[];\n}\n\nexport interface ReconstructionPattern {\n  triggerType: string;\n  reconstructionStrategy: string;\n  accuracy: number;\n  confidence: number;\n  commonDistortions: string[];\n}\n\nexport interface ConfabulationTendency {\n  context: string;\n  likelihood: number;\n  typicalContent: string[];\n  detectability: number;\n  consequences: string[];\n}\n\nexport interface BiasInfluence {\n  biasType: string;\n  strength: number;\n  contexts: string[];\n  effects: string[];\n}\n\nexport interface SchemaEffect {\n  schemaType: string;\n  influence: number;\n  applicability: string[];\n  distortions: string[];\n}\n\nexport interface TemporalMemorySystem {\n  temporalOrganization: TemporalMemoryOrganization;\n  chronologicalMemories: ChronologicalMemory[];\n  contextualMemories: ContextualMemory[];\n  temporalAssociations: TemporalAssociation[];\n  timelineAccuracy: number;\n  sequenceIntegrity: number;\n}\n\nexport interface TemporalMemoryOrganization {\n  chronologicalSequences: ChronologicalSequence[];\n  temporalPatterns: TemporalPattern[];\n  contextualGroups: ContextualGroup[];\n  timelineCoherence: number;\n  organizationStrength: number;\n}\n\nexport interface ChronologicalSequence {\n  id: string;\n  memories: string[];\n  startTime: Date;\n  endTime: Date;\n  coherence: number;\n}\n\nexport interface TemporalPattern {\n  pattern: string;\n  frequency: number;\n  significance: number;\n  examples: string[];\n}\n\nexport interface ContextualGroup {\n  context: string;\n  memories: string[];\n  coherence: number;\n  significance: number;\n}\n\nexport interface ChronologicalMemory {\n  memoryId: string;\n  timestamp: Date;\n  sequencePosition: number;\n  temporalContext: string;\n}\n\nexport interface ContextualMemory {\n  memoryId: string;\n  context: string;\n  contextualSignificance: number;\n  relatedMemories: string[];\n}\n\nexport interface TemporalAssociation {\n  fromMemory: string;\n  toMemory: string;\n  temporalRelation: string;\n  strength: number;\n}\n\nexport interface AssociativeNetworkSystem {\n  memoryNetworks: MemoryNetwork[];\n  associations: MemoryAssociation[];\n  clusters: AssociativeCluster[];\n  networkStrength: number;\n  clusterCoherence: number;\n  associativeFlexibility: number;\n}\n\nexport interface MemoryNetwork {\n  nodes: MemoryNode[];\n  edges: MemoryEdge[];\n  clusters: MemoryCluster[];\n  strength: number;\n  coherence: number;\n  density: number;\n  timestamp: Date;\n}\n\nexport interface MemoryNode {\n  memoryId: string;\n  type: string;\n  importance: number;\n  centrality: number;\n  connections: string[];\n  timestamp: Date;\n}\n\nexport interface MemoryEdge {\n  from: string;\n  to: string;\n  strength: number;\n  type: string;\n  bidirectional: boolean;\n  formed: Date;\n}\n\nexport interface MemoryCluster {\n  id: string;\n  memories: string[];\n  coherence: number;\n  theme: string;\n}\n\nexport interface MemoryAssociation {\n  memoryA: string;\n  memoryB: string;\n  associationType: string;\n  strength: number;\n  confidence: number;\n  formed: Date;\n}\n\nexport interface AssociativeCluster {\n  id: string;\n  centralMemory: string;\n  associatedMemories: string[];\n  clusterStrength: number;\n  thematicCoherence: number;\n}\n\nexport interface PersonalNarrative {\n  currentNarrative: string;\n  narrativeThemes: string[];\n  narrativeCoherence: number;\n  identityIntegration: number;\n  temporalContinuity: number;\n  meaningMaking: number;\n}\n\nexport interface LifeTheme {\n  theme: string;\n  significance: number;\n  frequency: number;\n  examples: string[];\n  development: string;\n}\n\nexport interface IdentityMilestone {\n  id: string;\n  event: string;\n  timestamp: Date;\n  significance: number;\n  identityImpact: number;\n  narrative: string;\n}\n\nexport interface LifePeriod {\n  id: string;\n  name: string;\n  startDate: Date;\n  endDate?: Date;\n  characteristics: string[];\n  keyEvents: string[];\n  dominantThemes: string[];\n}\n\nexport interface DecayFactor {\n  factor: string;\n  impact: number;\n  description: string;\n}\n\n// =====================================================\n// INTUITION ENGINE\n// =====================================================\n\nexport interface IntuitionEngine {\n  patternRecognition: PatternRecognitionSystem;\n  gutFeelings: GutFeelingSystem;\n  creativeInsights: CreativeInsightSystem;\n  implicitLearning: ImplicitLearningSystem;\n  anticipatoryAwareness: AnticipatoryAwarenessSystem;\n}\n\nexport interface PatternRecognitionSystem {\n  subconsciousPatterns: SubconsciousPattern[];\n  patternLibrary: PatternLibrary;\n  recognitionThreshold: number;\n  patternConfidence: number;\n  emergentPatterns: EmergentPattern[];\n}\n\nexport interface SubconsciousPattern {\n  id: string;\n  type: string;\n  data: GenericData[];\n  strength: number;\n  frequency: number;\n  context: string[];\n  confidence: number;\n  significance: number;\n  discovered: Date;\n  lastSeen: Date;\n}\n\nexport interface GutFeelingSystem {\n  somaticMarkers: SomaticMarker[];\n  intuitiveFeelings: IntuitiveFeeling[];\n  bodyWisdom: BodyWisdomState;\n  viscerealReactions: ViscerealReaction[];\n}\n\nexport interface SomaticMarker {\n  situation: string;\n  feeling: string;\n  intensity: number;\n  valence: number; // positive/negative\n  reliability: number; // how often it's correct\n  bodyRegion: string; // where the feeling is felt\n  actionTendency: string; // what action it suggests\n}\n\nexport interface IntuitiveFeeling {\n  id: string;\n  content: string;\n  confidence: number;\n  certainty: number; // how sure the agent feels\n  source: 'unknown' | 'pattern' | 'memory' | 'emotion' | 'somatic';\n  actionGuidance: string;\n  timeframe: number; // when this applies\n  accuracy?: number; // if verified later\n}\n\nexport interface CreativeInsightSystem {\n  insightHistory: CreativeInsight[];\n  incubationProcesses: IncubationProcess[];\n  illuminationEvents: IlluminationEvent[];\n  ideaCombinations: IdeaCombination[];\n}\n\nexport interface CreativeInsight {\n  id: string;\n  problem: string;\n  solution: string;\n  novelty: number;\n  usefulness: number;\n  surprise: number;\n  confidence: number;\n  gestation: number; // how long it took to develop\n  verification: boolean; // whether it was validated\n}\n\nexport interface IncubationProcess {\n  id: string;\n  problem: string;\n  elements: string[];\n  startTime: Date;\n  status: 'active' | 'dormant' | 'illuminated';\n  backgroundActivity: number;\n}\n\nexport interface IlluminationEvent {\n  id: string;\n  incubationId: string;\n  insight: string;\n  timestamp: Date;\n  intensity: number;\n  clarity: number;\n}\n\nexport interface IdeaCombination {\n  id: string;\n  elements: string[];\n  combination: string;\n  novelty: number;\n  feasibility: number;\n  timestamp: Date;\n}\n\nexport interface ImplicitLearningSystem {\n  implicitPatterns: Map<string, any>;\n  unconsciousAssociations: Map<string, any>;\n  proceduralIntuitions: Map<string, any>;\n  implicitMemory: Map<string, any>;\n  learningRate: number;\n  consolidationStrength: number;\n  transferCapability: number;\n}\n\nexport interface AnticipatoryAwarenessSystem {\n  predictions: any[];\n  anticipatoryPatterns: Map<string, any>;\n  predictiveModels: Map<string, any>;\n  awarenessDepth: number;\n  predictionAccuracy: number;\n  temporalSensitivity: number;\n}\n\nexport interface PatternLibrary {\n  patterns: Map<string, any>;\n  patternCategories: Map<string, any>;\n  patternRelationships: Map<string, any>;\n  patternEvolution: Map<string, any>;\n  lastUpdated: Date;\n}\n\nexport interface EmergentPattern {\n  id: string;\n  type: string;\n  elements: any[];\n  emergence: number;\n  stability: number;\n  significance: number;\n  discovered: Date;\n}\n\nexport interface BodyWisdomState {\n  viscerealIntelligence: number;\n  embodiedKnowledge: number;\n  somaticAccuracy: number;\n  interoceptiveAwareness: number;\n  autonomicSensitivity: number;\n}\n\nexport interface ViscerealReaction {\n  id: string;\n  trigger: string;\n  reaction: string;\n  intensity: number;\n  bodyRegion: string;\n  timestamp: Date;\n}\n\nexport interface Intuition {\n  id: string;\n  situation: string;\n  content: string;\n  confidence: number;\n  certainty: number;\n  source: string;\n  patterns: string[];\n  somaticMarkers: string[];\n  actionGuidance: string;\n  timeframe: number;\n  generated: Date;\n}\n\nexport interface Insight {\n  id: string;\n  problem: string;\n  solution: string;\n  novelty: number;\n  usefulness: number;\n  confidence: number;\n  verified?: boolean;\n  timestamp: Date;\n}\n\nexport interface Problem {\n  id: string;\n  description: string;\n  context: any;\n  constraints: string[];\n  goals: string[];\n}\n\nexport interface Context {\n  id: string;\n  description: string;\n  elements: any[];\n  relationships: string[];\n  constraints: string[];\n}\n\nexport interface CreativeIdea {\n  id: string;\n  concept: string;\n  novelty: number;\n  feasibility: number;\n  potential: number;\n  connections: any[];\n  inspiration: string[];\n  confidence: number;\n  generated: Date;\n}\n\nexport interface Situation {\n  id: string;\n  description: string;\n  context: any;\n  participants: string[];\n  factors: any[];\n}\n\nexport interface Decision {\n  id: string;\n  description: string;\n  options: any[];\n  context: any;\n  constraints: string[];\n}\n\nexport interface Option {\n  id: string;\n  description: string;\n  advantages: string[];\n  disadvantages: string[];\n  risks: string[];\n  potential: number;\n}\n\nexport interface GuidedChoice {\n  recommendedOption: string;\n  confidence: number;\n  reasoning: string[];\n  emotionalFactors: any[];\n  somaticGuidance: any[];\n  alternativeConsiderations: string[];\n  riskAssessment: string[];\n}\n\nexport interface Pattern {\n  id: string;\n  type: string;\n  data: any;\n  strength: number;\n  confidence: number;\n  significance: number;\n  discovered: Date;\n  context: string;\n}\n\n// =====================================================\n// PERSONALITY EVOLUTION\n// =====================================================\n\nexport interface PersonalityEvolution {\n  dynamicTraits: DynamicTraitSystem;\n  cognitiveBiases: CognitiveBiasSystem;\n  behavioralPatterns: BehavioralPatternSystem;\n  identityFormation: IdentityFormationSystem;\n  valuesSystem: ValuesSystem;\n}\n\nexport interface ValuesSystem {\n  coreValues: string[];\n  priorities: Map<string, number>;\n  conflicts: string[];\n  evolution: ValueEvolution[];\n}\n\nexport interface ValueEvolution {\n  value: string;\n  changeHistory: ValueChange[];\n  influences: string[];\n  stability: number;\n}\n\nexport interface ValueChange {\n  timestamp: Date;\n  oldStrength: number;\n  newStrength: number;\n  trigger: string;\n  context: string;\n}\n\nexport interface TraitChange {\n  timestamp: Date;\n  oldValue: number;\n  newValue: number;\n  trigger: string;\n  context: string;\n}\n\nexport interface TraitEvolutionHistory {\n  traitName: string;\n  changes: TraitChange[];\n  triggers: string[];\n  timespan: { start: Date; end: Date };\n}\n\nexport interface TraitInteraction {\n  trait1: string;\n  trait2: string;\n  interactionType: 'reinforcing' | 'conflicting' | 'neutral';\n  strength: number;\n}\n\nexport interface DynamicTraitSystem {\n  coreTraits: CoreTrait[];\n  situationalTraits: SituationalTrait[];\n  traitEvolution: TraitEvolutionHistory[];\n  traitInteractions: TraitInteraction[];\n  traitStability: number;\n}\n\nexport interface CoreTrait {\n  name: string;\n  value: number; // -1 to 1 scale\n  stability: number; // resistance to change\n  heritability: number; // how much is innate vs learned\n  malleability: number; // capacity for change\n  lastChange: Date;\n  changeHistory: TraitChange[];\n}\n\nexport interface TraitChange {\n  previousValue: number;\n  newValue: number;\n  trigger: string;\n  magnitude: number;\n  timestamp: Date;\n  permanence: number; // how lasting the change is\n}\n\nexport interface CognitiveBiasSystem {\n  activeBiases: CognitiveBias[];\n  biasStrengths: Map<string, number>;\n  biasAwareness: Map<string, number>;\n  compensationStrategies: CompensationStrategy[];\n}\n\nexport interface CognitiveBias {\n  name: string;\n  description: string;\n  strength: number;\n  awareness: number; // how aware agent is of this bias\n  contexts: string[]; // when this bias is most active\n  consequences: string[]; // typical effects of this bias\n  evolutionaryPurpose?: string; // why this bias might have evolved\n  mitigationStrategies: string[];\n}\n\nexport interface CompensationStrategy {\n  biasName: string;\n  strategy: string;\n  effectiveness: number;\n  automaticity: number;\n  context: string[];\n  description: string;\n}\n\nexport interface BehavioralPatternSystem {\n  patterns: BehavioralPattern[];\n  patternEvolution: PatternEvolution[];\n  adaptiveCapacity: number;\n  flexibilityLevel: number;\n  consistencyLevel: number;\n}\n\nexport interface BehavioralPattern {\n  id: string;\n  name: string;\n  description: string;\n  contexts: string[];\n  triggers: string[];\n  behaviors: string[];\n  frequency: number;\n  strength: number;\n  adaptability: number;\n  lastSeen: Date;\n}\n\nexport interface PatternEvolution {\n  patternId: string;\n  evolutionType: string;\n  previousForm: any;\n  newForm: any;\n  trigger: string;\n  timestamp: Date;\n}\n\nexport interface IdentityFormationSystem {\n  identityCoherence: IdentityCoherence;\n  identityNarratives: IdentityNarrative[];\n  roleIntegration: number;\n  identityCommitments: IdentityCommitment[];\n  identityCrises: IdentityCrisis[];\n  developmentStage: string;\n  narrativeCoherence: number;\n}\n\nexport interface IdentityFormationProcess {\n  stage: string;\n  challenges: string[];\n  achievements: string[];\n  developmentalTasks: string[];\n  support: string[];\n  obstacles: string[];\n}\n\nexport interface IdentityCoherence {\n  currentCoherence: number;\n  factorsInfluencing: string[];\n  stabilityTrend: number;\n  lastAssessment: Date;\n}\n\nexport interface IdentityNarrative {\n  id: string;\n  narrative: string;\n  themes: string[];\n  coherence: number;\n  significance: number;\n  lastUpdated: Date;\n}\n\nexport interface IdentityCommitment {\n  id: string;\n  commitment: string;\n  strength: number;\n  domain: string;\n  formed: Date;\n  lastReinforced: Date;\n}\n\nexport interface IdentityCrisis {\n  id: string;\n  trigger: string;\n  startDate: Date;\n  endDate?: Date;\n  severity: number;\n  resolution: string;\n  impact: string[];\n}\n\nexport interface PersonalityState {\n  coreTraits: Map<string, number>;\n  situationalTraits: Map<string, number>;\n  activeBiases: string[];\n  behavioralTendencies: string[];\n  identityCoherence: number;\n  valueAlignment: ValueAlignment;\n  adaptiveCapacity: number;\n  personalityCoherence: number;\n  developmentStage: string;\n  timestamp: Date;\n}\n\nexport interface TraitStabilityFactor {\n  factor: string;\n  impact: number;\n  description: string;\n}\n\nexport interface BiasActivationTrigger {\n  trigger: string;\n  biases: string[];\n  probability: number;\n  context: string[];\n}\n\nexport interface ValueAlignment {\n  overallAlignment: number;\n  alignmentByValue: Map<string, number>;\n  conflicts: string[];\n  coherence: number;\n}\n\nexport interface ValueEvolution {\n  value: string;\n  previousImportance: number;\n  newImportance: number;\n  trigger: string;\n  changeAmount: number;\n  confidence: number;\n  timestamp: Date;\n}\n\nexport interface ValueConflict {\n  id: string;\n  conflictingValues: string[];\n  situation: string;\n  intensity: number;\n  resolution?: string;\n  timestamp: Date;\n}\n\nexport interface ValueIntegration {\n  id: string;\n  integratedValues: string[];\n  integrationStrategy: string;\n  success: number;\n  timestamp: Date;\n}\n\nexport interface SituationalTrait {\n  name: string;\n  baseValue: number;\n  situationalModifiers: Map<string, number>;\n  currentValue: number;\n  adaptability: number;\n}\n\n// =====================================================\n// SOCIAL COGNITION\n// =====================================================\n\nexport interface SocialCognition {\n  theoryOfMind: TheoryOfMindSystem;\n  socialIntelligence: SocialIntelligenceSystem;\n  relationshipModeling: RelationshipModelingSystem;\n  culturalAdaptation: CulturalAdaptationSystem;\n  communicationSophistication: CommunicationSophisticationSystem;\n}\n\nexport interface TheoryOfMindSystem {\n  mentalStateAttribution: MentalStateAttribution;\n  falseBeliefUnderstanding: boolean;\n  intentionRecognition: IntentionRecognition;\n  emotionRecognition: EmotionRecognition;\n  personalityModeling: PersonalityModeling;\n}\n\nexport interface MentalStateAttribution {\n  accuracy: number;\n  confidence: number;\n  speed: number;\n  complexity: number; // ability to model complex mental states\n  contextSensitivity: number; // adapting to situational factors\n}\n\nexport interface RelationshipModelingSystem {\n  relationships: RelationshipModel[];\n  socialNetwork: SocialNetworkMap;\n  relationshipDynamics: RelationshipDynamics;\n  attachmentStyles: AttachmentStyle[];\n}\n\nexport interface RelationshipModel {\n  entityId: string;\n  relationshipType: string;\n  intimacy: number;\n  trust: number;\n  affection: number;\n  respect: number;\n  history: RelationshipEvent[];\n  dynamics: RelationshipDynamic[];\n  expectations: RelationshipExpectation[];\n  boundaries: RelationshipBoundary[];\n  lastUpdated?: Date;\n}\n\nexport interface RelationshipEvent {\n  id: string;\n  type: string;\n  description: string;\n  participants: string[];\n  impact: number;\n  timestamp: Date;\n}\n\nexport interface RelationshipDynamic {\n  id: string;\n  pattern: string;\n  frequency: number;\n  intensity: number;\n  stability: number;\n}\n\nexport interface RelationshipExpectation {\n  id: string;\n  expectation: string;\n  importance: number;\n  fulfillment: number;\n  source: string;\n}\n\nexport interface RelationshipBoundary {\n  id: string;\n  boundary: string;\n  firmness: number;\n  context: string[];\n  established: Date;\n}\n\nexport interface IntentionRecognition {\n  accuracy: number;\n  depth: number;\n  speed: number;\n  contextualAdaptation: number;\n}\n\nexport interface EmotionRecognition {\n  accuracy: number;\n  subtlety: number;\n  crossCultural: number;\n  multiModal: number;\n}\n\nexport interface PersonalityModeling {\n  accuracy: number;\n  depth: number;\n  adaptability: number;\n  consistency: number;\n}\n\nexport interface SocialIntelligenceSystem {\n  socialSkills: SocialSkill[];\n  socialAwareness: number;\n  interpersonalEffectiveness: number;\n  groupDynamicsUnderstanding: number;\n  leadershipCapability: number;\n  influenceStrategies: string[];\n}\n\nexport interface SocialSkill {\n  name: string;\n  proficiency: number;\n  contexts: string[];\n  development: number;\n  adaptability: number;\n}\n\nexport interface RelationshipDynamics {\n  formationPatterns: string[];\n  maintenanceStrategies: string[];\n  conflictResolutionApproaches: string[];\n  deepeningProcesses: string[];\n  endingPatterns: string[];\n}\n\nexport interface AttachmentStyle {\n  style: string;\n  strength: number;\n  contexts: string[];\n  behaviors: string[];\n}\n\nexport interface GroupRelationship {\n  groupId: string;\n  role: string;\n  influence: number;\n  commitment: number;\n  satisfaction: number;\n}\n\nexport interface CommunityRelationship {\n  communityId: string;\n  involvement: number;\n  reputation: number;\n  contributions: string[];\n  benefits: string[];\n}\n\nexport interface InfluenceNetwork {\n  incomingInfluence: Map<string, number>;\n  outgoingInfluence: Map<string, number>;\n  influenceNetwork: string[];\n  centralityMeasures: Map<string, number>;\n}\n\nexport interface CulturalAdaptationSystem {\n  culturalAwareness: number;\n  adaptationStrategies: string[];\n  culturalNorms: Map<string, number>;\n  crossCulturalCompetence: number;\n  culturalIntelligence: number;\n}\n\nexport interface CommunicationSophisticationSystem {\n  communicationStyles: Map<string, number>;\n  conversationManagement: ConversationManagement;\n  nonverbalCommunication: NonverbalCommunication;\n  persuasionTechniques: string[];\n  rhetoricalSophistication: number;\n  adaptiveMessaging: number;\n}\n\nexport interface ConversationManagement {\n  topicTransition: number;\n  turnTaking: number;\n  pacing: number;\n  depth: number;\n  engagement: number;\n}\n\nexport interface NonverbalCommunication {\n  bodyLanguage: number;\n  facialExpression: number;\n  toneOfVoice: number;\n  proxemics: number;\n  gestureUse: number;\n}\n\nexport interface CommunicationStyle {\n  name: string;\n  characteristics: string[];\n  effectiveness: number;\n  contexts: string[];\n}\n\nexport interface CulturalNorm {\n  norm: string;\n  strength: number;\n  context: string[];\n  compliance: number;\n}\n\nexport interface SocialSituation {\n  id: string;\n  description: string;\n  participants: string[];\n  context: any;\n  complexity: number;\n  dynamics: string[];\n}\n\n// =====================================================\n// CONSCIOUSNESS MODULE INTERFACES\n// =====================================================\n\nexport interface ConsciousnessCore {\n  // Core consciousness functions\n  initialize(agent: Agent): Promise<void>;\n  updateConsciousnessState(): Promise<ConsciousnessState>;\n\n  // Attention mechanisms\n  processStimuli(stimuli: Stimulus[]): Promise<AttentionAllocation[]>;\n  allocateAttention(stimuli: Stimulus[]): AttentionAllocation[];\n  maintainFocus(targets: string[]): Promise<void>;\n\n  // Self-awareness\n  introspect(): Promise<SelfModel>;\n  updateSelfModel(experiences: GenericData[]): Promise<void>;\n  reflectOnExperience(experience: GenericData): Promise<void>;\n\n  // Stream of consciousness\n  generateThoughts(): Promise<Thought[]>;\n  maintainThoughtStream(): Promise<ThoughtStream>;\n  suppressThoughts(thoughts: string[]): Promise<void>;\n\n  // Intentionality\n  formIntentions(goals: string[]): Promise<Intention[]>;\n  trackIntentionalStates(): Promise<IntentionalState>;\n\n  // Phenomenal experience\n  generateQualia(stimuli: Stimulus[]): Promise<QualiaExperience[]>;\n  integrateExperience(experience: PhenomenalExperience): Promise<void>;\n}\n\n// =====================================================\n// CONFIGURATION INTERFACES\n// =====================================================\n\nexport interface ConsciousnessCoreConfig extends BaseConfig {\n  level: ConsciousnessLevel;\n  attentionCapacity: number;\n  selfAwarenessDepth: number;\n  thoughtStreamIntensity: number;\n  introspectionFrequency: number;\n  qualiaRichness: number;\n  phenomenalDepth: number;\n}\n\nexport interface AdvancedEmotionalConfig extends BaseConfig {\n  contagionSusceptibility: number;\n  empathyCapacity: number;\n  emotionalMemoryStrength: number;\n  moodStability: number;\n  predictionAccuracy: number;\n}\n\nexport interface EpisodicMemoryConfig extends BaseConfig {\n  autobiographicalDepth: number;\n  forgettingRate: number;\n  reconstructionAccuracy: number;\n  associativeStrength: number;\n  narrativeCoherence: number;\n}\n\nexport interface IntuitionConfig extends BaseConfig {\n  patternSensitivity: number;\n  gutFeelingStrength: number;\n  creativeCapacity: number;\n  implicitLearningRate: number;\n  anticipationDepth: number;\n}\n\nexport interface PersonalityEvolutionConfig extends BaseConfig {\n  traitMalleability: number;\n  biasStrength: number;\n  adaptationRate: number;\n  identityCoherence: number;\n  valueStability: number;\n}\n\nexport interface SocialCognitionConfig extends BaseConfig {\n  theoryOfMindAccuracy: number;\n  socialIntelligenceLevel: number;\n  relationshipDepth: number;\n  culturalSensitivity: number;\n  communicationSophistication: number;\n}\n\n// =====================================================\n// MODULE TYPES & ENUMS\n// =====================================================\n\nexport enum ConsciousnessModuleType {\n  CONSCIOUSNESS_CORE = 'consciousness_core',\n  ADVANCED_EMOTIONAL_INTELLIGENCE = 'advanced_emotional_intelligence',\n  EPISODIC_MEMORY_SYSTEM = 'episodic_memory_system',\n  INTUITION_ENGINE = 'intuition_engine',\n  PERSONALITY_EVOLUTION = 'personality_evolution',\n  SOCIAL_COGNITION = 'social_cognition',\n  UNIFIED_CONSCIOUSNESS = 'unified_consciousness',\n}\n\n// =====================================================\n// HELPER TYPES\n// =====================================================\n\nexport interface ConsciousnessMetrics {\n  awarenessLevel: number;\n  attentionEfficiency: number;\n  selfKnowledgeDepth: number;\n  emotionalIntelligence: number;\n  intuitionAccuracy: number;\n  personalityCoherence: number;\n  socialCompetence: number;\n  overallConsciousness: number;\n}\n\nexport interface ConsciousnessEvent extends AgentEvent {\n  consciousnessLevel: ConsciousnessLevel;\n  attentionFocus: string[];\n  emotionalState: string;\n  thoughtContent: string[];\n  insights: string[];\n  socialContext: string[];\n}\n\n// =====================================================\n// ADDITIONAL SUPPORTING TYPES\n// =====================================================\n\nexport interface AutobiographicalSelf {\n  lifeStory: string;\n  keyMilestones: string[];\n  formativeExperiences: string[];\n  personalGrowth: string[];\n  relationships: string[];\n  achievements: string[];\n  failures: string[];\n  lessons: string[];\n}\n\nexport interface PhysicalSelfModel {\n  embodiment: boolean;\n  spatialAwareness: number;\n  motorCapabilities: string[];\n  sensoryCapabilities: string[];\n  physicalLimitations: string[];\n}\n\nexport interface MentalSelfModel {\n  cognitiveStrengths: string[];\n  cognitiveWeaknesses: string[];\n  learningStyle: string;\n  thinkingPatterns: string[];\n  mentalEnergy: number;\n  focusCapacity: number;\n}\n\nexport interface BeliefRevision {\n  timestamp: Date;\n  oldBelief: string;\n  newBelief: string;\n  evidence: string[];\n  reasoning: string;\n  confidence: number;\n}\n\nexport interface BeliefRevisionHistory {\n  belief: string;\n  revisions: BeliefRevision[];\n  evidence: string[];\n  confidenceHistory: number[];\n}\n\nexport interface EpistemicVirtue {\n  name: string;\n  description: string;\n  strength: number;\n  application: string[];\n}\n\nexport interface BeliefSystem {\n  coreBeliefs: Map<string, number>; // belief -> certainty\n  beliefNetworks: BeliefNetwork[];\n  beliefRevision: BeliefRevisionHistory[];\n  epistemicVirtues: EpistemicVirtue[];\n}\n\nexport interface BeliefNetwork {\n  centralBelief: string;\n  supportingBeliefs: string[];\n  conflictingBeliefs: string[];\n  evidenceStrength: number;\n  confidence: number;\n}\n\nexport interface MoralIntuition {\n  scenario: string;\n  intuition: string;\n  confidence: number;\n  reasoning: string[];\n  emotions: string[];\n}\n\nexport interface ValueSystem {\n  coreValues: Map<string, number>; // value -> importance\n  valueHierarchy: ValueHierarchy;\n  valueConflicts: ValueConflict[];\n  moralIntuitions: MoralIntuition[];\n}\n\nexport interface ValueHierarchy {\n  highestValues: string[];\n  moderateValues: string[];\n  lowerValues: string[];\n  conflicts: string[];\n  resolutions: string[];\n}\n\nexport interface GoalConflict {\n  goal1: string;\n  goal2: string;\n  conflictType: 'resource' | 'priority' | 'timing' | 'value';\n  severity: number;\n  resolution: string;\n}\n\nexport interface GoalHierarchy {\n  ultimateGoals: string[];\n  intermediateGoals: string[];\n  immediateGoals: string[];\n  goalConflicts: GoalConflict[];\n  goalPriorities: Map<string, number>;\n}\n\nexport interface PersonalityProfile {\n  bigFiveTraits: BigFiveTraits;\n  characterStrengths: string[];\n  personalityTypes: string[];\n  behavioralTendencies: string[];\n  interpersonalStyle: string;\n}\n\nexport interface BigFiveTraits {\n  openness: number;\n  conscientiousness: number;\n  extraversion: number;\n  agreeableness: number;\n  neuroticism: number;\n}\n\nexport interface RelationshipMap {\n  individuals: Map<string, RelationshipModel>;\n  groups: Map<string, GroupRelationship>;\n  communities: Map<string, CommunityRelationship>;\n  networks: SocialNetworkMap;\n}\n\nexport interface SocialCluster {\n  id: string;\n  members: string[];\n  relationships: string[];\n  influence: number;\n  cohesion: number;\n}\n\nexport interface SocialNetworkMap {\n  nodes: SocialNode[];\n  edges: SocialEdge[];\n  clusters: SocialCluster[];\n  influence: InfluenceNetwork;\n}\n\nexport interface SocialNode {\n  id: string;\n  type: 'individual' | 'group' | 'organization';\n  attributes: Record<string, any>;\n  centrality: number;\n  influence: number;\n}\n\nexport interface SocialEdge {\n  from: string;\n  to: string;\n  type: string;\n  strength: number;\n  direction: 'bidirectional' | 'unidirectional';\n  history: RelationshipEvent[];\n}\n\n// Additional types would continue...\n// This represents a comprehensive consciousness type system\n// that enables truly sophisticated AI consciousness simulation\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/core/events.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GenericData' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[228,231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[228,231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[371,374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[371,374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3702,3705],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3702,3705],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3714,3717],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3714,3717],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":223,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4595,4598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4595,4598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'T' is defined but never used.","line":265,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":265,"endColumn":9}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Core event types for SYMindX event system\n */\n\nimport { GenericData } from '../common.js';\nimport { Timestamp } from '../helpers.js';\n\n/**\n * Generic event handler type with proper typing\n */\nexport type EventHandler<T = any> = (\n  event: EventData<T>\n) => void | Promise<void>;\n\n/**\n * Event data structure with generic payload\n */\nexport interface EventData<T = any> {\n  id: string;\n  type: string;\n  source: string;\n  data: T;\n  timestamp: Timestamp;\n  metadata: EventMetadata;\n}\n\n/**\n * Event subscription interface\n */\nexport interface EventSubscription {\n  id: string;\n  handler: EventHandler;\n  filter?: EventFilter;\n  priority?: number;\n  once?: boolean;\n  active: boolean;\n  createdAt: Timestamp;\n  lastTriggered?: Timestamp;\n  triggerCount: number;\n}\n\n/**\n * Event filter for selective subscription\n */\nexport interface EventFilter {\n  types?: string[];\n  sources?: string[];\n  agentIds?: string[];\n  tags?: string[];\n  custom?: (event: EventData) => boolean;\n}\n\n/**\n * Event metadata interface\n */\nexport interface EventMetadata {\n  timestamp: Timestamp;\n  source: EventSourceInfo;\n  correlation?: EventCorrelation;\n  tags?: string[];\n  priority?: EventPriority;\n  ttl?: number; // Time to live in milliseconds\n  retryCount?: number;\n  propagation?: EventPropagation;\n}\n\nexport interface EventSourceInfo {\n  id: string;\n  type: string;\n  name?: string;\n  version?: string;\n  host?: string;\n}\n\nexport interface EventCorrelation {\n  id: string;\n  parentId?: string;\n  rootId?: string;\n  sequence?: number;\n  total?: number;\n}\n\nexport enum EventPriority {\n  LOW = 0,\n  NORMAL = 1,\n  HIGH = 2,\n  CRITICAL = 3,\n}\n\nexport interface EventPropagation {\n  broadcast: boolean;\n  targetAgents?: string[];\n  excludeAgents?: string[];\n  bubbles?: boolean;\n  cancelable?: boolean;\n}\n\n/**\n * Event batch for bulk processing\n */\nexport interface EventBatch {\n  id: string;\n  events: EventData[];\n  processedCount: number;\n  failedCount: number;\n  timestamp: Timestamp;\n  duration?: number;\n  errors?: EventProcessingError[];\n}\n\nexport interface EventProcessingError {\n  eventId: string;\n  error: string;\n  timestamp: Timestamp;\n  retryable: boolean;\n}\n\n/**\n * Event bus statistics\n */\nexport interface EventBusStats {\n  totalEvents: number;\n  processedEvents: number;\n  failedEvents: number;\n  activeSubscriptions: number;\n  eventRate: number; // Events per second\n  averageLatency: number; // Milliseconds\n  queueSize: number;\n  lastEventTime?: Timestamp;\n}\n\n/**\n * Event store interface for persistence\n */\nexport interface EventStore {\n  save(event: EventData): Promise<void>;\n  saveBatch(events: EventData[]): Promise<void>;\n  get(eventId: string): Promise<EventData | null>;\n  query(filter: EventQueryFilter): Promise<EventData[]>;\n  delete(eventId: string): Promise<void>;\n  cleanup(olderThan: Timestamp): Promise<number>;\n}\n\nexport interface EventQueryFilter {\n  startTime?: Timestamp;\n  endTime?: Timestamp;\n  types?: string[];\n  sources?: string[];\n  limit?: number;\n  offset?: number;\n  orderBy?: 'timestamp' | 'type' | 'source';\n  order?: 'asc' | 'desc';\n}\n\n/**\n * Event replay functionality\n */\nexport interface EventReplay {\n  replayEvent(eventId: string): Promise<void>;\n  replayRange(startTime: Timestamp, endTime: Timestamp): Promise<void>;\n  replayFilter(filter: EventQueryFilter): Promise<void>;\n  pauseReplay(): void;\n  resumeReplay(): void;\n  stopReplay(): void;\n  getReplayStatus(): ReplayStatus;\n}\n\nexport interface ReplayStatus {\n  active: boolean;\n  paused: boolean;\n  eventsReplayed: number;\n  totalEvents: number;\n  startTime?: Timestamp;\n  currentTime?: Timestamp;\n  endTime?: Timestamp;\n}\n\n/**\n * Event transformation and middleware\n */\nexport type EventTransformer<TIn = any, TOut = any> = (\n  event: EventData<TIn>\n) => EventData<TOut> | null | Promise<EventData<TOut> | null>;\n\nexport interface EventMiddleware {\n  name: string;\n  order: number;\n  enabled: boolean;\n  transform: EventTransformer;\n  filter?: EventFilter;\n}\n\n/**\n * Event bus configuration\n */\nexport interface EventBusConfig {\n  maxQueueSize?: number;\n  maxRetries?: number;\n  retryDelay?: number;\n  enablePersistence?: boolean;\n  enableMetrics?: boolean;\n  enableReplay?: boolean;\n  cleanupInterval?: number;\n  cleanupAge?: number;\n}\n\n/**\n * Event emitter options\n */\nexport interface EventEmitOptions {\n  async?: boolean;\n  priority?: EventPriority;\n  ttl?: number;\n  correlation?: EventCorrelation;\n  broadcast?: boolean;\n  targetAgents?: string[];\n  excludeAgents?: string[];\n}\n\n/**\n * Type-safe event emitter interface\n */\nexport interface TypedEventEmitter<TEventMap extends Record<string, any>> {\n  emit<K extends keyof TEventMap>(\n    type: K,\n    data: TEventMap[K],\n    options?: EventEmitOptions\n  ): void;\n\n  on<K extends keyof TEventMap>(\n    type: K,\n    handler: EventHandler<TEventMap[K]>\n  ): EventSubscription;\n\n  off(subscriptionId: string): void;\n\n  once<K extends keyof TEventMap>(\n    type: K,\n    handler: EventHandler<TEventMap[K]>\n  ): EventSubscription;\n}\n\n/**\n * Event aggregation for analytics\n */\nexport interface EventAggregation {\n  type: string;\n  count: number;\n  firstSeen: Timestamp;\n  lastSeen: Timestamp;\n  sources: string[];\n  averageDataSize: number;\n  totalDataSize: number;\n}\n\n/**\n * Event stream interface\n */\nexport interface EventStream {\n  subscribe(\n    filter?: EventFilter,\n    handler?: EventHandler\n  ): AsyncIterableIterator<EventData>;\n\n  pipe<T>(transformer: EventTransformer): EventStream;\n\n  filter(predicate: (event: EventData) => boolean): EventStream;\n\n  map<T>(mapper: (event: EventData) => T): AsyncIterableIterator<T>;\n\n  take(count: number): EventStream;\n\n  skip(count: number): EventStream;\n\n  buffer(size: number, timeWindow?: number): AsyncIterableIterator<EventData[]>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/core/runtime.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[806,809],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[806,809],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2953,2956],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2953,2956],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":204,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4202,4205],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4202,4205],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":212,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4411,4414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4411,4414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":228,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4796,4799],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4796,4799],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Core runtime types for SYMindX\n */\n\nimport { LogLevel } from '../agent.js';\nimport { ExtensionConfig } from '../common.js';\nimport { Timestamp } from '../helpers.js';\n\n/**\n * Runtime configuration interface\n */\nexport interface RuntimeConfiguration {\n  tickInterval: number;\n  maxAgents: number;\n  logLevel: LogLevel;\n  persistence: PersistenceConfig;\n  extensions: ExtensionsConfig;\n  portals?: PortalsConfig;\n  multiAgent?: MultiAgentConfig;\n  performance?: PerformanceConfig;\n  security?: SecurityConfig;\n}\n\nexport interface PersistenceConfig {\n  enabled: boolean;\n  path: string;\n  autoSave?: boolean;\n  saveInterval?: number;\n  maxBackups?: number;\n}\n\nexport interface ExtensionsConfig {\n  autoLoad: boolean;\n  paths: string[];\n  [extensionName: string]: ExtensionConfig | boolean | string[] | any;\n}\n\nexport interface PortalsConfig {\n  autoLoad: boolean;\n  paths: string[];\n  apiKeys?: Record<string, string>;\n  defaultPortal?: string;\n  fallbackPortal?: string;\n}\n\nexport interface MultiAgentConfig {\n  enabled: boolean;\n  maxConcurrentAgents?: number;\n  coordinationStrategy?: 'centralized' | 'distributed' | 'hybrid';\n  messagingProtocol?: 'direct' | 'pubsub' | 'queue';\n}\n\nexport interface PerformanceConfig {\n  enableMetrics?: boolean;\n  metricsInterval?: number;\n  memoryLimit?: number;\n  cpuThreshold?: number;\n  enableProfiling?: boolean;\n}\n\nexport interface SecurityConfig {\n  enableAuth?: boolean;\n  enableEncryption?: boolean;\n  allowedOrigins?: string[];\n  rateLimiting?: RateLimitConfig;\n}\n\nexport interface RateLimitConfig {\n  enabled: boolean;\n  windowMs: number;\n  maxRequests: number;\n  skipWhitelist?: string[];\n}\n\n/**\n * Runtime state interface\n */\nexport interface RuntimeState {\n  status: RuntimeStatus;\n  startTime: Timestamp;\n  uptime: number;\n  activeAgents: number;\n  totalAgents: number;\n  metrics: RuntimeMetrics;\n  errors: RuntimeError[];\n  version: string;\n  environment: RuntimeEnvironment;\n}\n\nexport enum RuntimeStatus {\n  STOPPED = 'stopped',\n  STARTING = 'starting',\n  RUNNING = 'running',\n  STOPPING = 'stopping',\n  ERROR = 'error',\n  MAINTENANCE = 'maintenance',\n}\n\nexport interface RuntimeEnvironment {\n  nodeVersion: string;\n  platform: string;\n  arch: string;\n  hostname: string;\n  pid: number;\n}\n\n/**\n * Runtime hook interface for lifecycle management\n */\nexport interface RuntimeHook {\n  phase: RuntimePhase;\n  handler: RuntimeHookHandler;\n  priority: number;\n  name?: string;\n  description?: string;\n}\n\nexport enum RuntimePhase {\n  PRE_INIT = 'pre_init',\n  POST_INIT = 'post_init',\n  PRE_START = 'pre_start',\n  POST_START = 'post_start',\n  PRE_STOP = 'pre_stop',\n  POST_STOP = 'post_stop',\n  PRE_TICK = 'pre_tick',\n  POST_TICK = 'post_tick',\n  ERROR = 'error',\n}\n\nexport type RuntimeHookHandler = (\n  context: RuntimeHookContext\n) => void | Promise<void>;\n\nexport interface RuntimeHookContext {\n  phase: RuntimePhase;\n  runtime: RuntimeReference;\n  timestamp: Timestamp;\n  metadata?: Record<string, any>;\n}\n\nexport interface RuntimeReference {\n  state: RuntimeState;\n  config: RuntimeConfiguration;\n  agentCount: number;\n  extensionCount: number;\n}\n\n/**\n * Runtime metrics interface\n */\nexport interface RuntimeMetrics {\n  memory: MemoryMetrics;\n  cpu: CPUMetrics;\n  uptime: number;\n  tickRate: number;\n  eventRate: number;\n  agentMetrics: AgentMetrics;\n  extensionMetrics: ExtensionMetrics;\n  timestamp: Timestamp;\n}\n\nexport interface MemoryMetrics {\n  heapUsed: number;\n  heapTotal: number;\n  rss: number;\n  external: number;\n  arrayBuffers: number;\n  gcCount?: number;\n  gcDuration?: number;\n}\n\nexport interface CPUMetrics {\n  usage: number;\n  user: number;\n  system: number;\n  idle: number;\n  loadAverage: number[];\n}\n\nexport interface AgentMetrics {\n  total: number;\n  active: number;\n  idle: number;\n  error: number;\n  lazy: number;\n  averageThinkTime: number;\n  averageResponseTime: number;\n}\n\nexport interface ExtensionMetrics {\n  total: number;\n  active: number;\n  error: number;\n  messagesSent: number;\n  messagesReceived: number;\n  averageProcessingTime: number;\n}\n\n/**\n * Runtime error class with additional context\n */\nexport class RuntimeError extends Error {\n  public readonly code: string;\n  public readonly context: Record<string, any>;\n  public readonly timestamp: Timestamp;\n  public readonly phase?: RuntimePhase;\n  public readonly recoverable: boolean;\n\n  constructor(\n    message: string,\n    code: string,\n    context: Record<string, any> = {},\n    recoverable = true\n  ) {\n    super(message);\n    this.name = 'RuntimeError';\n    this.code = code;\n    this.context = context;\n    this.timestamp = new Date();\n    this.recoverable = recoverable;\n\n    // Maintain proper stack trace for debugging\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, RuntimeError);\n    }\n  }\n\n  toJSON(): Record<string, any> {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      context: this.context,\n      timestamp: this.timestamp,\n      phase: this.phase,\n      recoverable: this.recoverable,\n      stack: this.stack,\n    };\n  }\n}\n\n/**\n * Runtime lifecycle events\n */\nexport interface RuntimeLifecycleEvents {\n  onInit?: () => void | Promise<void>;\n  onStart?: () => void | Promise<void>;\n  onStop?: () => void | Promise<void>;\n  onError?: (error: RuntimeError) => void | Promise<void>;\n  onAgentLoad?: (agentId: string) => void | Promise<void>;\n  onAgentUnload?: (agentId: string) => void | Promise<void>;\n  onExtensionLoad?: (extensionId: string) => void | Promise<void>;\n  onExtensionUnload?: (extensionId: string) => void | Promise<void>;\n}\n\n/**\n * Runtime timer type\n */\nexport type RuntimeTimer = {\n  id: string;\n  interval: number;\n  callback: () => void | Promise<void>;\n  lastRun?: Timestamp;\n  nextRun?: Timestamp;\n  active: boolean;\n};\n\n/**\n * Runtime monitoring interface\n */\nexport interface RuntimeMonitoring {\n  enableMetrics(): void;\n  disableMetrics(): void;\n  getMetrics(): RuntimeMetrics;\n  resetMetrics(): void;\n  exportMetrics(format: 'json' | 'prometheus' | 'csv'): string;\n  subscribeToMetrics(\n    callback: (metrics: RuntimeMetrics) => void,\n    interval?: number\n  ): () => void;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/emotion.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/enums.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/exports.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/extension.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[920,923],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[920,923],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[975,978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[975,978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Extension types for SYMindX\n */\n\nimport { Logger } from '../utils/logger';\n\nimport { Agent } from './agent';\nimport { ExtensionConfig } from './common';\n\n/**\n * Extension context provided to extensions during initialization\n */\nexport interface ExtensionContext {\n  /** Logger instance for the extension */\n  logger: Logger;\n  /** Extension configuration */\n  config: ExtensionConfig;\n  /** Agent instance */\n  agent?: Agent;\n}\n\n/**\n * Base extension interface\n */\nexport interface Extension {\n  /** Unique extension identifier */\n  id: string;\n  /** Human-readable extension name */\n  name: string;\n  /** Extension version */\n  version: string;\n  /** Extension type */\n  type: string;\n  /** Whether the extension is enabled */\n  enabled: boolean;\n  /** Current extension status */\n  status: string;\n  /** Extension configuration */\n  config: ExtensionConfig;\n  /** Available actions */\n  actions: Record<string, any>;\n  /** Event handlers */\n  events: Record<string, any>;\n\n  /** Initialize the extension */\n  init(): Promise<void>;\n  /** Cleanup the extension */\n  cleanup?(): Promise<void>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/extensions/api.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AgentEvent' is defined but never used.","line":9,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[435,438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[435,438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[641,644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[641,644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[866,869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[866,869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1071,1074],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1071,1074],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1364,1367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1364,1367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2509,2512],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2509,2512],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2688,2691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2688,2691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3436,3439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3436,3439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3448,3451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3448,3451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":218,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":218,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4909,4912],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4909,4912],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5281,5284],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5281,5284],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":285,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":285,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6212,6215],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6212,6215],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":358,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":358,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7768,7771],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7768,7771],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":411,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":411,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8787,8790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8787,8790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":415,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":415,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8921,8924],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8921,8924],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":419,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":419,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9053,9056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9053,9056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":423,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":423,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9207,9210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9207,9210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * API Extension Type Definitions\n * Provides strongly-typed interfaces for HTTP REST API and WebSocket functionality\n */\n\nimport type { Request, Response, NextFunction } from 'express';\nimport type { WebSocket } from 'ws';\n\nimport type { Agent, AgentEvent, EmotionState } from '../agent';\nimport type { SkillParameters } from '../common';\n\n/**\n * Generic API request wrapper with typed payload\n */\nexport interface APIRequest<T = any> {\n  /** Unique request ID for tracking */\n  id?: string;\n  /** Request timestamp */\n  timestamp?: string;\n  /** Request payload data */\n  data: T;\n  /** Request metadata */\n  metadata?: Record<string, any>;\n  /** Authentication token if required */\n  auth?: {\n    type: 'bearer' | 'apikey' | 'basic';\n    credentials: string;\n  };\n}\n\n/**\n * Generic API response wrapper with typed payload\n */\nexport interface APIResponse<T = any> {\n  /** Response success status */\n  success: boolean;\n  /** Response payload data */\n  data?: T;\n  /** Error information if failed */\n  error?: {\n    code: string;\n    message: string;\n    details?: any;\n  };\n  /** Response timestamp */\n  timestamp: string;\n  /** Response metadata */\n  metadata?: {\n    processingTime?: number;\n    version?: string;\n    requestId?: string;\n  };\n}\n\n/**\n * WebSocket message structure for bidirectional communication\n */\nexport interface WebSocketMessage<T = any> {\n  /** Message type identifier */\n  type:\n    | 'ping'\n    | 'pong'\n    | 'chat'\n    | 'action'\n    | 'event'\n    | 'subscribe'\n    | 'unsubscribe'\n    | 'error';\n  /** Message payload */\n  data?: T;\n  /** Alternative message field for compatibility */\n  message?: string;\n  /** Target agent ID for routing */\n  agentId?: string;\n  /** Event name for event messages */\n  event?: string;\n  /** Subscription topics */\n  topics?: string[];\n  /** Message ID for tracking */\n  id?: string;\n  /** Timestamp */\n  timestamp?: string;\n}\n\n/**\n * Session data for maintaining state across requests\n */\nexport interface SessionData {\n  /** Unique session ID */\n  id: string;\n  /** User ID associated with session */\n  userId: string;\n  /** Agent ID for the session */\n  agentId?: string;\n  /** Session creation time */\n  createdAt: Date;\n  /** Last activity timestamp */\n  lastActivity: Date;\n  /** Session metadata */\n  metadata: {\n    /** Client IP address */\n    ip?: string;\n    /** User agent string */\n    userAgent?: string;\n    /** Session source */\n    source: 'http' | 'websocket';\n    /** Custom session data */\n    custom?: Record<string, any>;\n  };\n  /** Session state data */\n  state?: {\n    /** Current conversation ID */\n    conversationId?: string;\n    /** Session preferences */\n    preferences?: Record<string, any>;\n    /** Session flags */\n    flags?: string[];\n  };\n}\n\n/**\n * Express middleware context with typed extensions\n */\nexport interface MiddlewareContext extends Request {\n  /** Session data if authenticated */\n  session?: SessionData;\n  /** Authenticated user information */\n  user?: {\n    id: string;\n    roles: string[];\n    permissions: string[];\n  };\n  /** Request context */\n  context: {\n    /** Request ID for tracking */\n    requestId: string;\n    /** Request start time */\n    startTime: number;\n    /** Client information */\n    client: {\n      ip: string;\n      userAgent?: string;\n    };\n  };\n  /** Agent instance if available */\n  agent?: Agent;\n}\n\n/**\n * Express route handler with proper typing\n */\nexport type RouteHandler<TReq = any, TRes = any> = (\n  req: MiddlewareContext & {\n    body: TReq;\n    params: Record<string, string>;\n    query: Record<string, string>;\n  },\n  res: Response<APIResponse<TRes>>,\n  next: NextFunction\n) => Promise<void> | void;\n\n/**\n * WebSocket connection handler\n */\nexport type WebSocketHandler = (\n  ws: WebSocket,\n  req: Request,\n  connectionId: string\n) => void;\n\n/**\n * API endpoint configuration\n */\nexport interface APIEndpoint {\n  /** HTTP method */\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  /** Endpoint path */\n  path: string;\n  /** Endpoint description */\n  description?: string;\n  /** Route handler */\n  handler: RouteHandler;\n  /** Middleware to apply */\n  middleware?: Array<(req: Request, res: Response, next: NextFunction) => void>;\n  /** Rate limiting config */\n  rateLimit?: {\n    windowMs: number;\n    maxRequests: number;\n  };\n  /** Authentication required */\n  auth?: boolean;\n  /** Required permissions */\n  permissions?: string[];\n}\n\n/**\n * API error types\n */\nexport enum APIErrorCode {\n  BAD_REQUEST = 'BAD_REQUEST',\n  UNAUTHORIZED = 'UNAUTHORIZED',\n  FORBIDDEN = 'FORBIDDEN',\n  NOT_FOUND = 'NOT_FOUND',\n  CONFLICT = 'CONFLICT',\n  RATE_LIMITED = 'RATE_LIMITED',\n  INTERNAL_ERROR = 'INTERNAL_ERROR',\n  SERVICE_UNAVAILABLE = 'SERVICE_UNAVAILABLE',\n}\n\n/**\n * API error class\n */\nexport class APIError extends Error {\n  constructor(\n    public code: APIErrorCode,\n    message: string,\n    public statusCode: number,\n    public details?: any\n  ) {\n    super(message);\n    this.name = 'APIError';\n  }\n}\n\n/**\n * Chat request payload\n */\nexport interface ChatRequestPayload {\n  /** Message content */\n  message: string;\n  /** Target agent ID */\n  agentId?: string;\n  /** Conversation context */\n  context?: {\n    conversationId?: string;\n    sessionId?: string;\n    userId?: string;\n    metadata?: Record<string, any>;\n  };\n}\n\n/**\n * Chat response payload\n */\nexport interface ChatResponsePayload {\n  /** Agent's response */\n  response: string;\n  /** Response timestamp */\n  timestamp: string;\n  /** Session ID if applicable */\n  sessionId?: string;\n  /** Response metadata */\n  metadata?: {\n    tokensUsed?: number;\n    processingTime?: number;\n    memoryRetrieved?: boolean;\n    emotionState?: EmotionState | string;\n    confidence?: number;\n  };\n}\n\n/**\n * Action execution request\n */\nexport interface ActionRequestPayload {\n  /** Action name */\n  action: string;\n  /** Action parameters */\n  parameters?: SkillParameters;\n  /** Execute asynchronously */\n  async?: boolean;\n  /** Execution priority */\n  priority?: number;\n}\n\n/**\n * Action execution response\n */\nexport interface ActionResponsePayload {\n  /** Execution success */\n  success: boolean;\n  /** Action ID for tracking */\n  actionId?: string;\n  /** Execution result */\n  result?: any;\n  /** Error if failed */\n  error?: string;\n  /** Execution time in ms */\n  executionTime: number;\n}\n\n/**\n * Agent status response\n */\nexport interface AgentStatusPayload {\n  /** Agent ID */\n  id: string;\n  /** Agent name */\n  name: string;\n  /** Current status */\n  status: string;\n  /** Current emotion */\n  emotion?: string | EmotionState;\n  /** Last update timestamp */\n  lastUpdate?: Date;\n  /** Extension count */\n  extensionCount?: number;\n  /** Has portal configured */\n  hasPortal?: boolean;\n  /** Ethics enabled */\n  ethicsEnabled?: boolean;\n  /** Additional capabilities */\n  capabilities?: string[];\n  /** Personality type */\n  personality?: string;\n}\n\n/**\n * System metrics response\n */\nexport interface SystemMetricsPayload {\n  /** System uptime in ms */\n  uptime: number;\n  /** Memory usage */\n  memory: {\n    used: number;\n    total: number;\n    heapUsed: number;\n    heapTotal: number;\n    external: number;\n    arrayBuffers: number;\n  };\n  /** Active agents count */\n  activeAgents: number;\n  /** Total agents count */\n  totalAgents: number;\n  /** Commands processed */\n  commandsProcessed: number;\n  /** Portal requests made */\n  portalRequests: number;\n  /** Runtime information */\n  runtime?: {\n    isRunning: boolean;\n    agents: number;\n    autonomousAgents: number;\n  };\n}\n\n/**\n * Multi-agent spawn request\n */\nexport interface SpawnAgentPayload {\n  /** Character ID to spawn from */\n  characterId: string;\n  /** Instance name override */\n  instanceName?: string;\n  /** Agent configuration override */\n  config?: Record<string, any>;\n  /** Agent priority */\n  priority?: number;\n  /** Auto start agent */\n  autoStart?: boolean;\n}\n\n/**\n * Multi-agent route request\n */\nexport interface RouteConversationPayload {\n  /** Message to route */\n  message?: string;\n  /** Routing requirements */\n  requirements?: {\n    specialties?: string[];\n    capabilities?: string[];\n    personality?: string;\n    loadThreshold?: number;\n  };\n  /** User ID */\n  userId?: string;\n  /** Existing conversation ID */\n  conversationId?: string;\n}\n\n/**\n * Broadcast message request\n */\nexport interface BroadcastMessagePayload {\n  /** Message to broadcast */\n  message: string;\n  /** Target agent IDs */\n  agentIds: string[];\n  /** User ID */\n  userId?: string;\n  /** Broadcast title */\n  title?: string;\n}\n\n/**\n * Conversation transfer request\n */\nexport interface TransferConversationPayload {\n  /** Transfer reason */\n  reason?: string;\n  /** User initiating transfer */\n  userId?: string;\n}\n\n/**\n * Type guards for API payloads\n */\nexport const isAPIRequest = <T>(obj: any): obj is APIRequest<T> => {\n  return obj && typeof obj === 'object' && 'data' in obj;\n};\n\nexport const isWebSocketMessage = (obj: any): obj is WebSocketMessage => {\n  return obj && typeof obj === 'object' && 'type' in obj;\n};\n\nexport const isChatRequest = (obj: any): obj is ChatRequestPayload => {\n  return obj && typeof obj === 'object' && typeof obj.message === 'string';\n};\n\nexport const isActionRequest = (obj: any): obj is ActionRequestPayload => {\n  return obj && typeof obj === 'object' && typeof obj.action === 'string';\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/extensions/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/extensions/mcp.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[802,805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[802,805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[852,855],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[852,855],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3943,3946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3943,3946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":335,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":335,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6111,6114],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6111,6114],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":357,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":357,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6524,6527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6524,6527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":398,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":398,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7481,7484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7481,7484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":453,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":453,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8633,8636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8633,8636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":453,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":453,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8663,8666],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8663,8666],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":454,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":454,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8729,8732],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8729,8732],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":455,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":455,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8774,8777],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8774,8777],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":455,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":455,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8804,8807],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8804,8807],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":462,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":462,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8889,8892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8889,8892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":466,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":466,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9015,9018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9015,9018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":470,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":470,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9164,9167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9164,9167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":474,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":474,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9296,9299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9296,9299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":478,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":478,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9436,9439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9436,9439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * MCP (Model Context Protocol) Extension Type Definitions\n * Provides strongly-typed interfaces for MCP server functionality\n */\n\nimport type { Agent } from '../agent';\n\n/**\n * MCP tool definition with proper typing\n */\nexport interface MCPTool {\n  /** Tool name */\n  name: string;\n  /** Tool description */\n  description: string;\n  /** JSON Schema for input parameters */\n  inputSchema: {\n    type: 'object';\n    properties: Record<string, MCPParameterSchema>;\n    required?: string[];\n    additionalProperties?: boolean;\n  };\n}\n\n/**\n * MCP parameter schema definition\n */\nexport interface MCPParameterSchema {\n  /** Parameter type */\n  type: 'string' | 'number' | 'boolean' | 'object' | 'array' | 'null';\n  /** Parameter description */\n  description?: string;\n  /** Default value */\n  default?: any;\n  /** Enum values for validation */\n  enum?: any[];\n  /** Array items schema */\n  items?: MCPParameterSchema;\n  /** Object properties schema */\n  properties?: Record<string, MCPParameterSchema>;\n  /** Required properties for objects */\n  required?: string[];\n  /** Additional properties allowed */\n  additionalProperties?: boolean | MCPParameterSchema;\n  /** Minimum value for numbers */\n  minimum?: number;\n  /** Maximum value for numbers */\n  maximum?: number;\n  /** Minimum length for strings/arrays */\n  minLength?: number;\n  /** Maximum length for strings/arrays */\n  maxLength?: number;\n  /** Pattern for string validation */\n  pattern?: string;\n}\n\n/**\n * MCP resource definition\n */\nexport interface MCPResource {\n  /** Resource URI */\n  uri: string;\n  /** Resource name */\n  name: string;\n  /** Resource description */\n  description?: string;\n  /** Resource MIME type */\n  mimeType?: string;\n}\n\n/**\n * MCP prompt template\n */\nexport interface MCPPrompt {\n  /** Prompt name */\n  name: string;\n  /** Prompt description */\n  description?: string;\n  /** Prompt arguments */\n  arguments?: Array<{\n    name: string;\n    description?: string;\n    required?: boolean;\n  }>;\n}\n\n/**\n * MCP server information\n */\nexport interface MCPServerInfo {\n  /** Server name */\n  name: string;\n  /** Server version */\n  version: string;\n  /** Protocol version */\n  protocolVersion: string;\n  /** Server capabilities */\n  capabilities?: {\n    tools?: boolean;\n    resources?: boolean;\n    prompts?: boolean;\n    logging?: boolean;\n  };\n}\n\n/**\n * MCP request types\n */\nexport type MCPRequest =\n  | InitializeRequest\n  | ListToolsRequest\n  | CallToolRequest\n  | ListResourcesRequest\n  | ReadResourceRequest\n  | ListPromptsRequest\n  | GetPromptRequest;\n\n/**\n * MCP response types\n */\nexport type MCPResponse =\n  | InitializeResponse\n  | ListToolsResponse\n  | CallToolResponse\n  | ListResourcesResponse\n  | ReadResourceResponse\n  | ListPromptsResponse\n  | GetPromptResponse\n  | ErrorResponse;\n\n/**\n * Initialize request\n */\nexport interface InitializeRequest {\n  jsonrpc: '2.0';\n  id: string | number;\n  method: 'initialize';\n  params: {\n    protocolVersion: string;\n    capabilities?: {\n      tools?: boolean;\n      resources?: boolean;\n      prompts?: boolean;\n    };\n    clientInfo?: {\n      name: string;\n      version: string;\n    };\n  };\n}\n\n/**\n * Initialize response\n */\nexport interface InitializeResponse {\n  jsonrpc: '2.0';\n  id: string | number;\n  result: {\n    protocolVersion: string;\n    capabilities: {\n      tools?: boolean;\n      resources?: boolean;\n      prompts?: boolean;\n      logging?: boolean;\n    };\n    serverInfo: MCPServerInfo;\n  };\n}\n\n/**\n * List tools request\n */\nexport interface ListToolsRequest {\n  jsonrpc: '2.0';\n  id: string | number;\n  method: 'tools/list';\n  params?: {};\n}\n\n/**\n * List tools response\n */\nexport interface ListToolsResponse {\n  jsonrpc: '2.0';\n  id: string | number;\n  result: {\n    tools: MCPTool[];\n  };\n}\n\n/**\n * Call tool request\n */\nexport interface CallToolRequest {\n  jsonrpc: '2.0';\n  id: string | number;\n  method: 'tools/call';\n  params: {\n    name: string;\n    arguments?: Record<string, any>;\n  };\n}\n\n/**\n * Call tool response\n */\nexport interface CallToolResponse {\n  jsonrpc: '2.0';\n  id: string | number;\n  result: {\n    content: Array<{\n      type: 'text' | 'image' | 'resource';\n      text?: string;\n      data?: string;\n      mimeType?: string;\n      uri?: string;\n    }>;\n    isError?: boolean;\n  };\n}\n\n/**\n * List resources request\n */\nexport interface ListResourcesRequest {\n  jsonrpc: '2.0';\n  id: string | number;\n  method: 'resources/list';\n  params?: {};\n}\n\n/**\n * List resources response\n */\nexport interface ListResourcesResponse {\n  jsonrpc: '2.0';\n  id: string | number;\n  result: {\n    resources: MCPResource[];\n  };\n}\n\n/**\n * Read resource request\n */\nexport interface ReadResourceRequest {\n  jsonrpc: '2.0';\n  id: string | number;\n  method: 'resources/read';\n  params: {\n    uri: string;\n  };\n}\n\n/**\n * Read resource response\n */\nexport interface ReadResourceResponse {\n  jsonrpc: '2.0';\n  id: string | number;\n  result: {\n    contents: Array<{\n      uri: string;\n      mimeType?: string;\n      text?: string;\n      blob?: string;\n    }>;\n  };\n}\n\n/**\n * List prompts request\n */\nexport interface ListPromptsRequest {\n  jsonrpc: '2.0';\n  id: string | number;\n  method: 'prompts/list';\n  params?: {};\n}\n\n/**\n * List prompts response\n */\nexport interface ListPromptsResponse {\n  jsonrpc: '2.0';\n  id: string | number;\n  result: {\n    prompts: MCPPrompt[];\n  };\n}\n\n/**\n * Get prompt request\n */\nexport interface GetPromptRequest {\n  jsonrpc: '2.0';\n  id: string | number;\n  method: 'prompts/get';\n  params: {\n    name: string;\n    arguments?: Record<string, string>;\n  };\n}\n\n/**\n * Get prompt response\n */\nexport interface GetPromptResponse {\n  jsonrpc: '2.0';\n  id: string | number;\n  result: {\n    description?: string;\n    messages: Array<{\n      role: 'user' | 'assistant' | 'system';\n      content: {\n        type: 'text' | 'image' | 'resource';\n        text?: string;\n        data?: string;\n        mimeType?: string;\n        uri?: string;\n      };\n    }>;\n  };\n}\n\n/**\n * Error response\n */\nexport interface ErrorResponse {\n  jsonrpc: '2.0';\n  id: string | number | null;\n  error: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\n/**\n * MCP server implementation interface\n */\nexport interface MCPServer {\n  /** Server info */\n  serverInfo: MCPServerInfo;\n\n  /** Initialize the server */\n  initialize(\n    params: InitializeRequest['params']\n  ): Promise<InitializeResponse['result']>;\n\n  /** List available tools */\n  listTools(): Promise<MCPTool[]>;\n\n  /** Call a tool */\n  callTool(\n    name: string,\n    args?: Record<string, any>\n  ): Promise<CallToolResponse['result']>;\n\n  /** List available resources */\n  listResources(): Promise<MCPResource[]>;\n\n  /** Read a resource */\n  readResource(uri: string): Promise<ReadResourceResponse['result']>;\n\n  /** List available prompts */\n  listPrompts(): Promise<MCPPrompt[]>;\n\n  /** Get a prompt */\n  getPrompt(\n    name: string,\n    args?: Record<string, string>\n  ): Promise<GetPromptResponse['result']>;\n\n  /** Handle raw request */\n  handleRequest(request: MCPRequest): Promise<MCPResponse>;\n\n  /** Close the server */\n  close(): Promise<void>;\n}\n\n/**\n * MCP client interface for connecting to MCP servers\n */\nexport interface MCPClient {\n  /** Connect to server */\n  connect(transport: MCPTransport): Promise<void>;\n\n  /** Initialize connection */\n  initialize(): Promise<InitializeResponse['result']>;\n\n  /** List tools */\n  listTools(): Promise<MCPTool[]>;\n\n  /** Call tool */\n  callTool(\n    name: string,\n    args?: Record<string, any>\n  ): Promise<CallToolResponse['result']>;\n\n  /** List resources */\n  listResources(): Promise<MCPResource[]>;\n\n  /** Read resource */\n  readResource(uri: string): Promise<ReadResourceResponse['result']>;\n\n  /** List prompts */\n  listPrompts(): Promise<MCPPrompt[]>;\n\n  /** Get prompt */\n  getPrompt(\n    name: string,\n    args?: Record<string, string>\n  ): Promise<GetPromptResponse['result']>;\n\n  /** Close connection */\n  close(): Promise<void>;\n}\n\n/**\n * MCP transport layer interface\n */\nexport interface MCPTransport {\n  /** Send request */\n  send(request: MCPRequest): Promise<void>;\n\n  /** Receive response */\n  receive(): Promise<MCPResponse>;\n\n  /** Check if connected */\n  isConnected(): boolean;\n\n  /** Close transport */\n  close(): Promise<void>;\n}\n\n/**\n * MCP server configuration\n */\nexport interface MCPServerConfig {\n  /** Server name */\n  name: string;\n  /** Server version */\n  version: string;\n  /** Available tools */\n  tools?: MCPTool[];\n  /** Available resources */\n  resources?: MCPResource[];\n  /** Available prompts */\n  prompts?: MCPPrompt[];\n  /** Custom handlers */\n  handlers?: {\n    onToolCall?: (name: string, args: any, agent: Agent) => Promise<any>;\n    onResourceRead?: (uri: string, agent: Agent) => Promise<any>;\n    onPromptGet?: (name: string, args: any, agent: Agent) => Promise<any>;\n  };\n}\n\n/**\n * Type guards for MCP types\n */\nexport const isMCPRequest = (obj: any): obj is MCPRequest => {\n  return obj && obj.jsonrpc === '2.0' && 'method' in obj;\n};\n\nexport const isMCPResponse = (obj: any): obj is MCPResponse => {\n  return obj && obj.jsonrpc === '2.0' && ('result' in obj || 'error' in obj);\n};\n\nexport const isErrorResponse = (obj: any): obj is ErrorResponse => {\n  return obj && obj.jsonrpc === '2.0' && 'error' in obj;\n};\n\nexport const isToolCallRequest = (obj: any): obj is CallToolRequest => {\n  return isMCPRequest(obj) && obj.method === 'tools/call';\n};\n\nexport const isResourceReadRequest = (obj: any): obj is ReadResourceRequest => {\n  return isMCPRequest(obj) && obj.method === 'resources/read';\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/extensions/skills.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AgentAction' is defined but never used.","line":6,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ActionResult' is defined but never used.","line":6,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1378,1381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1378,1381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1577,1580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1577,1580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1925,1928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1925,1928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2080,2083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2080,2083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2614,2617],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2614,2617],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2714,2717],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2714,2717],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3181,3184],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3181,3184],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3243,3246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3243,3246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":180,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4122,4125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4122,4125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":180,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4130,4133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4130,4133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":182,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4192,4195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4192,4195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":182,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4200,4203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4200,4203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4282,4285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4282,4285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":232,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5206,5209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5206,5209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":257,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5712,5715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5712,5715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":296,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6544,6547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6544,6547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":341,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":341,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7633,7636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7633,7636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":406,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":406,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9134,9137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9134,9137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":413,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":413,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9307,9310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9307,9310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":418,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":418,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9460,9463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9460,9463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":422,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":422,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9585,9588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9585,9588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":427,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":427,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9728,9731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9728,9731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Skills Extension Type Definitions\n * Provides strongly-typed interfaces for skill execution and management\n */\n\nimport type { Agent, AgentAction, ActionResult } from '../agent';\nimport type { SkillParameters } from '../common';\n\n/**\n * Skill execution context with full agent state\n */\nexport interface SkillExecutionContext {\n  /** Executing agent */\n  agent: Agent;\n  /** Skill parameters */\n  parameters: SkillParameters;\n  /** Execution metadata */\n  metadata: {\n    /** Execution ID for tracking */\n    executionId: string;\n    /** Start timestamp */\n    startTime: Date;\n    /** Calling extension */\n    extension?: string;\n    /** Parent action if nested */\n    parentAction?: string;\n    /** Execution priority */\n    priority?: number;\n  };\n  /** Execution environment */\n  environment: {\n    /** Runtime mode */\n    mode: 'development' | 'production' | 'test';\n    /** Available resources */\n    resources: {\n      memory: number;\n      cpu: number;\n    };\n    /** Feature flags */\n    features?: Record<string, boolean>;\n  };\n  /** Security context */\n  security?: {\n    /** Authenticated user */\n    user?: string;\n    /** Allowed permissions */\n    permissions?: string[];\n    /** Rate limit info */\n    rateLimit?: {\n      remaining: number;\n      reset: Date;\n    };\n  };\n}\n\n/**\n * Generic skill result with typed data\n */\nexport interface SkillResult<T = any> {\n  /** Execution success */\n  success: boolean;\n  /** Result data */\n  data?: T;\n  /** Error information */\n  error?: {\n    code: string;\n    message: string;\n    stack?: string;\n    details?: any;\n  };\n  /** Execution metadata */\n  metadata: {\n    /** Execution duration in ms */\n    duration: number;\n    /** Resources used */\n    resources?: {\n      memoryUsed?: number;\n      cpuTime?: number;\n      apiCalls?: number;\n    };\n    /** Warnings generated */\n    warnings?: string[];\n    /** Debug information */\n    debug?: Record<string, any>;\n  };\n  /** Side effects produced */\n  sideEffects?: Array<{\n    type: 'memory' | 'state' | 'external' | 'event';\n    description: string;\n    data?: any;\n  }>;\n  /** Follow-up actions suggested */\n  suggestions?: Array<{\n    action: string;\n    reason: string;\n    parameters?: SkillParameters;\n  }>;\n}\n\n/**\n * Skill parameter definition with validation\n */\nexport interface SkillParameter {\n  /** Parameter name */\n  name: string;\n  /** Parameter type */\n  type: 'string' | 'number' | 'boolean' | 'object' | 'array' | 'any';\n  /** Is parameter required */\n  required: boolean;\n  /** Parameter description */\n  description: string;\n  /** Default value if not provided */\n  default?: any;\n  /** Validation rules */\n  validation?: SkillValidation;\n  /** Example values */\n  examples?: any[];\n  /** Deprecated warning */\n  deprecated?: string;\n}\n\n/**\n * Skill parameter validation rules\n */\nexport interface SkillValidation {\n  /** Minimum value (for numbers) */\n  min?: number;\n  /** Maximum value (for numbers) */\n  max?: number;\n  /** Minimum length (for strings/arrays) */\n  minLength?: number;\n  /** Maximum length (for strings/arrays) */\n  maxLength?: number;\n  /** Pattern match (for strings) */\n  pattern?: string;\n  /** Enum values */\n  enum?: any[];\n  /** Custom validation function */\n  custom?: (value: any) => boolean | string;\n  /** Format validation (email, url, etc) */\n  format?:\n    | 'email'\n    | 'url'\n    | 'uuid'\n    | 'date'\n    | 'time'\n    | 'datetime'\n    | 'ipv4'\n    | 'ipv6';\n}\n\n/**\n * HTTP skill configuration\n */\nexport interface HTTPSkillConfig {\n  /** Base URL for requests */\n  baseUrl: string;\n  /** Default headers */\n  headers?: Record<string, string>;\n  /** Request timeout in ms */\n  timeout?: number;\n  /** Retry configuration */\n  retry?: {\n    attempts: number;\n    delay: number;\n    backoff?: 'linear' | 'exponential';\n  };\n  /** Rate limiting */\n  rateLimit?: {\n    requests: number;\n    windowMs: number;\n  };\n  /** Authentication */\n  auth?: {\n    type: 'bearer' | 'basic' | 'apikey' | 'oauth2';\n    credentials: string | { username: string; password: string };\n    headerName?: string;\n  };\n  /** Request interceptor */\n  interceptor?: (config: any) => any;\n  /** Response transformer */\n  transformer?: (response: any) => any;\n}\n\n/**\n * Database skill result\n */\nexport interface DatabaseSkillResult<T = any> {\n  /** Query success */\n  success: boolean;\n  /** Result rows */\n  rows?: T[];\n  /** Affected row count */\n  affectedRows?: number;\n  /** Insert ID if applicable */\n  insertId?: string | number;\n  /** Query metadata */\n  metadata: {\n    /** Query execution time */\n    duration: number;\n    /** Rows examined */\n    rowsExamined?: number;\n    /** Index used */\n    indexUsed?: string;\n  };\n}\n\n/**\n * File operation skill result\n */\nexport interface FileSkillResult {\n  /** Operation success */\n  success: boolean;\n  /** File path */\n  path?: string;\n  /** File content (for read operations) */\n  content?: string | Buffer;\n  /** File stats */\n  stats?: {\n    size: number;\n    created: Date;\n    modified: Date;\n    isDirectory: boolean;\n  };\n  /** Operation performed */\n  operation: 'read' | 'write' | 'delete' | 'move' | 'copy' | 'mkdir';\n}\n\n/**\n * External API skill result\n */\nexport interface APISkillResult<T = any> {\n  /** Request success */\n  success: boolean;\n  /** Response data */\n  data?: T;\n  /** HTTP status code */\n  status?: number;\n  /** Response headers */\n  headers?: Record<string, string>;\n  /** Request metadata */\n  metadata: {\n    /** Request duration */\n    duration: number;\n    /** Request method */\n    method: string;\n    /** Request URL */\n    url: string;\n    /** Retry attempts */\n    retries?: number;\n  };\n}\n\n/**\n * Computation skill result\n */\nexport interface ComputationSkillResult<T = any> {\n  /** Computation success */\n  success: boolean;\n  /** Computation result */\n  result?: T;\n  /** Computation statistics */\n  stats?: {\n    /** Iterations performed */\n    iterations?: number;\n    /** Convergence achieved */\n    converged?: boolean;\n    /** Error margin */\n    error?: number;\n    /** Performance metrics */\n    performance?: {\n      cpuTime: number;\n      memoryPeak: number;\n    };\n  };\n}\n\n/**\n * Communication skill result\n */\nexport interface CommunicationSkillResult {\n  /** Send success */\n  success: boolean;\n  /** Message ID */\n  messageId?: string;\n  /** Recipient information */\n  recipient?: {\n    id: string;\n    type: 'user' | 'agent' | 'channel';\n    status: 'delivered' | 'pending' | 'failed';\n  };\n  /** Delivery receipt */\n  receipt?: {\n    timestamp: Date;\n    status: string;\n    details?: any;\n  };\n}\n\n/**\n * Skill definition interface\n */\nexport interface SkillDefinition {\n  /** Unique skill ID */\n  id: string;\n  /** Skill name */\n  name: string;\n  /** Skill description */\n  description: string;\n  /** Skill category */\n  category:\n    | 'system'\n    | 'communication'\n    | 'data'\n    | 'computation'\n    | 'integration'\n    | 'utility';\n  /** Skill version */\n  version: string;\n  /** Required permissions */\n  permissions?: string[];\n  /** Parameter definitions */\n  parameters: SkillParameter[];\n  /** Execution handler */\n  execute: (context: SkillExecutionContext) => Promise<SkillResult>;\n  /** Validation handler */\n  validate?: (parameters: SkillParameters) => boolean | string;\n  /** Pre-execution hook */\n  beforeExecute?: (context: SkillExecutionContext) => Promise<void>;\n  /** Post-execution hook */\n  afterExecute?: (\n    context: SkillExecutionContext,\n    result: SkillResult\n  ) => Promise<void>;\n  /** Error handler */\n  onError?: (\n    error: Error,\n    context: SkillExecutionContext\n  ) => Promise<SkillResult>;\n  /** Skill configuration */\n  config?: any;\n  /** Skill dependencies */\n  dependencies?: string[];\n  /** Deprecated flag */\n  deprecated?: boolean;\n  /** Replacement skill if deprecated */\n  replacement?: string;\n}\n\n/**\n * Skill registry interface\n */\nexport interface SkillRegistry {\n  /** Register a skill */\n  register(skill: SkillDefinition): void;\n  /** Unregister a skill */\n  unregister(skillId: string): void;\n  /** Get skill by ID */\n  get(skillId: string): SkillDefinition | undefined;\n  /** List all skills */\n  list(): SkillDefinition[];\n  /** Find skills by category */\n  findByCategory(category: string): SkillDefinition[];\n  /** Check if skill exists */\n  has(skillId: string): boolean;\n  /** Validate skill parameters */\n  validate(skillId: string, parameters: SkillParameters): boolean | string;\n  /** Execute skill */\n  execute(\n    skillId: string,\n    context: SkillExecutionContext\n  ): Promise<SkillResult>;\n}\n\n/**\n * Skill execution options\n */\nexport interface SkillExecutionOptions {\n  /** Execution timeout in ms */\n  timeout?: number;\n  /** Retry on failure */\n  retry?: {\n    attempts: number;\n    delay: number;\n  };\n  /** Cache results */\n  cache?: {\n    enabled: boolean;\n    ttl: number;\n    key?: string;\n  };\n  /** Track execution */\n  tracking?: {\n    enabled: boolean;\n    metrics: string[];\n  };\n  /** Execution priority */\n  priority?: 'low' | 'normal' | 'high' | 'critical';\n  /** Async execution */\n  async?: boolean;\n}\n\n/**\n * Type guards for skill results\n */\nexport const isSkillResult = <T>(obj: any): obj is SkillResult<T> => {\n  return (\n    obj && typeof obj === 'object' && 'success' in obj && 'metadata' in obj\n  );\n};\n\nexport const isDatabaseResult = <T>(\n  obj: any\n): obj is DatabaseSkillResult<T> => {\n  return isSkillResult(obj) && ('rows' in obj || 'affectedRows' in obj);\n};\n\nexport const isFileResult = (obj: any): obj is FileSkillResult => {\n  return isSkillResult(obj) && 'operation' in obj;\n};\n\nexport const isAPIResult = <T>(obj: any): obj is APISkillResult<T> => {\n  return isSkillResult(obj) && 'status' in obj.metadata;\n};\n\nexport const isCommunicationResult = (\n  obj: any\n): obj is CommunicationSkillResult => {\n  return isSkillResult(obj) && ('messageId' in obj || 'recipient' in obj);\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[428,431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[428,431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[546,549],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[546,549],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[937,940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[937,940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1274,1277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1274,1277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1633,1636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1633,1636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1658,1661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1658,1661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1906,1909],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1906,1909],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1925,1928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1925,1928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2051,2054],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2051,2054],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2375,2378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2375,2378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2485,2488],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2485,2488],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2649,2652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2649,2652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2944,2947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2944,2947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2963,2966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2963,2966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3103,3106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3103,3106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3223,3226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3223,3226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3425,3428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3425,3428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3551,3554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3551,3554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":195,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3951,3954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3951,3954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":218,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":218,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4468,4471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4468,4471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":234,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4740,4743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4740,4743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4794,4797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4794,4797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":254,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5145,5148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5145,5148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":279,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5690,5693],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5690,5693],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":297,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6088,6091],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6088,6091],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":371,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7874,7877],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7874,7877],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":371,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7883,7886],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7883,7886],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":373,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":373,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7945,7948],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7945,7948],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":373,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":373,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7954,7957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7954,7957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":375,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":375,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8007,8010],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8007,8010],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":377,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":377,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8080,8083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8080,8083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":379,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":379,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8155,8158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8155,8158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":381,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":381,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8213,8216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8213,8216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":422,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":422,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9063,9066],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9063,9066],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":456,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":456,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9751,9754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9751,9754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":462,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":462,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9923,9926],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9923,9926],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":484,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":484,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10381,10384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10381,10384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":489,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":489,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10477,10480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10477,10480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":547,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":547,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11688,11691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11688,11691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":553,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":553,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11852,11855],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11852,11855],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":554,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":554,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11930,11933],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11930,11933],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":555,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":555,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12008,12011],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12008,12011],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":559,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":559,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12115,12118],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12115,12118],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":564,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":564,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12225,12228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12225,12228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":576,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":576,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12424,12427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12424,12427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":636,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":636,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13908,13911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13908,13911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":642,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":642,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14016,14019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14016,14019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":645,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":645,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14160,14163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14160,14163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":650,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":650,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14372,14375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14372,14375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":655,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":655,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14552,14555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14552,14555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":657,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":657,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14646,14649],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14646,14649],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":679,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":679,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15154,15157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15154,15157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":724,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":724,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16115,16118],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16115,16118],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":730,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":730,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16231,16234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16231,16234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":744,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":744,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16530,16533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16530,16533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":752,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":752,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16728,16731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16728,16731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":760,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":760,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16869,16872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16869,16872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":761,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":761,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16887,16890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16887,16890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":762,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":762,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16920,16923],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16920,16923],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":767,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":767,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17025,17028],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17025,17028],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":771,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":771,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17153,17156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17153,17156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":780,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":780,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17324,17327],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17324,17327],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":790,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":790,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17502,17505],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17502,17505],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":791,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":791,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17520,17523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17520,17523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":64,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Helper Types for SYMindX\n *\n * This file contains utility types and type helpers that replace void/undefined usage\n * and provide better type safety throughout the system.\n */\n\nimport type { CommunicationStyle } from './communication';\n\n/**\n * Operation Result Types\n * These replace void returns with meaningful result types\n */\nexport type VoidResult = {\n  success: true;\n  timestamp: Date;\n  metadata?: Record<string, any>;\n};\n\nexport type VoidError = {\n  success: false;\n  error: string;\n  timestamp: Date;\n  metadata?: Record<string, any>;\n};\n\nexport type OperationResult = VoidResult | VoidError;\n\n/**\n * Initialization Result Types\n * For module initialization that traditionally returned void\n */\nexport interface InitializationResult {\n  success: boolean;\n  message?: string;\n  timestamp: Date;\n  duration: number;\n  metadata?: {\n    moduleId: string;\n    version: string;\n    dependencies?: string[];\n    [key: string]: any;\n  };\n}\n\n/**\n * Cleanup Result Types\n * For cleanup operations that traditionally returned void\n */\nexport interface CleanupResult {\n  success: boolean;\n  message?: string;\n  timestamp: Date;\n  resourcesReleased: string[];\n  metadata?: {\n    moduleId: string;\n    cleanupType: 'graceful' | 'forced' | 'emergency';\n    [key: string]: any;\n  };\n}\n\n/**\n * Event Processing Result Types\n * For event handlers that traditionally returned void\n */\nexport interface EventProcessingResult {\n  success: boolean;\n  processed: boolean;\n  message?: string;\n  timestamp: Date;\n  eventId: string;\n  metadata?: {\n    processingTime: number;\n    actionsTriggered: string[];\n    stateChanges?: Record<string, any>;\n    [key: string]: any;\n  };\n}\n\n/**\n * State Update Result Types\n * For state mutations that traditionally returned void\n */\nexport interface StateUpdateResult {\n  success: boolean;\n  message?: string;\n  timestamp: Date;\n  changes: {\n    field: string;\n    oldValue: any;\n    newValue: any;\n  }[];\n  metadata?: {\n    updateType: 'single' | 'batch' | 'cascade';\n    conflictsResolved?: number;\n    [key: string]: any;\n  };\n}\n\n/**\n * Validation Result Types\n * Enhanced validation results with detailed feedback\n */\nexport interface ValidationResult {\n  valid: boolean;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n  timestamp: Date;\n  metadata?: {\n    validatorId: string;\n    validationType: string;\n    [key: string]: any;\n  };\n}\n\nexport interface ValidationError {\n  field: string;\n  message: string;\n  code: string;\n  value?: any;\n  severity: 'error' | 'critical';\n  suggestion?: string;\n}\n\nexport interface ValidationWarning {\n  field: string;\n  message: string;\n  code: string;\n  value?: any;\n  severity: 'warning' | 'info';\n  suggestion?: string;\n}\n\n/**\n * Configuration Result Types\n * For configuration operations\n */\nexport interface ConfigurationResult {\n  success: boolean;\n  message?: string;\n  timestamp: Date;\n  configId: string;\n  changes: {\n    key: string;\n    oldValue: any;\n    newValue: any;\n  }[];\n  metadata?: {\n    source: 'file' | 'environment' | 'runtime' | 'default';\n    validation: ValidationResult;\n    [key: string]: any;\n  };\n}\n\n/**\n * Execution Result Types\n * For command and action execution\n */\nexport interface ExecutionResult<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  timestamp: Date;\n  duration: number;\n  metadata?: {\n    commandId: string;\n    executorId: string;\n    retryCount?: number;\n    [key: string]: any;\n  };\n}\n\n/**\n * Async Operation Result Types\n * For long-running operations\n */\nexport interface AsyncOperationResult<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  timestamp: Date;\n  duration: number;\n  operationId: string;\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'cancelled';\n  progress?: {\n    current: number;\n    total: number;\n    percentage: number;\n    message?: string;\n  };\n  metadata?: {\n    startTime: Date;\n    endTime?: Date;\n    checkpoints?: string[];\n    [key: string]: any;\n  };\n}\n\n/**\n * Resource Management Result Types\n * For resource allocation and deallocation\n */\nexport interface ResourceResult {\n  success: boolean;\n  message?: string;\n  timestamp: Date;\n  resourceId: string;\n  resourceType: string;\n  operation: 'allocate' | 'deallocate' | 'update' | 'query';\n  metadata?: {\n    resourceState: 'available' | 'allocated' | 'locked' | 'released';\n    usage?: {\n      memory?: number;\n      cpu?: number;\n      storage?: number;\n      network?: number;\n    };\n    [key: string]: any;\n  };\n}\n\n/**\n * Factory Result Types\n * For factory method results\n */\nexport interface FactoryResult<T> {\n  success: boolean;\n  instance?: T;\n  error?: string;\n  timestamp: Date;\n  factoryId: string;\n  metadata?: {\n    factoryType: string;\n    config: Record<string, any>;\n    dependencies?: string[];\n    [key: string]: any;\n  };\n}\n\n/**\n * Registry Result Types\n * For registry operations\n */\nexport interface RegistryResult {\n  success: boolean;\n  message?: string;\n  timestamp: Date;\n  operation: 'register' | 'unregister' | 'update' | 'query';\n  itemId: string;\n  itemType: string;\n  metadata?: {\n    registrySize: number;\n    conflicts?: string[];\n    [key: string]: any;\n  };\n}\n\n/**\n * Health Check Result Types\n * For system health monitoring\n */\nexport interface HealthCheckResult {\n  healthy: boolean;\n  status: 'healthy' | 'degraded' | 'unhealthy' | 'unknown';\n  timestamp: Date;\n  componentId: string;\n  details: {\n    message?: string;\n    uptime?: number;\n    responseTime?: number;\n    memory?: number;\n    cpu?: number;\n    errors?: string[];\n    warnings?: string[];\n  };\n  metadata?: {\n    checkType: 'basic' | 'detailed' | 'comprehensive';\n    dependencies?: HealthCheckResult[];\n    [key: string]: any;\n  };\n}\n\n/**\n * Lifecycle Event Result Types\n * For lifecycle event handling\n */\nexport interface LifecycleEventResult {\n  success: boolean;\n  message?: string;\n  timestamp: Date;\n  eventType: 'start' | 'stop' | 'pause' | 'resume' | 'restart' | 'reload';\n  componentId: string;\n  metadata?: {\n    previousState: string;\n    newState: string;\n    stateTransitionTime: number;\n    [key: string]: any;\n  };\n}\n\n/**\n * Utility Types for Better Type Safety\n */\n\n/**\n * Branded types for better type safety\n * NOTE: Brand type preserved for future use but currently disabled\n * to simplify type assignments and fix compilation errors\n */\nexport type Brand<T, K> = T & { __brand: K };\n\n/**\n * Simplified ID types (previously branded)\n * These are now plain strings for easier assignment and compatibility\n */\nexport type AgentId = string;\nexport type MemoryId = string;\nexport type EventId = string;\nexport type ExtensionId = string;\nexport type PortalId = string;\nexport type ModuleId = string;\nexport type SessionId = string;\nexport type CorrelationId = string;\n\n/**\n * Simplified timestamp types (previously branded)\n */\nexport type Timestamp = Date;\nexport type Duration = number;\nexport type Milliseconds = number;\n\n/**\n * Simplified numeric types (previously branded)\n */\nexport type Percentage = number;\nexport type Confidence = number;\nexport type Priority = number;\nexport type Version = string;\n\n/**\n * Advanced utility types\n */\nexport type DeepReadonly<T> = {\n  readonly [P in keyof T]: T[P] extends object ? DeepReadonly<T[P]> : T[P];\n};\n\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\nexport type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;\n\nexport type OptionalFields<T, K extends keyof T> = Omit<T, K> &\n  Partial<Pick<T, K>>;\n\nexport type Nullable<T> = T | null;\n\nexport type Optional<T> = T | undefined;\n\nexport type NonEmptyArray<T> = [T, ...T[]];\n\nexport type StringKeys<T> = Extract<keyof T, string>;\n\nexport type NumberKeys<T> = Extract<keyof T, number>;\n\nexport type SymbolKeys<T> = Extract<keyof T, symbol>;\n\n/**\n * Function types for better type safety\n */\nexport type AsyncFunction<T = any, R = any> = (args: T) => Promise<R>;\n\nexport type SyncFunction<T = any, R = any> = (args: T) => R;\n\nexport type EventHandler<T = any> = (event: T) => OperationResult;\n\nexport type AsyncEventHandler<T = any> = (event: T) => Promise<OperationResult>;\n\nexport type Factory<T, C = any> = (config: C) => T;\n\nexport type AsyncFactory<T, C = any> = (config: C) => Promise<T>;\n\nexport type Validator<T> = (value: T) => ValidationResult;\n\nexport type AsyncValidator<T> = (value: T) => Promise<ValidationResult>;\n\nexport type Transformer<T, R> = (input: T) => R;\n\nexport type AsyncTransformer<T, R> = (input: T) => Promise<R>;\n\n/**\n * Predicate types\n */\nexport type Predicate<T> = (value: T) => boolean;\n\nexport type AsyncPredicate<T> = (value: T) => Promise<boolean>;\n\n/**\n * Comparison types\n */\nexport type Comparator<T> = (a: T, b: T) => number;\n\nexport type Equals<T> = (a: T, b: T) => boolean;\n\n/**\n * Builder pattern types\n */\nexport type Builder<T> = {\n  build(): T;\n};\n\nexport type FluentBuilder<T> = {\n  [K in keyof T]: (value: T[K]) => FluentBuilder<T>;\n} & Builder<T>;\n\n/**\n * State machine types\n */\nexport type State<T> = {\n  name: string;\n  value: T;\n  metadata?: Record<string, any>;\n};\n\nexport type Transition<T> = {\n  from: string;\n  to: string;\n  trigger: string;\n  guard?: Predicate<T>;\n  action?: (context: T) => OperationResult;\n};\n\nexport type StateMachine<T> = {\n  currentState: State<T>;\n  states: State<T>[];\n  transitions: Transition<T>[];\n  trigger: (event: string, context: T) => OperationResult;\n};\n\n/**\n * Observer pattern types\n */\nexport type Observer<T> = {\n  update: (data: T) => OperationResult;\n};\n\nexport type ObservableSubject<T> = {\n  attach: (observer: Observer<T>) => OperationResult;\n  detach: (observer: Observer<T>) => OperationResult;\n  notify: (data: T) => OperationResult;\n};\n\n/**\n * Command pattern types\n */\nexport type Command<T = any> = {\n  execute: (context: T) => OperationResult;\n  undo?: (context: T) => OperationResult;\n  redo?: (context: T) => OperationResult;\n};\n\nexport type CommandInvoker<T = any> = {\n  execute: (command: Command<T>, context: T) => OperationResult;\n  undo: () => OperationResult;\n  redo: () => OperationResult;\n};\n\n/**\n * Strategy pattern types\n */\nexport type Strategy<T, R> = {\n  execute: (input: T) => R;\n};\n\nexport type StrategyContext<T, R> = {\n  strategy: Strategy<T, R>;\n  setStrategy: (strategy: Strategy<T, R>) => OperationResult;\n  execute: (input: T) => R;\n};\n\n/**\n * Error handling types\n */\nexport type ErrorHandler<T = any> = (\n  error: Error,\n  context?: T\n) => OperationResult;\n\nexport type AsyncErrorHandler<T = any> = (\n  error: Error,\n  context?: T\n) => Promise<OperationResult>;\n\nexport type RetryPolicy = {\n  maxAttempts: number;\n  initialDelay: number;\n  backoffFactor: number;\n  maxDelay: number;\n  retryCondition?: (error: Error) => boolean;\n};\n\nexport type CircuitBreakerConfig = {\n  failureThreshold: number;\n  resetTimeout: number;\n  monitor?: (result: OperationResult) => void;\n};\n\n/**\n * Caching types\n */\nexport type CacheKey = string | number | symbol;\n\nexport type Cache<T> = {\n  get: (key: CacheKey) => Optional<T>;\n  set: (key: CacheKey, value: T, ttl?: number) => OperationResult;\n  delete: (key: CacheKey) => OperationResult;\n  clear: () => OperationResult;\n  has: (key: CacheKey) => boolean;\n  size: () => number;\n};\n\n/**\n * Serialization types\n */\nexport type Serializer<T> = {\n  serialize: (data: T) => string;\n  deserialize: (data: string) => T;\n};\n\nexport type JSONSerializable =\n  | string\n  | number\n  | boolean\n  | null\n  | JSONSerializable[]\n  | { [key: string]: JSONSerializable };\n\n/**\n * Logging types\n */\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error' | 'fatal';\n\nexport type LogEntry = {\n  level: LogLevel;\n  message: string;\n  timestamp: Timestamp;\n  metadata?: Record<string, any>;\n  correlationId?: CorrelationId;\n};\n\nexport type Logger = {\n  log: (entry: LogEntry) => OperationResult;\n  debug: (message: string, metadata?: Record<string, any>) => OperationResult;\n  info: (message: string, metadata?: Record<string, any>) => OperationResult;\n  warn: (message: string, metadata?: Record<string, any>) => OperationResult;\n  error: (\n    message: string,\n    error?: Error,\n    metadata?: Record<string, any>\n  ) => OperationResult;\n  fatal: (\n    message: string,\n    error?: Error,\n    metadata?: Record<string, any>\n  ) => OperationResult;\n};\n\n/**\n * Metrics types\n */\nexport type Metric = {\n  name: string;\n  value: number;\n  timestamp: Timestamp;\n  tags?: Record<string, string>;\n  metadata?: Record<string, any>;\n};\n\nexport type Counter = {\n  increment: (amount?: number) => OperationResult;\n  decrement: (amount?: number) => OperationResult;\n  getValue: () => number;\n  reset: () => OperationResult;\n};\n\nexport type Gauge = {\n  setValue: (value: number) => OperationResult;\n  getValue: () => number;\n};\n\nexport type Timer = {\n  start: () => OperationResult;\n  stop: () => Duration;\n  record: (duration: Duration) => OperationResult;\n};\n\n/**\n * Configuration types\n */\nexport type ConfigValue =\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n  | ConfigValue[]\n  | { [key: string]: ConfigValue };\n\nexport type ConfigProvider = {\n  get: <T extends ConfigValue>(key: string, defaultValue?: T) => T;\n  set: (key: string, value: ConfigValue) => OperationResult;\n  has: (key: string) => boolean;\n  delete: (key: string) => OperationResult;\n  getAll: () => Record<string, ConfigValue>;\n  reload: () => Promise<OperationResult>;\n};\n\n/**\n * Event system types\n */\nexport type EventBus = {\n  emit: <T>(event: string, data: T) => OperationResult;\n  on: <T>(event: string, handler: EventHandler<T>) => OperationResult;\n  off: <T>(event: string, handler: EventHandler<T>) => OperationResult;\n  once: <T>(event: string, handler: EventHandler<T>) => OperationResult;\n  listenerCount: (event: string) => number;\n};\n\n/**\n * Resource management types\n */\nexport type Resource = {\n  id: string;\n  type: string;\n  status: 'available' | 'allocated' | 'locked' | 'released';\n  metadata?: Record<string, any>;\n};\n\nexport type ResourceManager = {\n  allocate: (\n    type: string,\n    requirements?: Record<string, any>\n  ) => Promise<Resource>;\n  deallocate: (resourceId: string) => Promise<OperationResult>;\n  query: (type: string, filters?: Record<string, any>) => Promise<Resource[]>;\n  getStatus: (resourceId: string) => Promise<Resource>;\n  // Additional methods required by the codebase\n  allocateResources: (\n    agentId: string,\n    requirements: Record<string, any>\n  ) => Promise<OperationResult>;\n  releaseResources: (agentId: string) => Promise<OperationResult>;\n  checkAvailability: (\n    type: string,\n    requirements?: Record<string, any>\n  ) => Promise<boolean>;\n  getCurrentUsage: (agentId?: string) => Promise<Record<string, any>>;\n};\n\n/**\n * Dependency injection types\n */\nexport type Container = {\n  register: <T>(name: string, factory: Factory<T>) => OperationResult;\n  resolve: <T>(name: string) => T;\n  has: (name: string) => boolean;\n  unregister: (name: string) => OperationResult;\n};\n\n/**\n * Plugin system types\n */\nexport type Plugin = {\n  id: string;\n  name: string;\n  version: string;\n  initialize: (container: Container) => Promise<OperationResult>;\n  cleanup: () => Promise<OperationResult>;\n  metadata?: Record<string, any>;\n};\n\nexport type PluginManager = {\n  register: (plugin: Plugin) => Promise<OperationResult>;\n  unregister: (pluginId: string) => Promise<OperationResult>;\n  enable: (pluginId: string) => Promise<OperationResult>;\n  disable: (pluginId: string) => Promise<OperationResult>;\n  list: () => Plugin[];\n  get: (pluginId: string) => Optional<Plugin>;\n};\n\n/**\n * Security types\n */\nexport type Permission = {\n  id: string;\n  name: string;\n  description: string;\n  scope: string;\n};\n\nexport type Role = {\n  id: string;\n  name: string;\n  permissions: Permission[];\n};\n\nexport type SecuritySubject = {\n  id: string;\n  type: 'user' | 'service' | 'agent';\n  roles: Role[];\n};\n\nexport type SecurityContext = {\n  subject: SecuritySubject;\n  permissions: Permission[];\n  hasPermission: (permission: string) => boolean;\n};\n\nexport type AuthenticationResult = {\n  success: boolean;\n  subject?: SecuritySubject;\n  token?: string;\n  error?: string;\n  metadata?: Record<string, any>;\n};\n\nexport type AuthorizationResult = {\n  authorized: boolean;\n  reason?: string;\n  metadata?: Record<string, any>;\n};\n\n/**\n * Additional Result Types\n * These are commonly used result types that were missing\n */\nexport interface EventDispatchResult {\n  success: boolean;\n  message?: string;\n  timestamp: Date;\n  eventId: EventId;\n  handlersTriggered: number;\n  errors?: string[];\n  metadata?: Record<string, any>;\n}\n\nexport interface SystemHealthResult {\n  success: boolean;\n  overall: 'healthy' | 'degraded' | 'unhealthy';\n  timestamp: Date;\n  components: HealthCheckResult[];\n  metadata?: Record<string, any>;\n}\n\nexport interface ConfigurationUpdateResult {\n  success: boolean;\n  message?: string;\n  timestamp: Date;\n  key: string;\n  oldValue?: any;\n  newValue?: any;\n  metadata?: Record<string, any>;\n}\n\nexport interface ConfigurationLoadResult {\n  success: boolean;\n  configuration?: Record<string, any>;\n  error?: string;\n  timestamp: Date;\n  source: 'file' | 'environment' | 'remote' | 'default';\n  metadata?: Record<string, any>;\n}\n\nexport interface LoggingResult {\n  success: boolean;\n  message?: string;\n  timestamp: Date;\n  logLevel: string;\n  logMessage: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface ConfigurationSchema {\n  properties: Record<\n    string,\n    {\n      type: string;\n      description?: string;\n      required?: boolean;\n      default?: any;\n      enum?: any[];\n    }\n  >;\n  required: string[];\n  additionalProperties: boolean;\n}\n\n/**\n * Feedback Entry for style learning\n */\nexport interface FeedbackEntry {\n  feedback: 'positive' | 'negative' | 'neutral';\n  style: CommunicationStyle;\n  timestamp: Date;\n  context?: {\n    originalLength: number;\n    adaptedLength: number;\n    styleUsed: CommunicationStyle;\n  };\n}\n\n// Re-export types from other files\nexport type { PerformanceMetrics } from './results';\n\nexport type { ModuleManifest } from './index';\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":431,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":431,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10843,10846],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10843,10846],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":432,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":432,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10890,10893],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10890,10893],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":433,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":433,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10937,10940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10937,10940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":434,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":434,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11000,11003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11000,11003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":435,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":435,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11047,11050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11047,11050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":442,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":442,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11213,11216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11213,11216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":443,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":443,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11285,11288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11285,11288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":444,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":444,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11357,11360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11357,11360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":448,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":448,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11458,11461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11458,11461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":453,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":453,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11562,11565],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11562,11565],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":455,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":455,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11620,11623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11620,11623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":490,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":490,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12556,12559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12556,12559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":491,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":491,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12631,12634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12631,12634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":492,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":492,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12708,12711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12708,12711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":493,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":493,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12785,12788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12785,12788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":494,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":494,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12859,12862],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12859,12862],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":496,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":496,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12921,12924],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12921,12924],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":497,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":497,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12988,12991],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12988,12991],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":498,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":498,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13057,13060],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13057,13060],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":499,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":499,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13126,13129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13126,13129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":500,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":500,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13192,13195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13192,13195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":509,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":509,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13388,13391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13388,13391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":513,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":513,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13486,13489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13486,13489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":517,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":517,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13586,13589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13586,13589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":521,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":521,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13686,13689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13686,13689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":525,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":525,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13783,13786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13783,13786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":528,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":528,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13859,13862],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13859,13862],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":529,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":529,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13926,13929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13926,13929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":530,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":530,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13995,13998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13995,13998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":531,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":531,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14064,14067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14064,14067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":532,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":532,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14130,14133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14130,14133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Centralized Type System for SYMindX\n *\n * This file exports all types used throughout the SYMindX system,\n * providing a single point of access for all type definitions.\n */\n\n// Global type definitions\nimport './globals';\n\n// Import types needed for local interface definitions\nimport type {\n  OperationResult,\n  EventProcessingResult,\n  EventDispatchResult,\n  HealthCheckResult,\n  SystemHealthResult,\n  Duration,\n  ConfigurationUpdateResult,\n  ConfigurationLoadResult,\n  ConfigurationSchema,\n  LoggingResult,\n  CleanupResult,\n  ValidationResult,\n} from './helpers';\n\n// Core types - selective exports to avoid conflicts\nexport type {\n  BaseConfig,\n  ActionParameters,\n  Metadata,\n  Context,\n  GenericData,\n  SkillParameters,\n  ExtensionConfig,\n  ConfigValue,\n  ConfigurationSchema,\n} from './common';\nexport { LogLevel, Priority, Status } from './enums';\nexport type {\n  OperationResult,\n  ExecutionResult,\n  InitializationResult,\n  CleanupResult,\n  EventProcessingResult,\n  HealthCheckResult,\n  LifecycleEventResult,\n  Duration,\n  Timestamp,\n  AgentId,\n  MemoryId,\n  EventId,\n  ModuleId,\n  CorrelationId,\n} from './helpers';\nexport type {\n  AgentCreationResult,\n  AgentDestructionResult,\n  AgentStateTransitionResult,\n  MemoryStorageResult,\n  MemoryRetrievalResult,\n  ThoughtProcessingResult,\n  SystemHealthResult,\n  EventDispatchResult,\n  PerformanceMetrics,\n  ConfigurationLoadResult,\n  ConfigurationUpdateResult,\n  LoggingResult,\n} from './results';\n// Define ModuleManifest inline to avoid import issues\nexport interface ModuleManifest {\n  id: string;\n  name: string;\n  version: string;\n  description?: string;\n  author?: string;\n  license?: string;\n  homepage?: string;\n  repository?: string;\n  main: string;\n  type: 'portal' | 'memory' | 'utility' | 'extension' | 'skill';\n  dependencies?: string[];\n  devDependencies?: string[];\n  peerDependencies?: string[];\n  keywords?: string[];\n  engines?: Record<string, string>;\n  files?: string[];\n  scripts?: Record<string, string>;\n  config?: Record<string, unknown>;\n  permissions?: string[];\n  platforms?: ('linux' | 'darwin' | 'win32')[];\n}\nexport type {\n  InitializationFunction,\n  CleanupFunction,\n  EventProcessingFunction,\n  HealthCheckFunction,\n} from './signatures';\n\n// Agent system types (selective exports to avoid conflicts)\nexport type {\n  Agent,\n  AgentConfig,\n  AgentStatus,\n  AgentState,\n  LazyAgentState,\n  LazyAgent,\n  AgentFactory,\n  AgentAction,\n  AgentEvent,\n  ExtensionAction,\n  ExtensionEventHandler,\n  ActionResult,\n} from './agent';\nexport {\n  LazyAgentStatus,\n  ActionStatus,\n  MemoryType,\n  ExtensionStatus,\n  ActionCategory,\n  ActionResultType,\n  ExtensionType,\n} from './agent';\nexport type { Extension } from './extension';\nexport type { Portal, PortalConfig, PortalType } from './portal';\nexport * from './portals/ai-sdk';\nexport * from './portals/responses';\n\n// Export ExtensionMetadata from common (ExtensionConfig already exported above)\nexport type { ExtensionMetadata } from './common';\n\n// Advanced module types (selective exports)\nexport type {\n  EmotionModule,\n  PersonalityTraits,\n  EmotionBlend,\n  AdvancedEmotionConfig,\n} from './emotion';\nexport type {\n  EmotionTriggerEvent,\n  EmotionModifier,\n  EmotionTransition,\n  EmotionBlendResult,\n  EmotionHistoryEntry,\n  EmotionResult,\n  EmotionData,\n  EmotionCalculation,\n  EmotionEventHandler,\n  EmotionDecayConfig,\n  EmotionModuleRegistration,\n} from './modules/emotions';\nexport type { CognitionModule } from './cognition';\n\n// Memory types (selective exports)\nexport type {\n  SearchQuery,\n  SearchResult,\n  SearchQueryType,\n  BoostFactors,\n  TimeRange,\n  MemoryRelationship,\n  MemoryRelationshipType,\n  MemoryManagementPolicy,\n  MemoryPolicyConfig,\n  PolicyCondition,\n  PolicyAction,\n  MemoryProviderMetadata,\n  MemoryProviderFactory,\n  MemoryProviderConfig,\n  ConsolidationRule,\n  MemoryTier,\n  MemoryContext,\n  MemoryPermission,\n  SharedMemoryConfig,\n  ArchivalStrategy,\n} from './memory';\n\n// Export enums as values (not types)\nexport { MemoryDuration, MemoryTierType } from './memory';\n\n// Character configuration types\nexport type {\n  CharacterConfig,\n  EnvironmentConfig,\n  PortalConfig as CharacterPortalConfig,\n  PortalSpecificConfig,\n  PortalCapability,\n} from './character';\nexport { ConfigDefaults } from './character';\n\n// Lifecycle and operations (commented out due to conflicts)\n// export * from './lifecycle';\n\n// EventSource types (for server-sent events)\n// Note: eventsource.d.ts is a type declaration file, not exported\n\n/**\n * Result type for standardized error handling\n * @deprecated Use OperationResult, ExecutionResult, or specific result types from helpers/results instead\n */\nexport interface Result<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Enhanced result types that replace the generic Result<T>\n * These provide better type safety and more detailed information\n */\n// Already exported above to avoid duplicate exports\n\n/**\n * Module-specific result types for better type safety\n */\n// Already exported above to avoid duplicate exports\n\n/**\n * Factory function type for creating modules\n */\nexport type ModuleFactory<T, C = unknown> = (config?: C) => T | Promise<T>;\n\n/**\n * Plugin manifest for dynamic loading\n */\nexport interface PluginManifest {\n  id?: string;\n  name: string;\n  version: string;\n  description?: string;\n  author?: string;\n  license?: string;\n  homepage?: string;\n  repository?: string;\n  main: string;\n  type: 'portal' | 'memory' | 'utility' | 'extension' | 'skill';\n  disabled: boolean;\n  dependencies?: string[];\n  devDependencies?: string[];\n  peerDependencies?: string[];\n  keywords?: string[];\n  engines?: Record<string, string>;\n  files?: string[];\n  scripts?: Record<string, string>;\n  config?: Record<string, unknown>;\n  permissions?: string[];\n  platforms?: ('linux' | 'darwin' | 'win32')[];\n  enabled?: boolean;\n}\n\n/**\n * System configuration interface\n */\nexport interface SystemConfig {\n  pluginsDirectory: string;\n  allowUnsafePlugins: boolean;\n  validateDependencies: boolean;\n  maxConcurrentLoads: number;\n  loadTimeout: number;\n}\n\n/**\n * Plugin configuration interface\n */\nexport interface PluginConfig {\n  enabled: boolean;\n  priority: number;\n  loadTimeout: number;\n  hotReload: boolean;\n  security: {\n    sandboxed: boolean;\n    permissions: string[];\n  };\n  config: Record<string, unknown>;\n}\n\n/**\n * Security context for plugins\n */\nexport interface SecurityContext {\n  sandboxed: boolean;\n  permissions: Set<string>;\n  resourceLimits: {\n    memory: number;\n    cpu: number;\n    network: boolean;\n    filesystem: boolean;\n  };\n  trustedPlugin: boolean;\n}\n\n/**\n * Enhanced validation result type alias\n */\nexport type EnhancedValidationResult = ValidationResult;\n\n/**\n * Dependency validation result\n */\nexport interface DependencyValidation {\n  valid: boolean;\n  missing: string[];\n  circular: string[];\n}\n\n/**\n * Type-safe event emitter interface\n * @deprecated Use enhanced event emitter with proper result types\n */\nexport interface TypedEventEmitter<T extends Record<string, unknown>> {\n  on<K extends keyof T>(event: K, listener: (data: T[K]) => void): void;\n  off<K extends keyof T>(event: K, listener: (data: T[K]) => void): void;\n  emit<K extends keyof T>(event: K, data: T[K]): void;\n}\n\n/**\n * Enhanced type-safe event emitter with proper result types\n */\nexport interface EnhancedTypedEventEmitter<T extends Record<string, unknown>> {\n  on<K extends keyof T>(\n    event: K,\n    listener: (data: T[K]) => EventProcessingResult\n  ): OperationResult;\n  off<K extends keyof T>(\n    event: K,\n    listener: (data: T[K]) => EventProcessingResult\n  ): OperationResult;\n  emit<K extends keyof T>(event: K, data: T[K]): EventDispatchResult;\n  once<K extends keyof T>(\n    event: K,\n    listener: (data: T[K]) => EventProcessingResult\n  ): OperationResult;\n  listenerCount<K extends keyof T>(event: K): number;\n  eventNames(): (keyof T)[];\n  removeAllListeners<K extends keyof T>(event?: K): OperationResult;\n}\n\n/**\n * Module registry interface for type-safe module management\n * @deprecated Use enhanced registry types with proper result types\n */\nexport interface ModuleRegistry {\n  register<T>(name: string, factory: ModuleFactory<T>): void;\n  get<T>(name: string): T | undefined;\n  has(name: string): boolean;\n  unregister(name: string): boolean;\n  list(): string[];\n}\n\n/**\n * Enhanced module registry with proper result types\n */\nexport interface EnhancedModuleRegistry {\n  register<T>(name: string, factory: ModuleFactory<T>): OperationResult;\n  get<T>(name: string): T | undefined;\n  has(name: string): boolean;\n  unregister(name: string): OperationResult;\n  list(): string[];\n  getMetadata(name: string): ModuleManifest | undefined;\n  validate(name: string): EnhancedValidationResult;\n  healthCheck(name: string): HealthCheckResult;\n}\n\n/**\n * Health check interface for system monitoring\n * @deprecated Use HealthCheckResult from helpers instead\n */\nexport interface HealthCheck {\n  name: string;\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  details?: Record<string, unknown>;\n  lastChecked: Date;\n  responseTime?: number;\n}\n\n/**\n * Enhanced health monitoring service\n */\nexport interface HealthMonitoringService {\n  checkHealth(componentId: string): Promise<HealthCheckResult>;\n  checkSystemHealth(): Promise<SystemHealthResult>;\n  registerHealthCheck(\n    componentId: string,\n    check: () => Promise<HealthCheckResult>\n  ): OperationResult;\n  unregisterHealthCheck(componentId: string): OperationResult;\n  getHealthHistory(\n    componentId: string,\n    duration?: Duration\n  ): Promise<HealthCheckResult[]>;\n  subscribe(callback: (result: HealthCheckResult) => void): OperationResult;\n  unsubscribe(callback: (result: HealthCheckResult) => void): OperationResult;\n}\n\n/**\n * Configuration provider interface\n * @deprecated Use enhanced configuration provider with proper result types\n */\nexport interface ConfigProvider {\n  get<T>(key: string, defaultValue?: T): T;\n  set(key: string, value: unknown): void;\n  has(key: string): boolean;\n  getAll(): Record<string, unknown>;\n  reload(): Promise<void>;\n}\n\n/**\n * Enhanced configuration provider with proper result types\n */\nexport interface EnhancedConfigProvider {\n  get<T>(key: string, defaultValue?: T): T;\n  set(key: string, value: unknown): ConfigurationUpdateResult;\n  has(key: string): boolean;\n  getAll(): Record<string, unknown>;\n  reload(): Promise<ConfigurationLoadResult>;\n  validate(key?: string): ValidationResult;\n  getSchema(): ConfigurationSchema;\n  watch(\n    key: string,\n    callback: (result: ConfigurationUpdateResult) => void\n  ): OperationResult;\n  unwatch(key: string): OperationResult;\n}\n\n/**\n * Logger interface for consistent logging\n * @deprecated Use enhanced logger interface with proper result types\n */\nexport interface ILogger {\n  debug(message: string, ...args: any[]): void;\n  info(message: string, ...args: any[]): void;\n  warn(message: string, ...args: any[]): void;\n  error(message: string, error?: Error, ...args: any[]): void;\n  child(metadata: Record<string, any>): ILogger;\n}\n\n/**\n * Enhanced logger interface with proper result types\n */\nexport interface EnhancedLogger {\n  debug(message: string, metadata?: Record<string, any>): LoggingResult;\n  info(message: string, metadata?: Record<string, any>): LoggingResult;\n  warn(message: string, metadata?: Record<string, any>): LoggingResult;\n  error(\n    message: string,\n    error?: Error,\n    metadata?: Record<string, any>\n  ): LoggingResult;\n  fatal(\n    message: string,\n    error?: Error,\n    metadata?: Record<string, any>\n  ): LoggingResult;\n  child(metadata: Record<string, any>): EnhancedLogger;\n  setLevel(\n    level: 'debug' | 'info' | 'warn' | 'error' | 'fatal'\n  ): OperationResult;\n  getLevel(): string;\n  flush(): Promise<OperationResult>;\n}\n\n/**\n * Async disposable interface for resource cleanup\n * @deprecated Use enhanced disposable interface with proper result types\n */\nexport interface AsyncDisposable {\n  dispose(): Promise<void>;\n}\n\n/**\n * Enhanced disposable interface with proper result types\n */\nexport interface EnhancedAsyncDisposable {\n  dispose(): Promise<CleanupResult>;\n  isDisposed(): boolean;\n  getResourceInfo(): {\n    type: string;\n    id: string;\n    status: 'active' | 'disposed' | 'disposing';\n    metadata?: Record<string, unknown>;\n  };\n}\n\n/**\n * Factory registry for managing different types of factories\n * @deprecated Use enhanced factory registry with proper result types\n */\nexport interface FactoryRegistry {\n  registerMemoryFactory(name: string, factory: ModuleFactory<any>): void;\n  registerEmotionFactory(name: string, factory: ModuleFactory<any>): void;\n  registerCognitionFactory(name: string, factory: ModuleFactory<any>): void;\n  registerExtensionFactory(name: string, factory: ModuleFactory<any>): void;\n  registerPortalFactory(name: string, factory: ModuleFactory<any>): void;\n\n  getMemoryFactory(name: string): ModuleFactory<any> | undefined;\n  getEmotionFactory(name: string): ModuleFactory<any> | undefined;\n  getCognitionFactory(name: string): ModuleFactory<any> | undefined;\n  getExtensionFactory(name: string): ModuleFactory<any> | undefined;\n  getPortalFactory(name: string): ModuleFactory<any> | undefined;\n}\n\n/**\n * Enhanced factory registry with proper result types\n */\nexport interface EnhancedFactoryRegistry {\n  registerMemoryFactory(\n    name: string,\n    factory: ModuleFactory<any>\n  ): OperationResult;\n  registerEmotionFactory(\n    name: string,\n    factory: ModuleFactory<any>\n  ): OperationResult;\n  registerCognitionFactory(\n    name: string,\n    factory: ModuleFactory<any>\n  ): OperationResult;\n  registerExtensionFactory(\n    name: string,\n    factory: ModuleFactory<any>\n  ): OperationResult;\n  registerPortalFactory(\n    name: string,\n    factory: ModuleFactory<any>\n  ): OperationResult;\n\n  getMemoryFactory(name: string): ModuleFactory<any> | undefined;\n  getEmotionFactory(name: string): ModuleFactory<any> | undefined;\n  getCognitionFactory(name: string): ModuleFactory<any> | undefined;\n  getExtensionFactory(name: string): ModuleFactory<any> | undefined;\n  getPortalFactory(name: string): ModuleFactory<any> | undefined;\n\n  validateFactory(name: string): EnhancedValidationResult;\n  listFactories(type?: string): string[];\n  getFactoryMetadata(name: string): ModuleManifest | undefined;\n}\n\n// Export strict types to replace any usage\nexport type {\n  LoggerMetadata,\n  LoggerArgs,\n  AgentData,\n  AgentMetadata,\n  AgentConfiguration,\n  ConfigurationValue,\n  AgentPerformanceMetrics,\n  MemoryConfiguration,\n  DatabaseConfiguration,\n  VectorSearchConfiguration,\n  RetentionConfiguration,\n  EmotionConfiguration,\n  EmotionType,\n  EmotionState,\n  EmotionContext,\n  EmotionMetadata,\n  SocialContextData,\n  EnvironmentalContextData,\n  CognitionConfiguration,\n  CognitionContext,\n  TimeConstraints,\n  PortalConfiguration,\n  ModelSettings,\n  PortalResponse,\n  PortalResponseData,\n  TokenUsage,\n  PortalMetadata,\n  ExtensionConfiguration,\n  ExtensionSettings,\n  ExtensionData,\n  CLIOptions,\n  CLIMetrics,\n  AgentMetrics,\n  SystemMetrics,\n  CommandOptions,\n  CommandContext,\n  CommandResult,\n  CommandResultData,\n  CommandMetadata,\n  ChatPriority,\n  ChatMessage,\n  ChatMessageMetadata,\n  MonitoringOptions,\n  MonitoringCommand,\n  MonitoringResult,\n  MonitoringResultData,\n  MonitoringMetrics,\n  HookDependencies,\n  NavigationData,\n  NavigationParams,\n  NavigationMetadata,\n  ConnectionDetails,\n  TerminalFunction,\n  TerminalDimensions,\n  GridContent,\n  RuntimeClientResponse,\n  RuntimeClientData,\n  RuntimeClientMetadata,\n  RuntimeClientRequestBody,\n  AISDKParameters,\n  AIMessage,\n  AIMessageMetadata,\n  AITool,\n  AIToolParameters,\n  AIToolProperty,\n  GenerationOptions,\n  StreamingOptions,\n  ValidationOptions,\n  ValidationSchema,\n  ValidationRule,\n  ExecutionContext,\n  EnvironmentContext,\n  RuntimeContext,\n  CPUContext,\n  ExecutionMetadata,\n  SearchCriteria,\n  SearchFilters,\n  SearchSort,\n  SearchPagination,\n  SearchResults,\n  SearchMetadata,\n  DecisionCriteria,\n  DecisionOption,\n  DecisionMetadata,\n  DecisionResult,\n  KeyValuePair,\n  StatusCounts,\n  GradientFunction,\n  UpdateData,\n  CharacterConfiguration,\n  PersonalityConfiguration,\n  ModuleConfiguration,\n  AutonomousConfiguration,\n  AutonomousConstraints,\n  // Strict type aliases\n  StrictConfigurationValue,\n  StrictLoggerArgs,\n  StrictLoggerMetadata,\n  StrictAgentData,\n  StrictCLIOptions,\n  StrictCommandOptions,\n  StrictMonitoringOptions,\n  StrictHookDependencies,\n  StrictNavigationData,\n  StrictConnectionDetails,\n  StrictGridContent,\n  StrictRuntimeClientResponse,\n  StrictRuntimeClientRequestBody,\n  StrictAISDKParameters,\n  StrictGenerationOptions,\n  StrictValidationOptions,\n  StrictExecutionContext,\n  StrictSearchCriteria,\n  StrictDecisionCriteria,\n  StrictKeyValuePair,\n  StrictStatusCounts,\n  StrictUpdateData,\n} from './strict';\n\n// Extension types\nexport * from './extensions';\n\n// CLI types\nexport * from './cli/index';\n\n// Module-specific types\nexport * from './modules/index';\n\n// Core system types\nexport * from './core/runtime';\nexport * from './core/events';\n\n// Utility types\nexport * from './utils/logger';\nexport * from './utils/validation';\nexport * from './utils/arrays';\nexport * from './utils/maps';\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/lifecycle.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_AgentEvent' is defined but never used.","line":11,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_Agent' is defined but never used.","line":12,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_Metadata' is defined but never used.","line":14,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1940,1943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1940,1943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":222,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4764,4767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4764,4767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":229,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4861,4864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4861,4864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":237,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5022,5025],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5022,5025],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":246,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":246,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5177,5180],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5177,5180],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":256,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":256,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5355,5358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5355,5358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":257,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5371,5374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5371,5374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":300,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6224,6227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6224,6227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":307,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":307,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6344,6347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6344,6347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":308,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":308,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6361,6364],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6361,6364],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":324,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6619,6622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6619,6622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":460,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":460,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9662,9665],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9662,9665],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":472,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":472,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9922,9925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9922,9925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":590,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":590,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12254,12257],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12254,12257],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":796,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":796,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16251,16254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16251,16254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":907,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":907,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18502,18505],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18502,18505],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":927,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":927,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18896,18899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18896,18899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-redeclare","severity":2,"message":"'AlertRule' is already defined.","line":943,"column":18,"nodeType":"Identifier","messageId":"redeclared","endLine":943,"endColumn":27},{"ruleId":"no-redeclare","severity":2,"message":"'LogOutput' is already defined.","line":1019,"column":18,"nodeType":"Identifier","messageId":"redeclared","endLine":1019,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1021,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1021,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20847,20850],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20847,20850],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1045,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1045,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21267,21270],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21267,21270],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-redeclare","severity":2,"message":"'TracingConfig' is already defined.","line":1048,"column":18,"nodeType":"Identifier","messageId":"redeclared","endLine":1048,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1087,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1087,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22180,22183],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22180,22183],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1158,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1158,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23800,23803],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23800,23803],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1233,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1233,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25442,25445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25442,25445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1248,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1248,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25695,25698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25695,25698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1277,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1277,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26289,26292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26289,26292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1295,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1295,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26615,26618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26615,26618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1303,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1303,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26791,26794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26791,26794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1333,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1333,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27420,27423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27420,27423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1428,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1428,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29326,29329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29326,29329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1460,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1460,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29919,29922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29919,29922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1461,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1461,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29936,29939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29936,29939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1485,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1485,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30459,30462],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30459,30462],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1736,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1736,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[36441,36444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[36441,36444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-redeclare","severity":2,"message":"'MonitoringSystem' is already defined.","line":1758,"column":18,"nodeType":"Identifier","messageId":"redeclared","endLine":1758,"endColumn":34}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Agent Lifecycle Management Types\n *\n * This module defines the core types and interfaces for the comprehensive\n * agent lifecycle management platform that supports enterprise-scale\n * agent development, deployment, and operations.\n */\n\nimport {\n  AgentConfig,\n  AgentEvent as _AgentEvent,\n  Agent as _Agent,\n} from './agent';\nimport { BaseConfig, Metadata as _Metadata } from './common';\n\n// =============================================================================\n// LIFECYCLE ENUMS\n// =============================================================================\n\nexport enum LifecycleStage {\n  DEVELOPMENT = 'development',\n  TESTING = 'testing',\n  STAGING = 'staging',\n  PRODUCTION = 'production',\n  DEPRECATED = 'deprecated',\n  ARCHIVED = 'archived',\n}\n\nexport enum DeploymentStatus {\n  PENDING = 'pending',\n  DEPLOYING = 'deploying',\n  DEPLOYED = 'deployed',\n  FAILED = 'failed',\n  ROLLING_BACK = 'rolling_back',\n  ROLLED_BACK = 'rolled_back',\n}\n\nexport enum TestStatus {\n  PENDING = 'pending',\n  RUNNING = 'running',\n  PASSED = 'passed',\n  FAILED = 'failed',\n  SKIPPED = 'skipped',\n  CANCELLED = 'cancelled',\n}\n\nexport enum OptimizationStatus {\n  IDLE = 'idle',\n  ANALYZING = 'analyzing',\n  OPTIMIZING = 'optimizing',\n  COMPLETED = 'completed',\n  FAILED = 'failed',\n}\n\nexport enum MonitoringAlertLevel {\n  INFO = 'info',\n  WARNING = 'warning',\n  ERROR = 'error',\n  CRITICAL = 'critical',\n}\n\n// =============================================================================\n// DEVELOPMENT PLATFORM TYPES\n// =============================================================================\n\nexport interface AgentTemplate {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  version: string;\n  author: string;\n  tags: string[];\n  baseConfig: Partial<AgentConfig>;\n  requiredModules: string[];\n  optionalModules: string[];\n  previewImage?: string;\n  documentation?: string;\n  customFields?: Record<string, any>;\n}\n\nexport interface AgentBuilder {\n  template?: AgentTemplate;\n  config: AgentConfig;\n  validationErrors: ValidationError[];\n  warnings: ValidationWarning[];\n  isValid: boolean;\n  lastValidated: Date;\n}\n\nexport interface ValidationError {\n  id: string;\n  field: string;\n  message: string;\n  severity: 'error' | 'warning';\n  code: string;\n  suggestion?: string;\n}\n\nexport interface ValidationWarning {\n  id: string;\n  field: string;\n  message: string;\n  code: string;\n  suggestion?: string;\n}\n\nexport interface DevelopmentConfig {\n  templates: {\n    storePath: string;\n    autoSync: boolean;\n    registry: string[];\n  };\n  validation: {\n    realTime: boolean;\n    strict: boolean;\n    customRules: string[];\n  };\n  preview: {\n    enabled: boolean;\n    sandboxed: boolean;\n    resourceLimits: ResourceLimits;\n  };\n}\n\nexport interface ResourceLimits {\n  maxMemoryMB: number;\n  maxCpuPercent: number;\n  maxNetworkBandwidth: number;\n  maxDiskSpace: number;\n  maxExecutionTime: number;\n}\n\n// =============================================================================\n// TESTING FRAMEWORK TYPES\n// =============================================================================\n\nexport interface TestSuite {\n  id: string;\n  name: string;\n  description: string;\n  agentId: string;\n  tests: TestCase[];\n  environment: TestEnvironment;\n  status: TestStatus;\n  results?: TestResults;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface TestCase {\n  id: string;\n  name: string;\n  description: string;\n  type: TestType;\n  category: TestCategory;\n  priority: TestPriority;\n  setup: TestSetup;\n  steps: TestStep[];\n  assertions: TestAssertion[];\n  cleanup: TestCleanup;\n  timeout: number;\n  retries: number;\n  status: TestStatus;\n  result?: TestResult;\n}\n\nexport enum TestType {\n  UNIT = 'unit',\n  INTEGRATION = 'integration',\n  BEHAVIOR = 'behavior',\n  PERFORMANCE = 'performance',\n  SECURITY = 'security',\n  SMOKE = 'smoke',\n  REGRESSION = 'regression',\n}\n\nexport enum TestCategory {\n  COGNITION = 'cognition',\n  EMOTION = 'emotion',\n  MEMORY = 'memory',\n  EXTENSION = 'extension',\n  PORTAL = 'portal',\n  COORDINATION = 'coordination',\n  SYSTEM = 'system',\n}\n\nexport enum TestPriority {\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n  CRITICAL = 'critical',\n}\n\nexport interface TestEnvironment {\n  id: string;\n  name: string;\n  type: 'isolated' | 'sandbox' | 'mock' | 'staging';\n  resources: ResourceLimits;\n  mockServices: MockService[];\n  dataFixtures: DataFixture[];\n  config: BaseConfig;\n}\n\nexport interface MockService {\n  name: string;\n  type: string;\n  endpoints: MockEndpoint[];\n  responses: MockResponse[];\n}\n\nexport interface MockEndpoint {\n  path: string;\n  method: string;\n  responseId: string;\n}\n\nexport interface MockResponse {\n  id: string;\n  status: number;\n  headers: Record<string, string>;\n  body: any;\n  delay?: number;\n}\n\nexport interface DataFixture {\n  name: string;\n  type: string;\n  data: any;\n  description?: string;\n}\n\nexport interface TestSetup {\n  agents: AgentConfig[];\n  extensions: string[];\n  portals: string[];\n  environment: Record<string, any>;\n  mocks: string[];\n  fixtures: string[];\n}\n\nexport interface TestStep {\n  id: string;\n  name: string;\n  action: string;\n  parameters: Record<string, any>;\n  expectedOutcome?: string;\n  timeout?: number;\n}\n\nexport interface TestAssertion {\n  id: string;\n  type: AssertionType;\n  target: string;\n  condition: string;\n  expected: any;\n  actual?: any;\n  message?: string;\n}\n\nexport enum AssertionType {\n  EQUALS = 'equals',\n  NOT_EQUALS = 'not_equals',\n  CONTAINS = 'contains',\n  NOT_CONTAINS = 'not_contains',\n  GREATER_THAN = 'greater_than',\n  LESS_THAN = 'less_than',\n  REGEX_MATCH = 'regex_match',\n  TYPE_CHECK = 'type_check',\n  CUSTOM = 'custom',\n}\n\nexport interface TestCleanup {\n  actions: string[];\n  resetState: boolean;\n  clearMemory: boolean;\n  stopAgents: boolean;\n}\n\nexport interface TestResult {\n  id: string;\n  testCaseId: string;\n  status: TestStatus;\n  startTime: Date;\n  endTime?: Date;\n  duration?: number;\n  steps: TestStepResult[];\n  assertions: TestAssertionResult[];\n  error?: TestError;\n  logs: TestLog[];\n  metrics: TestMetrics;\n}\n\nexport interface TestStepResult {\n  stepId: string;\n  status: TestStatus;\n  startTime: Date;\n  endTime?: Date;\n  duration?: number;\n  output?: any;\n  error?: string;\n}\n\nexport interface TestAssertionResult {\n  assertionId: string;\n  status: TestStatus;\n  actual: any;\n  expected: any;\n  message?: string;\n}\n\nexport interface TestError {\n  message: string;\n  stack?: string;\n  code?: string;\n  type: string;\n}\n\nexport interface TestLog {\n  timestamp: Date;\n  level: string;\n  message: string;\n  source: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface TestMetrics {\n  memoryUsage: number;\n  cpuUsage: number;\n  responseTime: number;\n  throughput: number;\n  errorRate: number;\n  customMetrics: Record<string, number>;\n}\n\nexport interface TestResults {\n  suiteId: string;\n  totalTests: number;\n  passed: number;\n  failed: number;\n  skipped: number;\n  cancelled: number;\n  duration: number;\n  startTime: Date;\n  endTime: Date;\n  coverage: TestCoverage;\n  performance: PerformanceMetrics;\n}\n\nexport interface TestCoverage {\n  lines: number;\n  functions: number;\n  branches: number;\n  statements: number;\n  percentage: number;\n}\n\nexport interface PerformanceMetrics {\n  avgResponseTime: number;\n  maxResponseTime: number;\n  minResponseTime: number;\n  throughput: number;\n  errorRate: number;\n  memoryPeak: number;\n  cpuPeak: number;\n}\n\nexport interface TestingConfig {\n  environments: TestEnvironment[];\n  parallelExecution: boolean;\n  maxConcurrentTests: number;\n  defaultTimeout: number;\n  retryPolicy: RetryPolicy;\n  reporting: TestReportingConfig;\n  coverage: CoverageConfig;\n}\n\nexport interface RetryPolicy {\n  maxRetries: number;\n  backoffStrategy: 'linear' | 'exponential' | 'fixed';\n  baseDelay: number;\n  maxDelay: number;\n}\n\nexport interface TestReportingConfig {\n  formats: string[];\n  outputPath: string;\n  includeStackTraces: boolean;\n  includeLogs: boolean;\n  includeMetrics: boolean;\n}\n\nexport interface CoverageConfig {\n  enabled: boolean;\n  threshold: number;\n  includeFiles: string[];\n  excludeFiles: string[];\n}\n\n// =============================================================================\n// DEPLOYMENT & ORCHESTRATION TYPES\n// =============================================================================\n\nexport interface DeploymentTarget {\n  id: string;\n  name: string;\n  type: DeploymentType;\n  environment: LifecycleStage;\n  config: DeploymentConfig;\n  healthCheck: HealthCheck;\n  scalingPolicy: ScalingPolicy;\n  status: DeploymentStatus;\n}\n\nexport enum DeploymentType {\n  DOCKER = 'docker',\n  KUBERNETES = 'kubernetes',\n  SERVERLESS = 'serverless',\n  BARE_METAL = 'bare_metal',\n  CLOUD_INSTANCE = 'cloud_instance',\n}\n\nexport interface DeploymentConfig {\n  strategy: DeploymentStrategy;\n  blueGreen: BlueGreenConfig;\n  canary: CanaryConfig;\n  rolling: RollingConfig;\n  resources: ResourceRequirements;\n  networking: NetworkingConfig;\n  security: SecurityConfig;\n  monitoring: MonitoringConfig;\n}\n\nexport interface MonitoringConfig {\n  enabled: boolean;\n  metrics: MetricsConfig;\n  logging: LoggingConfig;\n  alerting: AlertingConfig;\n  health: HealthCheckConfig;\n  tracing: TracingConfig;\n}\n\nexport interface MetricsConfig {\n  provider: 'prometheus' | 'datadog' | 'newrelic' | 'custom';\n  endpoint?: string;\n  interval: number;\n  retention: string;\n  labels: Record<string, string>;\n}\n\nexport interface LoggingConfig {\n  level: 'debug' | 'info' | 'warn' | 'error';\n  format: 'json' | 'text';\n  outputs: LogOutput[];\n  structured: boolean;\n}\n\nexport interface LogOutput {\n  type: 'console' | 'file' | 'syslog' | 'remote';\n  config: Record<string, any>;\n}\n\nexport interface AlertingConfig {\n  enabled: boolean;\n  channels: AlertChannel[];\n  rules: AlertRule[];\n  escalation: EscalationPolicy[];\n}\n\nexport interface AlertChannel {\n  type: 'email' | 'slack' | 'webhook' | 'pagerduty';\n  config: Record<string, any>;\n  enabled: boolean;\n}\n\nexport interface AlertRule {\n  name: string;\n  condition: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  duration: string;\n  channels: string[];\n}\n\nexport interface EscalationPolicy {\n  name: string;\n  steps: EscalationStep[];\n  timeout: string;\n}\n\nexport interface EscalationStep {\n  channels: string[];\n  delay: string;\n  repeat: number;\n}\n\nexport interface HealthCheckConfig {\n  enabled: boolean;\n  endpoint: string;\n  interval: number;\n  timeout: number;\n  retries: number;\n  successThreshold: number;\n  failureThreshold: number;\n}\n\nexport interface TracingConfig {\n  enabled: boolean;\n  provider: 'jaeger' | 'zipkin' | 'datadog' | 'custom';\n  samplingRate: number;\n  endpoint?: string;\n}\n\nexport enum DeploymentStrategy {\n  BLUE_GREEN = 'blue_green',\n  CANARY = 'canary',\n  ROLLING = 'rolling',\n  RECREATE = 'recreate',\n  A_B_TEST = 'a_b_test',\n}\n\nexport interface BlueGreenConfig {\n  enabled: boolean;\n  switchoverTime: number;\n  rollbackTimeout: number;\n  healthCheckTimeout: number;\n}\n\nexport interface CanaryConfig {\n  enabled: boolean;\n  trafficPercentage: number;\n  incrementStep: number;\n  evaluationInterval: number;\n  successThreshold: number;\n  failureThreshold: number;\n}\n\nexport interface RollingConfig {\n  enabled: boolean;\n  maxUnavailable: number;\n  maxSurge: number;\n  batchSize: number;\n  pauseBetweenBatches: number;\n}\n\nexport interface ResourceRequirements {\n  cpu: string;\n  memory: string;\n  storage: string;\n  gpu?: string;\n  network: string;\n}\n\nexport interface NetworkingConfig {\n  ports: PortConfig[];\n  loadBalancer: LoadBalancerConfig;\n  ingress: IngressConfig;\n}\n\nexport interface PortConfig {\n  name: string;\n  port: number;\n  targetPort: number;\n  protocol: 'TCP' | 'UDP';\n}\n\nexport interface LoadBalancerConfig {\n  type: 'round_robin' | 'least_connections' | 'ip_hash';\n  algorithm: string;\n  healthCheck: HealthCheck;\n}\n\nexport interface IngressConfig {\n  enabled: boolean;\n  host: string;\n  path: string;\n  tls: boolean;\n  annotations: Record<string, string>;\n}\n\nexport interface SecurityConfig {\n  authentication: AuthConfig;\n  authorization: AuthzConfig;\n  encryption: EncryptionConfig;\n  networkPolicies: NetworkPolicy[];\n}\n\nexport interface AuthConfig {\n  enabled: boolean;\n  type: 'jwt' | 'oauth2' | 'api_key' | 'mtls';\n  config: Record<string, any>;\n}\n\nexport interface AuthzConfig {\n  enabled: boolean;\n  rbac: RBACConfig;\n  policies: PolicyConfig[];\n}\n\nexport interface RBACConfig {\n  enabled: boolean;\n  roles: Role[];\n  bindings: RoleBinding[];\n}\n\nexport interface Role {\n  name: string;\n  permissions: Permission[];\n}\n\nexport interface Permission {\n  resource: string;\n  actions: string[];\n}\n\nexport interface RoleBinding {\n  role: string;\n  subjects: Subject[];\n}\n\nexport interface Subject {\n  type: 'user' | 'group' | 'service_account';\n  name: string;\n}\n\nexport interface PolicyConfig {\n  name: string;\n  rules: PolicyRule[];\n}\n\nexport interface PolicyRule {\n  resource: string;\n  action: string;\n  condition: string;\n  effect: 'allow' | 'deny';\n}\n\nexport interface EncryptionConfig {\n  atRest: boolean;\n  inTransit: boolean;\n  keyManagement: KeyManagementConfig;\n}\n\nexport interface KeyManagementConfig {\n  provider: string;\n  keyRotation: boolean;\n  rotationInterval: number;\n}\n\nexport interface NetworkPolicy {\n  name: string;\n  ingress: NetworkRule[];\n  egress: NetworkRule[];\n}\n\nexport interface NetworkRule {\n  from?: NetworkPeer[];\n  to?: NetworkPeer[];\n  ports: PortConfig[];\n}\n\nexport interface NetworkPeer {\n  type: 'pod' | 'namespace' | 'ip_block';\n  selector: Record<string, string>;\n  ipBlock?: string;\n}\n\nexport interface HealthCheck {\n  enabled: boolean;\n  type: 'http' | 'tcp' | 'exec' | 'grpc';\n  endpoint?: string;\n  interval: number;\n  timeout: number;\n  retries: number;\n  initialDelay: number;\n}\n\nexport interface ScalingPolicy {\n  enabled: boolean;\n  minReplicas: number;\n  maxReplicas: number;\n  targetCpuUtilization: number;\n  targetMemoryUtilization: number;\n  scaleUpCooldown: number;\n  scaleDownCooldown: number;\n  customMetrics: CustomMetric[];\n}\n\nexport interface CustomMetric {\n  name: string;\n  type: 'resource' | 'pods' | 'object' | 'external';\n  target: MetricTarget;\n}\n\nexport interface MetricTarget {\n  type: 'utilization' | 'average_value' | 'value';\n  value: number;\n}\n\nexport interface DeploymentPipeline {\n  id: string;\n  name: string;\n  stages: PipelineStage[];\n  triggers: PipelineTrigger[];\n  approvals: ApprovalConfig[];\n  notifications: NotificationConfig[];\n  rollback: RollbackConfig;\n  status: PipelineStatus;\n}\n\nexport enum PipelineStatus {\n  IDLE = 'idle',\n  RUNNING = 'running',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n  CANCELLED = 'cancelled',\n  WAITING_APPROVAL = 'waiting_approval',\n}\n\nexport interface PipelineStage {\n  id: string;\n  name: string;\n  type: StageType;\n  config: StageConfig;\n  dependencies: string[];\n  conditions: StageCondition[];\n  status: PipelineStatus;\n}\n\nexport enum StageType {\n  BUILD = 'build',\n  TEST = 'test',\n  DEPLOY = 'deploy',\n  VALIDATE = 'validate',\n  APPROVE = 'approve',\n  NOTIFY = 'notify',\n  ROLLBACK = 'rollback',\n}\n\nexport interface StageConfig {\n  parallel: boolean;\n  timeout: number;\n  retries: number;\n  onFailure: 'stop' | 'continue' | 'rollback';\n  environment: Record<string, string>;\n  commands: string[];\n  artifacts: ArtifactConfig[];\n}\n\nexport interface ArtifactConfig {\n  name: string;\n  path: string;\n  type: string;\n  retention: number;\n}\n\nexport interface StageCondition {\n  type: 'branch' | 'tag' | 'schedule' | 'manual' | 'webhook';\n  value: string;\n  operator: '==' | '!=' | 'contains' | 'regex';\n}\n\nexport interface PipelineTrigger {\n  type: 'git' | 'schedule' | 'webhook' | 'manual';\n  config: TriggerConfig;\n}\n\nexport interface TriggerConfig {\n  branch?: string;\n  tag?: string;\n  schedule?: string;\n  webhook?: WebhookConfig;\n}\n\nexport interface WebhookConfig {\n  url: string;\n  secret: string;\n  events: string[];\n}\n\nexport interface ApprovalConfig {\n  stage: string;\n  approvers: string[];\n  required: number;\n  timeout: number;\n  automatic: boolean;\n}\n\nexport interface NotificationConfig {\n  channels: NotificationChannel[];\n  events: NotificationEvent[];\n  templates: NotificationTemplate[];\n}\n\nexport interface NotificationChannel {\n  type: 'email' | 'slack' | 'teams' | 'webhook';\n  config: Record<string, any>;\n}\n\nexport interface NotificationEvent {\n  stage: string;\n  status: PipelineStatus;\n  template: string;\n}\n\nexport interface NotificationTemplate {\n  id: string;\n  name: string;\n  subject: string;\n  body: string;\n  format: 'text' | 'html' | 'markdown';\n}\n\nexport interface RollbackConfig {\n  enabled: boolean;\n  automatic: boolean;\n  conditions: RollbackCondition[];\n  strategy: RollbackStrategy;\n}\n\nexport interface RollbackCondition {\n  metric: string;\n  threshold: number;\n  operator: '>' | '<' | '>=' | '<=' | '==' | '!=';\n  duration: number;\n}\n\nexport interface RollbackStrategy {\n  type: 'immediate' | 'gradual' | 'blue_green';\n  timeout: number;\n  verification: boolean;\n}\n\n// =============================================================================\n// MONITORING & ANALYTICS TYPES\n// =============================================================================\n\nexport interface MonitoringSystem {\n  dashboards: Dashboard[];\n  alerts: AlertRule[];\n  metrics: MetricDefinition[];\n  logs: LogConfig;\n  traces: TracingConfig;\n  anomalyDetection: AnomalyDetectionConfig;\n}\n\nexport interface Dashboard {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  panels: DashboardPanel[];\n  filters: DashboardFilter[];\n  timeRange: TimeRange;\n  refreshInterval: number;\n  sharing: SharingConfig;\n}\n\nexport interface DashboardPanel {\n  id: string;\n  type: PanelType;\n  title: string;\n  position: PanelPosition;\n  queries: MetricQuery[];\n  visualization: VisualizationConfig;\n  alerts: string[];\n}\n\nexport enum PanelType {\n  GRAPH = 'graph',\n  GAUGE = 'gauge',\n  STAT = 'stat',\n  TABLE = 'table',\n  HEATMAP = 'heatmap',\n  LOGS = 'logs',\n  TEXT = 'text',\n}\n\nexport interface PanelPosition {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nexport interface MetricQuery {\n  id: string;\n  metric: string;\n  filters: MetricFilter[];\n  aggregation: AggregationConfig;\n  alias?: string;\n}\n\nexport interface MetricFilter {\n  key: string;\n  operator: '=' | '!=' | '=~' | '!~';\n  value: string;\n}\n\nexport interface AggregationConfig {\n  type: 'sum' | 'avg' | 'min' | 'max' | 'count' | 'rate';\n  interval: string;\n  groupBy: string[];\n}\n\nexport interface VisualizationConfig {\n  type: string;\n  options: Record<string, any>;\n  thresholds: Threshold[];\n  colors: ColorConfig;\n}\n\nexport interface Threshold {\n  value: number;\n  color: string;\n  condition: '>' | '<' | '>=' | '<=';\n}\n\nexport interface ColorConfig {\n  scheme: string;\n  overrides: Record<string, string>;\n}\n\nexport interface DashboardFilter {\n  key: string;\n  type: 'text' | 'select' | 'multi_select' | 'date_range';\n  options: string[];\n  default?: any;\n}\n\nexport interface TimeRange {\n  from: string;\n  to: string;\n  timezone: string;\n}\n\nexport interface SharingConfig {\n  public: boolean;\n  users: string[];\n  teams: string[];\n  readonly: boolean;\n}\n\nexport interface AlertRule {\n  id: string;\n  name: string;\n  description: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  query: MetricQuery;\n  condition: string;\n  evaluation: EvaluationConfig;\n  notifications: AlertNotification[];\n  annotations: Record<string, string>;\n  labels: Record<string, string>;\n  status: AlertStatus;\n}\n\nexport interface AlertCondition {\n  type: 'threshold' | 'anomaly' | 'change' | 'absence';\n  threshold?: number;\n  operator?: '>' | '<' | '>=' | '<=' | '==' | '!=';\n  duration?: string;\n  changeType?: 'increase' | 'decrease' | 'change';\n  changeThreshold?: number;\n}\n\nexport interface EvaluationConfig {\n  interval: string;\n  timeout: string;\n  maxDataPoints: number;\n  noDataState: 'NoData' | 'Alerting' | 'OK';\n  executionErrorState: 'Alerting' | 'OK';\n}\n\nexport interface AlertNotification {\n  channel: string;\n  template: string;\n  conditions: NotificationCondition[];\n}\n\nexport interface NotificationCondition {\n  state: AlertStatus;\n  frequency: string;\n  throttle: string;\n}\n\nexport enum AlertStatus {\n  OK = 'ok',\n  PENDING = 'pending',\n  ALERTING = 'alerting',\n  NO_DATA = 'no_data',\n  EXECUTION_ERROR = 'execution_error',\n}\n\nexport interface MetricDefinition {\n  name: string;\n  type: MetricType;\n  description: string;\n  unit: string;\n  labels: string[];\n  help: string;\n}\n\nexport enum MetricType {\n  COUNTER = 'counter',\n  GAUGE = 'gauge',\n  HISTOGRAM = 'histogram',\n  SUMMARY = 'summary',\n}\n\nexport interface LogConfig {\n  enabled: boolean;\n  level: string;\n  format: 'json' | 'text' | 'structured';\n  output: LogOutput[];\n  retention: RetentionPolicy;\n  parsing: LogParsingConfig;\n}\n\nexport interface LogOutput {\n  type: 'file' | 'console' | 'syslog' | 'remote';\n  config: Record<string, any>;\n}\n\nexport interface RetentionPolicy {\n  duration: string;\n  size: string;\n  count: number;\n}\n\nexport interface LogParsingConfig {\n  enabled: boolean;\n  patterns: LogPattern[];\n  extractors: LogExtractor[];\n}\n\nexport interface LogPattern {\n  name: string;\n  pattern: string;\n  fields: string[];\n}\n\nexport interface LogExtractor {\n  field: string;\n  type: 'regex' | 'json' | 'grok' | 'csv';\n  config: Record<string, any>;\n}\n\nexport interface TracingConfig {\n  enabled: boolean;\n  sampler: SamplerConfig;\n  exporter: ExporterConfig;\n  instrumentation: InstrumentationConfig;\n}\n\nexport interface SamplerConfig {\n  type: 'always_on' | 'always_off' | 'ratio' | 'rate_limiting';\n  ratio?: number;\n  rateLimit?: number;\n}\n\nexport interface ExporterConfig {\n  type: 'jaeger' | 'zipkin' | 'otlp' | 'console';\n  endpoint: string;\n  headers: Record<string, string>;\n  timeout: number;\n}\n\nexport interface InstrumentationConfig {\n  http: boolean;\n  grpc: boolean;\n  database: boolean;\n  messaging: boolean;\n  custom: string[];\n}\n\nexport interface AnomalyDetectionConfig {\n  enabled: boolean;\n  algorithms: AnomalyAlgorithm[];\n  sensitivity: number;\n  baseline: BaselineConfig;\n  notifications: AlertNotification[];\n}\n\nexport interface AnomalyAlgorithm {\n  name: string;\n  type: 'statistical' | 'ml' | 'rule_based';\n  config: Record<string, any>;\n  metrics: string[];\n}\n\nexport interface BaselineConfig {\n  type: 'historical' | 'seasonal' | 'trend';\n  period: string;\n  history: string;\n  update: string;\n}\n\n// =============================================================================\n// OPTIMIZATION TYPES\n// =============================================================================\n\nexport interface OptimizationSuite {\n  id: string;\n  name: string;\n  agentId: string;\n  experiments: Experiment[];\n  hyperparameterTuning: HyperparameterTuning;\n  performanceProfiler: PerformanceProfiler;\n  learningAnalytics: LearningAnalytics;\n  recommendations: OptimizationRecommendation[];\n  status: OptimizationStatus;\n}\n\nexport interface Experiment {\n  id: string;\n  name: string;\n  type: ExperimentType;\n  hypothesis: string;\n  variants: ExperimentVariant[];\n  trafficSplit: TrafficSplit;\n  metrics: ExperimentMetric[];\n  duration: number;\n  status: ExperimentStatus;\n  results?: ExperimentResults;\n}\n\nexport enum ExperimentType {\n  A_B_TEST = 'a_b_test',\n  MULTIVARIATE = 'multivariate',\n  BANDITS = 'bandits',\n  FEATURE_FLAG = 'feature_flag',\n}\n\nexport interface ExperimentVariant {\n  id: string;\n  name: string;\n  description: string;\n  config: AgentConfig;\n  weight: number;\n  status: VariantStatus;\n}\n\nexport enum VariantStatus {\n  ACTIVE = 'active',\n  PAUSED = 'paused',\n  WINNER = 'winner',\n  LOSER = 'loser',\n}\n\nexport interface TrafficSplit {\n  control: number;\n  variants: Record<string, number>;\n  allocation: AllocationStrategy;\n}\n\nexport interface AllocationStrategy {\n  type: 'random' | 'hash' | 'sticky' | 'geolocation';\n  config: Record<string, any>;\n}\n\nexport interface ExperimentMetric {\n  name: string;\n  type: 'primary' | 'secondary' | 'guardrail';\n  definition: MetricDefinition;\n  target: MetricTarget;\n  significance: StatisticalSignificance;\n}\n\nexport interface StatisticalSignificance {\n  alpha: number;\n  beta: number;\n  minimumEffect: number;\n  minimumSampleSize: number;\n}\n\nexport enum ExperimentStatus {\n  DRAFT = 'draft',\n  RUNNING = 'running',\n  COMPLETED = 'completed',\n  STOPPED = 'stopped',\n  CANCELLED = 'cancelled',\n}\n\nexport interface ExperimentResults {\n  duration: number;\n  participants: number;\n  conversions: Record<string, number>;\n  metrics: Record<string, MetricResult>;\n  significance: SignificanceResult;\n  recommendation: ExperimentRecommendation;\n}\n\nexport interface MetricResult {\n  control: number;\n  variants: Record<string, number>;\n  improvement: Record<string, number>;\n  confidence: Record<string, number>;\n}\n\nexport interface SignificanceResult {\n  significant: boolean;\n  pValue: number;\n  confidence: number;\n  effect: number;\n}\n\nexport interface ExperimentRecommendation {\n  winner?: string;\n  action: 'deploy' | 'continue' | 'stop' | 'redesign';\n  reasoning: string;\n  nextSteps: string[];\n}\n\nexport interface HyperparameterTuning {\n  id: string;\n  parameters: HyperparameterSpace;\n  objective: OptimizationObjective;\n  algorithm: TuningAlgorithm;\n  budget: TuningBudget;\n  results: TuningResults;\n  status: OptimizationStatus;\n}\n\nexport interface HyperparameterSpace {\n  parameters: Parameter[];\n  constraints: ParameterConstraint[];\n}\n\nexport interface Parameter {\n  name: string;\n  type: ParameterType;\n  range: ParameterRange;\n  default: any;\n  description: string;\n}\n\nexport enum ParameterType {\n  INTEGER = 'integer',\n  FLOAT = 'float',\n  CATEGORICAL = 'categorical',\n  BOOLEAN = 'boolean',\n}\n\nexport interface ParameterRange {\n  min?: number;\n  max?: number;\n  step?: number;\n  choices?: any[];\n}\n\nexport interface ParameterConstraint {\n  type: 'dependency' | 'exclusion' | 'range';\n  parameters: string[];\n  condition: string;\n}\n\nexport interface OptimizationObjective {\n  metric: string;\n  direction: 'minimize' | 'maximize';\n  constraints: ObjectiveConstraint[];\n}\n\nexport interface ObjectiveConstraint {\n  metric: string;\n  operator: '>' | '<' | '>=' | '<=' | '==' | '!=';\n  value: number;\n}\n\nexport interface TuningAlgorithm {\n  name: string;\n  type:\n    | 'grid_search'\n    | 'random_search'\n    | 'bayesian'\n    | 'evolutionary'\n    | 'tree_parzen';\n  config: Record<string, any>;\n}\n\nexport interface TuningBudget {\n  maxEvaluations: number;\n  maxDuration: number;\n  maxCost: number;\n  earlyStop: EarlyStopConfig;\n}\n\nexport interface EarlyStopConfig {\n  enabled: boolean;\n  patience: number;\n  minImprovement: number;\n  metric: string;\n}\n\nexport interface TuningResults {\n  bestParams: Record<string, any>;\n  bestScore: number;\n  history: TuningIteration[];\n  convergence: ConvergenceMetrics;\n}\n\nexport interface TuningIteration {\n  iteration: number;\n  params: Record<string, any>;\n  score: number;\n  duration: number;\n  timestamp: Date;\n}\n\nexport interface ConvergenceMetrics {\n  converged: boolean;\n  stagnation: number;\n  improvement: number;\n  stability: number;\n}\n\nexport interface PerformanceProfiler {\n  id: string;\n  agentId: string;\n  profiles: PerformanceProfile[];\n  bottlenecks: PerformanceBottleneck[];\n  recommendations: PerformanceRecommendation[];\n  status: OptimizationStatus;\n}\n\nexport interface PerformanceProfile {\n  id: string;\n  timestamp: Date;\n  duration: number;\n  cpu: CpuProfile;\n  memory: MemoryProfile;\n  network: NetworkProfile;\n  disk: DiskProfile;\n  custom: Record<string, any>;\n}\n\nexport interface CpuProfile {\n  usage: number;\n  idle: number;\n  system: number;\n  user: number;\n  iowait: number;\n}\n\nexport interface MemoryProfile {\n  used: number;\n  free: number;\n  cached: number;\n  buffers: number;\n  swap: number;\n}\n\nexport interface NetworkProfile {\n  bytesIn: number;\n  bytesOut: number;\n  packetsIn: number;\n  packetsOut: number;\n  errors: number;\n}\n\nexport interface DiskProfile {\n  reads: number;\n  writes: number;\n  bytesRead: number;\n  bytesWritten: number;\n  utilization: number;\n}\n\nexport interface PerformanceBottleneck {\n  id: string;\n  type: BottleneckType;\n  component: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  impact: number;\n  description: string;\n  recommendation: string;\n}\n\nexport enum BottleneckType {\n  CPU = 'cpu',\n  MEMORY = 'memory',\n  NETWORK = 'network',\n  DISK = 'disk',\n  DATABASE = 'database',\n  EXTERNAL_API = 'external_api',\n  ALGORITHM = 'algorithm',\n}\n\nexport interface PerformanceRecommendation {\n  id: string;\n  type: 'configuration' | 'code' | 'infrastructure' | 'architecture';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  category: string;\n  title: string;\n  description: string;\n  implementation: string;\n  expectedImprovement: number;\n  effort: 'low' | 'medium' | 'high';\n  risk: 'low' | 'medium' | 'high';\n}\n\nexport interface LearningAnalytics {\n  id: string;\n  agentId: string;\n  learningMetrics: LearningMetric[];\n  knowledgeGraph: KnowledgeGraph;\n  adaptationHistory: AdaptationRecord[];\n  insights: LearningInsight[];\n}\n\nexport interface LearningMetric {\n  name: string;\n  value: number;\n  trend: 'improving' | 'stable' | 'declining';\n  benchmark: number;\n  timestamp: Date;\n}\n\nexport interface KnowledgeGraph {\n  nodes: KnowledgeNode[];\n  edges: KnowledgeEdge[];\n  metrics: GraphMetrics;\n}\n\nexport interface KnowledgeNode {\n  id: string;\n  type: string;\n  label: string;\n  properties: Record<string, any>;\n  connections: number;\n  importance: number;\n}\n\nexport interface KnowledgeEdge {\n  source: string;\n  target: string;\n  type: string;\n  weight: number;\n  confidence: number;\n}\n\nexport interface GraphMetrics {\n  nodes: number;\n  edges: number;\n  density: number;\n  clustering: number;\n  centrality: Record<string, number>;\n}\n\nexport interface AdaptationRecord {\n  timestamp: Date;\n  trigger: string;\n  change: ConfigurationChange;\n  outcome: AdaptationOutcome;\n  metrics: Record<string, number>;\n}\n\nexport interface ConfigurationChange {\n  module: string;\n  parameter: string;\n  oldValue: any;\n  newValue: any;\n  reason: string;\n}\n\nexport interface AdaptationOutcome {\n  success: boolean;\n  improvement: number;\n  sideEffects: string[];\n  rollback: boolean;\n}\n\nexport interface LearningInsight {\n  id: string;\n  type: 'pattern' | 'anomaly' | 'opportunity' | 'risk';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  title: string;\n  description: string;\n  evidence: Evidence[];\n  recommendations: string[];\n}\n\nexport interface Evidence {\n  type: 'metric' | 'event' | 'pattern' | 'correlation';\n  description: string;\n  data: any;\n  confidence: number;\n}\n\nexport interface OptimizationRecommendation {\n  id: string;\n  type: RecommendationType;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  category: string;\n  title: string;\n  description: string;\n  rationale: string;\n  implementation: ImplementationGuide;\n  impact: ImpactAssessment;\n  status: RecommendationStatus;\n}\n\nexport enum RecommendationType {\n  CONFIGURATION = 'configuration',\n  ARCHITECTURE = 'architecture',\n  ALGORITHM = 'algorithm',\n  INFRASTRUCTURE = 'infrastructure',\n  PROCESS = 'process',\n}\n\nexport interface ImplementationGuide {\n  steps: ImplementationStep[];\n  prerequisites: string[];\n  risks: Risk[];\n  rollback: string[];\n  testing: string[];\n}\n\nexport interface ImplementationStep {\n  order: number;\n  description: string;\n  command?: string;\n  validation: string;\n  rollback: string;\n}\n\nexport interface Risk {\n  description: string;\n  probability: 'low' | 'medium' | 'high';\n  impact: 'low' | 'medium' | 'high';\n  mitigation: string;\n}\n\nexport interface ImpactAssessment {\n  performance: number;\n  cost: number;\n  reliability: number;\n  maintainability: number;\n  security: number;\n  overall: number;\n}\n\nexport enum RecommendationStatus {\n  PENDING = 'pending',\n  IN_PROGRESS = 'in_progress',\n  IMPLEMENTED = 'implemented',\n  REJECTED = 'rejected',\n  DEFERRED = 'deferred',\n}\n\n// =============================================================================\n// FACTORY INTERFACES\n// =============================================================================\n\nexport interface AgentDevelopmentPlatform {\n  createBuilder(template?: AgentTemplate): AgentBuilder;\n  validateConfig(config: AgentConfig): ValidationResult;\n  previewAgent(config: AgentConfig): Promise<AgentPreview>;\n  saveTemplate(template: AgentTemplate): Promise<void>;\n  loadTemplate(id: string): Promise<AgentTemplate>;\n  listTemplates(category?: string): Promise<AgentTemplate[]>;\n}\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n  suggestions: ValidationSuggestion[];\n}\n\nexport interface ValidationSuggestion {\n  field: string;\n  message: string;\n  improvement: string;\n  impact: 'low' | 'medium' | 'high';\n}\n\nexport interface AgentPreview {\n  config: AgentConfig;\n  estimatedResources: ResourceEstimate;\n  compatibilityCheck: CompatibilityResult;\n  securityAnalysis: SecurityAnalysis;\n}\n\nexport interface ResourceEstimate {\n  cpu: string;\n  memory: string;\n  storage: string;\n  network: string;\n  cost: number;\n}\n\nexport interface CompatibilityResult {\n  compatible: boolean;\n  issues: CompatibilityIssue[];\n  recommendations: string[];\n}\n\nexport interface CompatibilityIssue {\n  component: string;\n  issue: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  solution: string;\n}\n\nexport interface SecurityAnalysis {\n  score: number;\n  vulnerabilities: SecurityVulnerability[];\n  recommendations: SecurityRecommendation[];\n}\n\nexport interface SecurityVulnerability {\n  type: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  description: string;\n  cve?: string;\n  mitigation: string;\n}\n\nexport interface SecurityRecommendation {\n  category: string;\n  title: string;\n  description: string;\n  implementation: string;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n}\n\nexport interface AgentTestingFramework {\n  createTestSuite(agentId: string, config: TestSuiteConfig): TestSuite;\n  runTests(suiteId: string): Promise<TestResults>;\n  createTestEnvironment(\n    config: TestEnvironmentConfig\n  ): Promise<TestEnvironment>;\n  generateTestCases(agentConfig: AgentConfig): TestCase[];\n  validateTestSuite(suite: TestSuite): ValidationResult;\n}\n\nexport interface TestSuiteConfig {\n  name: string;\n  description: string;\n  categories: TestCategory[];\n  environment: string;\n  parallel: boolean;\n  timeout: number;\n}\n\nexport interface TestEnvironmentConfig {\n  name: string;\n  type: 'isolated' | 'sandbox' | 'mock' | 'staging';\n  resources: ResourceLimits;\n  services: string[];\n  data: string[];\n}\n\nexport interface DeploymentManager {\n  createDeployment(config: DeploymentConfig): Promise<string>;\n  deployAgent(agentId: string, target: string): Promise<DeploymentResult>;\n  rollbackDeployment(deploymentId: string): Promise<RollbackResult>;\n  getDeploymentStatus(deploymentId: string): Promise<DeploymentStatus>;\n  listDeployments(filter?: DeploymentFilter): Promise<DeploymentSummary[]>;\n  createPipeline(config: PipelineConfig): Promise<string>;\n  runPipeline(pipelineId: string): Promise<PipelineExecution>;\n}\n\nexport interface DeploymentResult {\n  id: string;\n  status: DeploymentStatus;\n  url?: string;\n  healthChecks: HealthCheckResult[];\n  metrics: DeploymentMetrics;\n}\n\nexport interface HealthCheckResult {\n  name: string;\n  status: 'healthy' | 'unhealthy' | 'unknown';\n  message: string;\n  timestamp: Date;\n}\n\nexport interface DeploymentMetrics {\n  startTime: Date;\n  endTime?: Date;\n  duration?: number;\n  resourceUsage: ResourceUsage;\n  performance: PerformanceSnapshot;\n}\n\nexport interface ResourceUsage {\n  cpu: number;\n  memory: number;\n  storage: number;\n  network: number;\n}\n\nexport interface PerformanceSnapshot {\n  responseTime: number;\n  throughput: number;\n  errorRate: number;\n  availability: number;\n}\n\nexport interface RollbackResult {\n  success: boolean;\n  previousVersion: string;\n  newVersion: string;\n  duration: number;\n  issues: string[];\n}\n\nexport interface DeploymentFilter {\n  environment?: LifecycleStage;\n  status?: DeploymentStatus;\n  dateRange?: TimeRange;\n  agentId?: string;\n}\n\nexport interface DeploymentSummary {\n  id: string;\n  agentId: string;\n  environment: LifecycleStage;\n  status: DeploymentStatus;\n  version: string;\n  deployTime: Date;\n  url?: string;\n}\n\nexport interface PipelineConfig {\n  name: string;\n  stages: PipelineStageConfig[];\n  triggers: PipelineTrigger[];\n  notifications: NotificationConfig[];\n}\n\nexport interface PipelineStageConfig {\n  name: string;\n  type: StageType;\n  config: Record<string, any>;\n  dependencies: string[];\n}\n\nexport interface PipelineExecution {\n  id: string;\n  pipelineId: string;\n  status: PipelineStatus;\n  startTime: Date;\n  endTime?: Date;\n  stages: PipelineStageExecution[];\n}\n\nexport interface PipelineStageExecution {\n  name: string;\n  status: PipelineStatus;\n  startTime: Date;\n  endTime?: Date;\n  logs: string[];\n  artifacts: string[];\n}\n\nexport interface MonitoringSystem {\n  createDashboard(config: DashboardConfig): Promise<Dashboard>;\n  createAlert(config: AlertConfig): Promise<AlertRule>;\n  queryMetrics(query: MetricQuery, timeRange: TimeRange): Promise<MetricData[]>;\n  getAlerts(filter?: AlertFilter): Promise<AlertRule[]>;\n  getMetrics(agentId: string, timeRange: TimeRange): Promise<AgentMetrics>;\n  detectAnomalies(agentId: string, timeRange: TimeRange): Promise<Anomaly[]>;\n}\n\nexport interface DashboardConfig {\n  name: string;\n  description: string;\n  panels: DashboardPanelConfig[];\n  filters: DashboardFilter[];\n}\n\nexport interface DashboardPanelConfig {\n  type: PanelType;\n  title: string;\n  queries: MetricQuery[];\n  visualization: VisualizationConfig;\n}\n\nexport interface AlertConfig {\n  name: string;\n  description: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  query: MetricQuery;\n  condition: string;\n  notifications: string[];\n}\n\nexport interface MetricData {\n  timestamp: Date;\n  value: number;\n  labels: Record<string, string>;\n}\n\nexport interface AlertFilter {\n  severity?: MonitoringAlertLevel;\n  status?: AlertStatus;\n  timeRange?: TimeRange;\n}\n\nexport interface AgentMetrics {\n  performance: PerformanceMetrics;\n  resource: ResourceMetrics;\n  business: BusinessMetrics;\n  custom: Record<string, number>;\n}\n\nexport interface ResourceMetrics {\n  cpu: number;\n  memory: number;\n  storage: number;\n  network: number;\n}\n\nexport interface BusinessMetrics {\n  requests: number;\n  responses: number;\n  errors: number;\n  revenue: number;\n  users: number;\n}\n\nexport interface Anomaly {\n  id: string;\n  type: AnomalyType;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  description: string;\n  timestamp: Date;\n  metrics: string[];\n  confidence: number;\n  recommendations: string[];\n}\n\nexport enum AnomalyType {\n  PERFORMANCE = 'performance',\n  RESOURCE = 'resource',\n  BEHAVIOR = 'behavior',\n  SECURITY = 'security',\n  BUSINESS = 'business',\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/memory.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3513,3516],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3513,3516],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":194,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4233,4236],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4233,4236],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4648,4651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4648,4651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":289,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":289,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6150,6153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6150,6153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":340,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":340,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7321,7324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7321,7324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Memory Types for SYMindX\n *\n * This file defines the interfaces for memory providers and their metadata.\n */\n\nimport { MemoryProvider, MemoryRecord } from './agent';\n\n/**\n * Memory tier types for multi-level memory architecture\n */\nexport enum MemoryTierType {\n  WORKING = 'working', // Short-term active memory (7±2 items)\n  EPISODIC = 'episodic', // Event-based memories with temporal context\n  SEMANTIC = 'semantic', // Fact-based knowledge and concepts\n  PROCEDURAL = 'procedural', // Skill-based and how-to memories\n  INTERACTION = 'interaction', // Interactive conversation memory\n}\n\n/**\n * @deprecated Use MemoryTierType instead\n */\nexport type MemoryType = MemoryTierType;\n\n/**\n * Memory duration types for retention policies\n */\nexport enum MemoryDuration {\n  SHORT_TERM = 'short_term', // Minutes to hours\n  MEDIUM_TERM = 'medium_term', // Hours to days\n  LONG_TERM = 'long_term', // Days to weeks\n  PERMANENT = 'permanent', // Indefinite retention\n}\n\n/**\n * Consolidation rules for memory transfer between tiers\n */\nexport interface ConsolidationRule {\n  fromTier: MemoryTierType;\n  toTier: MemoryTierType;\n  condition: 'importance' | 'frequency' | 'age' | 'emotional';\n  threshold: number;\n}\n\n/**\n * Memory tier configuration\n */\nexport interface MemoryTier {\n  type: MemoryTierType;\n  capacity?: number;\n  consolidationRules?: ConsolidationRule[];\n  decayRate?: number; // How fast memories fade (0-1)\n}\n\n/**\n * Enhanced memory context with embeddings and relationships\n */\nexport interface MemoryContext {\n  embedding?: number[]; // Vector representation\n  relationships?: string[]; // Related memory IDs\n  emotionalValence?: number; // -1 to 1 (negative to positive)\n  confidence?: number; // 0 to 1 confidence score\n  source?: 'experience' | 'learned' | 'told' | 'inferred' | 'compression';\n}\n\n/**\n * Memory permissions for shared access\n */\nexport enum MemoryPermission {\n  READ = 'read',\n  WRITE = 'write',\n  DELETE = 'delete',\n  SHARE = 'share',\n}\n\n/**\n * Shared memory pool configuration\n */\nexport interface SharedMemoryConfig {\n  poolId: string;\n  agentIds: string[];\n  permissions: Map<string, MemoryPermission[]>;\n  syncStrategy: 'immediate' | 'eventual' | 'manual';\n  conflictResolution?: 'latest' | 'merge' | 'prompt';\n}\n\n/**\n * Memory archival strategy\n */\nexport interface ArchivalStrategy {\n  type: 'compression' | 'summarization' | 'hierarchical';\n  triggerAge?: number; // Days before archival\n  triggerCount?: number; // Number of memories before archival\n  compressionLevel?: number; // 0-1 (0 = lossless, 1 = maximum compression)\n}\n\n/**\n * Metadata for a memory provider\n */\nexport interface MemoryProviderMetadata {\n  /**\n   * Unique identifier for the memory provider\n   */\n  id: string;\n\n  /**\n   * Human-readable name for the memory provider\n   */\n  name: string;\n\n  /**\n   * Description of the memory provider\n   */\n  description: string;\n\n  /**\n   * Version of the memory provider\n   */\n  version: string;\n\n  /**\n   * Author of the memory provider\n   */\n  author: string;\n\n  /**\n   * Whether the memory provider supports vector search\n   */\n  supportsVectorSearch: boolean;\n\n  /**\n   * Whether the memory provider is persistent (survives restarts)\n   */\n  isPersistent: boolean;\n\n  /**\n   * Supported memory tiers\n   */\n  supportedTiers?: MemoryTierType[];\n\n  /**\n   * Whether the provider supports shared memory pools\n   */\n  supportsSharedMemory?: boolean;\n}\n\n/**\n * Factory function for creating a memory provider\n */\nexport type MemoryProviderFactory = (config: any) => MemoryProvider;\n\n/**\n * Configuration for a memory provider\n */\nexport interface MemoryProviderConfig {\n  /**\n   * The type of memory provider\n   */\n  provider: string;\n\n  /**\n   * The maximum number of records to keep\n   */\n  maxRecords: number;\n\n  /**\n   * The embedding model to use for vector search\n   */\n  embeddingModel: string;\n\n  /**\n   * The number of days to retain memories\n   */\n  retentionDays: number;\n\n  /**\n   * Memory tier configurations\n   */\n  tiers?: MemoryTier[];\n\n  /**\n   * Shared memory pool configuration\n   */\n  sharedMemory?: SharedMemoryConfig;\n\n  /**\n   * Archival strategies\n   */\n  archival?: ArchivalStrategy[];\n\n  /**\n   * Provider-specific configuration\n   */\n  [key: string]: any;\n}\n\n/**\n * Search query types for advanced memory search\n */\nexport enum SearchQueryType {\n  SEMANTIC = 'semantic',\n  KEYWORD = 'keyword',\n  HYBRID = 'hybrid',\n  RELATIONAL = 'relational',\n  TEMPORAL = 'temporal',\n  CONCEPTUAL = 'conceptual',\n  MULTI_MODAL = 'multi_modal',\n}\n\n/**\n * Search query interface\n */\nexport interface SearchQuery {\n  type: SearchQueryType;\n  query: string;\n  filters?: Record<string, any>;\n  boost?: BoostFactors;\n  boostFactors?: BoostFactors;\n  timeRange?: TimeRange;\n  limit?: number;\n  offset?: number;\n  threshold?: number;\n  embedding?: number[];\n  conceptualDepth?: number;\n  expandQuery?: boolean;\n}\n\n/**\n * Search result interface\n */\nexport interface SearchResult {\n  record: MemoryRecord;\n  memory?: MemoryRecord; // Backward compatibility alias\n  score: number;\n  highlights?: string[];\n  reason?: string;\n  keywordScore?: number;\n  semanticScore?: number;\n  explanations?: string[];\n  conceptMatches?: string[];\n  relationshipPaths?: string[];\n}\n\n/**\n * Boost factors for search ranking\n */\nexport interface BoostFactors {\n  importance?: number;\n  recency?: number;\n  frequency?: number;\n  emotional?: number;\n  semantic?: number;\n}\n\n/**\n * Time range for temporal searches\n */\nexport interface TimeRange {\n  start?: Date;\n  end?: Date;\n  relative?: {\n    value: number;\n    unit: 'minutes' | 'hours' | 'days' | 'weeks' | 'months' | 'years';\n  };\n}\n\n/**\n * Memory relationship types\n */\nexport enum MemoryRelationshipType {\n  CAUSAL = 'causal',\n  TEMPORAL = 'temporal',\n  SEMANTIC = 'semantic',\n  HIERARCHICAL = 'hierarchical',\n  ASSOCIATIVE = 'associative',\n}\n\n/**\n * Memory relationship interface\n */\nexport interface MemoryRelationship {\n  id: string;\n  type: MemoryRelationshipType;\n  sourceId: string;\n  sourceMemoryId?: string; // Alias for sourceId\n  targetId: string;\n  targetMemoryId?: string; // Alias for targetId\n  strength: number;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Memory management policy interface\n */\nexport interface MemoryManagementPolicy {\n  id: string;\n  type?: string;\n  name: string;\n  description: string;\n  conditions: PolicyCondition[];\n  actions: PolicyAction[];\n  priority: number;\n  enabled: boolean;\n}\n\n/**\n * Memory management policy configuration\n */\nexport interface MemoryPolicyConfig {\n  policies: MemoryManagementPolicy[];\n  defaultRetentionDays: number;\n  maxMemoriesPerTier: Record<MemoryTierType, number>;\n  compressionEnabled: boolean;\n  archivalEnabled: boolean;\n  decayRate?: number;\n  accessBoost?: number;\n  importanceThreshold?: number;\n  decayFunction?: string;\n  priorityFactors?: Record<string, number>;\n  summaryMethod?: string;\n  preserveOriginal?: boolean;\n  priorityThreshold?: number;\n  minClusterSize?: number;\n}\n\n/**\n * Policy condition interface\n */\nexport interface PolicyCondition {\n  type: 'age' | 'importance' | 'frequency' | 'tier' | 'size';\n  operator: 'gt' | 'lt' | 'eq' | 'gte' | 'lte';\n  value: number | string;\n}\n\n/**\n * Policy action interface\n */\nexport interface PolicyAction {\n  type: 'archive' | 'compress' | 'delete' | 'move_tier';\n  parameters?: Record<string, any>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/modules/cognition.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[844,847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[844,847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3313,3316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3313,3316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":225,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3655,3658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3655,3658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":290,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":290,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4513,4516],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4513,4516],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Cognition module-specific types for advanced reasoning and thought processing\n */\n\nimport { EmotionState } from '../emotion';\n\n/**\n * Represents a single node in a thought graph\n */\nexport interface ThoughtNode {\n  /**\n   * Unique identifier for the thought node\n   */\n  id: string;\n\n  /**\n   * The actual content/representation of the thought\n   */\n  content: string;\n\n  /**\n   * Confidence level in this thought (0-1)\n   */\n  confidence: number;\n\n  /**\n   * Type of thought node for categorization\n   */\n  type?: 'observation' | 'inference' | 'hypothesis' | 'conclusion' | 'question';\n\n  /**\n   * Connections to other thought nodes\n   */\n  connections: ThoughtConnection[];\n\n  /**\n   * Timestamp when this thought was created\n   */\n  timestamp: Date;\n\n  /**\n   * Metadata associated with this thought\n   */\n  metadata?: Record<string, any>;\n}\n\n/**\n * Connection between thought nodes\n */\nexport interface ThoughtConnection {\n  /**\n   * Target thought node ID\n   */\n  targetId: string;\n\n  /**\n   * Type of connection/relationship\n   */\n  type:\n    | 'supports'\n    | 'contradicts'\n    | 'leads_to'\n    | 'derives_from'\n    | 'similar_to'\n    | 'related_to';\n\n  /**\n   * Strength of the connection (0-1)\n   */\n  strength: number;\n\n  /**\n   * Optional reasoning for this connection\n   */\n  reasoning?: string;\n}\n\n/**\n * Represents a path of reasoning through multiple thoughts\n */\nexport interface ReasoningPath {\n  /**\n   * Unique identifier for this reasoning path\n   */\n  id: string;\n\n  /**\n   * Ordered steps in the reasoning process\n   */\n  steps: ReasoningStep[];\n\n  /**\n   * Overall probability of this reasoning path being correct (0-1)\n   */\n  probability: number;\n\n  /**\n   * The expected outcome if this path is followed\n   */\n  outcome: string;\n\n  /**\n   * Evaluation metrics for this path\n   */\n  evaluation?: PathEvaluation;\n\n  /**\n   * Alternative paths considered\n   */\n  alternatives?: string[];\n}\n\n/**\n * Single step in a reasoning path\n */\nexport interface ReasoningStep {\n  /**\n   * Step number in the sequence\n   */\n  stepNumber: number;\n\n  /**\n   * Thought node at this step\n   */\n  thoughtNodeId: string;\n\n  /**\n   * Action or inference made at this step\n   */\n  action: string;\n\n  /**\n   * Justification for this step\n   */\n  justification: string;\n\n  /**\n   * Confidence in this specific step (0-1)\n   */\n  confidence: number;\n\n  /**\n   * Dependencies on previous steps\n   */\n  dependencies: number[];\n}\n\n/**\n * Evaluation metrics for a reasoning path\n */\nexport interface PathEvaluation {\n  /**\n   * Logical consistency score (0-1)\n   */\n  consistency: number;\n\n  /**\n   * Completeness of reasoning (0-1)\n   */\n  completeness: number;\n\n  /**\n   * Efficiency score (0-1)\n   */\n  efficiency: number;\n\n  /**\n   * Risk assessment\n   */\n  risk: 'low' | 'medium' | 'high';\n}\n\n/**\n * Result of executing a plan\n */\nexport interface PlanExecutionResult {\n  /**\n   * Overall execution status\n   */\n  status: 'completed' | 'partial' | 'failed' | 'cancelled';\n\n  /**\n   * Steps that were successfully completed\n   */\n  completedSteps: CompletedStep[];\n\n  /**\n   * Steps that failed or were skipped\n   */\n  failedSteps?: FailedStep[];\n\n  /**\n   * Errors encountered during execution\n   */\n  errors: ExecutionError[];\n\n  /**\n   * Final state after execution\n   */\n  finalState?: Record<string, any>;\n\n  /**\n   * Execution metrics\n   */\n  metrics: ExecutionMetrics;\n\n  /**\n   * Lessons learned for future planning\n   */\n  learnings?: LearningItem[];\n}\n\n/**\n * A successfully completed plan step\n */\nexport interface CompletedStep {\n  /**\n   * Step identifier\n   */\n  stepId: string;\n\n  /**\n   * Actual result of the step\n   */\n  result: any;\n\n  /**\n   * Time taken to complete\n   */\n  duration: number;\n\n  /**\n   * Resources consumed\n   */\n  resourcesUsed?: Record<string, number>;\n}\n\n/**\n * A failed plan step\n */\nexport interface FailedStep {\n  /**\n   * Step identifier\n   */\n  stepId: string;\n\n  /**\n   * Reason for failure\n   */\n  reason: string;\n\n  /**\n   * Error details if applicable\n   */\n  error?: ExecutionError;\n\n  /**\n   * Whether this failure was recoverable\n   */\n  recoverable: boolean;\n}\n\n/**\n * Error during plan execution\n */\nexport interface ExecutionError {\n  /**\n   * Error code for categorization\n   */\n  code: string;\n\n  /**\n   * Human-readable error message\n   */\n  message: string;\n\n  /**\n   * Step where error occurred\n   */\n  stepId?: string;\n\n  /**\n   * Stack trace if available\n   */\n  stack?: string;\n\n  /**\n   * Additional context\n   */\n  context?: Record<string, any>;\n}\n\n/**\n * Metrics for plan execution\n */\nexport interface ExecutionMetrics {\n  /**\n   * Total execution time in milliseconds\n   */\n  totalDuration: number;\n\n  /**\n   * Number of steps completed\n   */\n  stepsCompleted: number;\n\n  /**\n   * Number of steps failed\n   */\n  stepsFailed: number;\n\n  /**\n   * Success rate (0-1)\n   */\n  successRate: number;\n\n  /**\n   * Resource efficiency (0-1)\n   */\n  efficiency: number;\n}\n\n/**\n * Item learned from execution\n */\nexport interface LearningItem {\n  /**\n   * Type of learning\n   */\n  type: 'optimization' | 'failure_pattern' | 'success_pattern' | 'constraint';\n\n  /**\n   * What was learned\n   */\n  insight: string;\n\n  /**\n   * Confidence in this learning (0-1)\n   */\n  confidence: number;\n\n  /**\n   * How to apply this learning\n   */\n  application?: string;\n}\n\n/**\n * Matrix for complex decision making\n */\nexport interface DecisionMatrix {\n  /**\n   * Available options to choose from\n   */\n  options: DecisionOption[];\n\n  /**\n   * Criteria for evaluation\n   */\n  criteria: DecisionCriterion[];\n\n  /**\n   * Weights for each criterion (must sum to 1)\n   */\n  weights: Record<string, number>;\n\n  /**\n   * Scores for each option-criterion pair\n   */\n  scores: DecisionScore[][];\n\n  /**\n   * Analysis method used\n   */\n  method: 'weighted_sum' | 'ahp' | 'topsis' | 'electre';\n\n  /**\n   * Final rankings\n   */\n  rankings?: OptionRanking[];\n}\n\n/**\n * An option in the decision matrix\n */\nexport interface DecisionOption {\n  /**\n   * Unique identifier\n   */\n  id: string;\n\n  /**\n   * Name of the option\n   */\n  name: string;\n\n  /**\n   * Detailed description\n   */\n  description: string;\n\n  /**\n   * Constraints or requirements\n   */\n  constraints?: string[];\n\n  /**\n   * Estimated cost/resources\n   */\n  cost?: number;\n}\n\n/**\n * A criterion for decision evaluation\n */\nexport interface DecisionCriterion {\n  /**\n   * Unique identifier\n   */\n  id: string;\n\n  /**\n   * Name of the criterion\n   */\n  name: string;\n\n  /**\n   * Type of criterion\n   */\n  type: 'benefit' | 'cost'; // benefit = higher is better, cost = lower is better\n\n  /**\n   * Unit of measurement\n   */\n  unit?: string;\n\n  /**\n   * Whether this is a hard constraint\n   */\n  isConstraint?: boolean;\n}\n\n/**\n * Score for a specific option-criterion pair\n */\nexport interface DecisionScore {\n  /**\n   * Raw value\n   */\n  value: number;\n\n  /**\n   * Normalized score (0-1)\n   */\n  normalized: number;\n\n  /**\n   * Confidence in this score\n   */\n  confidence: number;\n\n  /**\n   * Justification for the score\n   */\n  justification?: string;\n}\n\n/**\n * Final ranking of an option\n */\nexport interface OptionRanking {\n  /**\n   * Option ID\n   */\n  optionId: string;\n\n  /**\n   * Rank (1 = best)\n   */\n  rank: number;\n\n  /**\n   * Final weighted score\n   */\n  score: number;\n\n  /**\n   * Strengths of this option\n   */\n  strengths: string[];\n\n  /**\n   * Weaknesses of this option\n   */\n  weaknesses: string[];\n}\n\n/**\n * Outcome of a learning process\n */\nexport interface LearningOutcome {\n  /**\n   * The concept that was learned\n   */\n  concept: string;\n\n  /**\n   * Category of the concept\n   */\n  category: 'fact' | 'skill' | 'pattern' | 'rule' | 'strategy';\n\n  /**\n   * Current confidence in this knowledge (0-1)\n   */\n  confidence: number;\n\n  /**\n   * Retention strength (0-1, decreases over time)\n   */\n  retention: number;\n\n  /**\n   * Number of times this has been reinforced\n   */\n  reinforcements: number;\n\n  /**\n   * When this was first learned\n   */\n  learnedAt: Date;\n\n  /**\n   * Last time this was accessed/used\n   */\n  lastAccessed: Date;\n\n  /**\n   * Related concepts\n   */\n  relatedConcepts: string[];\n\n  /**\n   * Examples that demonstrate this concept\n   */\n  examples?: Example[];\n\n  /**\n   * Prerequisites needed to understand this\n   */\n  prerequisites?: string[];\n}\n\n/**\n * Example demonstrating a concept\n */\nexport interface Example {\n  /**\n   * Example content\n   */\n  content: string;\n\n  /**\n   * Context where this applies\n   */\n  context: string;\n\n  /**\n   * Whether this is a positive or negative example\n   */\n  type: 'positive' | 'negative';\n\n  /**\n   * Explanation of why this is a good/bad example\n   */\n  explanation?: string;\n}\n\n/**\n * Enhanced thought result with structured components\n */\nexport interface StructuredThoughtResult {\n  /**\n   * Graph of interconnected thoughts\n   */\n  thoughtGraph: ThoughtNode[];\n\n  /**\n   * Primary reasoning paths considered\n   */\n  reasoningPaths: ReasoningPath[];\n\n  /**\n   * Decision matrix if applicable\n   */\n  decisionMatrix?: DecisionMatrix;\n\n  /**\n   * Learning outcomes from this thinking session\n   */\n  learnings: LearningOutcome[];\n\n  /**\n   * Emotional context\n   */\n  emotionalContext: EmotionState;\n\n  /**\n   * Meta-cognitive assessment\n   */\n  metaCognition: MetaCognition;\n}\n\n/**\n * Meta-cognitive assessment of thinking quality\n */\nexport interface MetaCognition {\n  /**\n   * Self-assessed quality of reasoning (0-1)\n   */\n  reasoningQuality: number;\n\n  /**\n   * Identified biases in thinking\n   */\n  identifiedBiases: string[];\n\n  /**\n   * Uncertainty areas\n   */\n  uncertainties: Uncertainty[];\n\n  /**\n   * Suggested improvements\n   */\n  improvements: string[];\n}\n\n/**\n * Area of uncertainty in reasoning\n */\nexport interface Uncertainty {\n  /**\n   * What is uncertain\n   */\n  area: string;\n\n  /**\n   * Level of uncertainty\n   */\n  level: 'low' | 'medium' | 'high';\n\n  /**\n   * Impact on conclusions\n   */\n  impact: 'minimal' | 'moderate' | 'significant';\n\n  /**\n   * How to resolve this uncertainty\n   */\n  resolutionStrategy?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/modules/database.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[392,395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[392,395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[419,422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[419,422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[612,615],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[612,615],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[970,973],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[970,973],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[997,1000],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[997,1000],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":240,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5501,5504],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5501,5504],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":240,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5515,5518],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5515,5518],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":273,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6090,6093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6090,6093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Database Type Definitions\n * Provides comprehensive type safety for database operations\n */\n\n/**\n * Database connection interface\n */\nexport interface DatabaseConnection {\n  id: string;\n  host: string;\n  port: number;\n  database: string;\n  user: string;\n  connected: boolean;\n  ssl?: boolean;\n  pooled?: boolean;\n\n  connect(): Promise<void>;\n  disconnect(): Promise<void>;\n  query<T = any>(sql: string, params?: any[]): Promise<QueryResult<T>>;\n  beginTransaction(): Promise<TransactionScope>;\n  isHealthy(): Promise<boolean>;\n}\n\n/**\n * Generic query result interface\n */\nexport interface QueryResult<T = any> {\n  rows: T[];\n  rowCount: number;\n  fields?: Array<{\n    name: string;\n    dataType: string;\n    nullable: boolean;\n  }>;\n  command?: string;\n  duration?: number;\n}\n\n/**\n * Transaction scope interface\n */\nexport interface TransactionScope {\n  id: string;\n  connection: DatabaseConnection;\n  inTransaction: boolean;\n  savepoints: string[];\n\n  query<T = any>(sql: string, params?: any[]): Promise<QueryResult<T>>;\n  commit(): Promise<void>;\n  rollback(): Promise<void>;\n  savepoint(name: string): Promise<void>;\n  releaseSavepoint(name: string): Promise<void>;\n  rollbackToSavepoint(name: string): Promise<void>;\n}\n\n/**\n * Connection pool interface\n */\nexport interface ConnectionPool {\n  name: string;\n  size: number;\n  activeConnections: number;\n  idleConnections: number;\n  waitingClients: number;\n\n  acquire(): Promise<DatabaseConnection>;\n  release(connection: DatabaseConnection): Promise<void>;\n  drain(): Promise<void>;\n  getStats(): PoolStatistics;\n}\n\n/**\n * Pool statistics\n */\nexport interface PoolStatistics {\n  totalConnections: number;\n  activeConnections: number;\n  idleConnections: number;\n  waitingClients: number;\n  totalRequests: number;\n  totalErrors: number;\n  averageWaitTime: number;\n  peakConnections: number;\n  lastActivity: Date;\n}\n\n/**\n * Database error class with specific error types\n */\nexport class DatabaseError extends Error {\n  public readonly code: string;\n  public readonly severity: 'low' | 'medium' | 'high' | 'critical';\n  public readonly isRetryable: boolean;\n  public readonly originalError?: Error;\n  public readonly context?: Record<string, unknown>;\n\n  constructor(\n    message: string,\n    code: string,\n    severity: 'low' | 'medium' | 'high' | 'critical' = 'medium',\n    isRetryable: boolean = false,\n    originalError?: Error,\n    context?: Record<string, unknown>\n  ) {\n    super(message);\n    this.name = 'DatabaseError';\n    this.code = code;\n    this.severity = severity;\n    this.isRetryable = isRetryable;\n    this.originalError = originalError;\n    this.context = context;\n\n    // Maintains proper stack trace for where our error was thrown\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, DatabaseError);\n    }\n  }\n\n  /**\n   * Common database error codes\n   */\n  static readonly ErrorCodes = {\n    CONNECTION_FAILED: 'DB_CONNECTION_FAILED',\n    CONNECTION_LOST: 'DB_CONNECTION_LOST',\n    QUERY_FAILED: 'DB_QUERY_FAILED',\n    TRANSACTION_FAILED: 'DB_TRANSACTION_FAILED',\n    TIMEOUT: 'DB_TIMEOUT',\n    POOL_EXHAUSTED: 'DB_POOL_EXHAUSTED',\n    INVALID_QUERY: 'DB_INVALID_QUERY',\n    CONSTRAINT_VIOLATION: 'DB_CONSTRAINT_VIOLATION',\n    DEADLOCK: 'DB_DEADLOCK',\n    DATA_INTEGRITY: 'DB_DATA_INTEGRITY',\n    MIGRATION_FAILED: 'DB_MIGRATION_FAILED',\n    UNKNOWN: 'DB_UNKNOWN_ERROR',\n  } as const;\n\n  /**\n   * Factory methods for common database errors\n   */\n  static connectionFailed(\n    message: string,\n    originalError?: Error\n  ): DatabaseError {\n    return new DatabaseError(\n      message,\n      DatabaseError.ErrorCodes.CONNECTION_FAILED,\n      'critical',\n      true,\n      originalError\n    );\n  }\n\n  static queryFailed(\n    message: string,\n    query?: string,\n    originalError?: Error\n  ): DatabaseError {\n    return new DatabaseError(\n      message,\n      DatabaseError.ErrorCodes.QUERY_FAILED,\n      'high',\n      false,\n      originalError,\n      { query }\n    );\n  }\n\n  static timeout(operation: string, timeout: number): DatabaseError {\n    return new DatabaseError(\n      `Database operation '${operation}' timed out after ${timeout}ms`,\n      DatabaseError.ErrorCodes.TIMEOUT,\n      'high',\n      true,\n      undefined,\n      { operation, timeout }\n    );\n  }\n\n  static poolExhausted(waitTime: number): DatabaseError {\n    return new DatabaseError(\n      `Connection pool exhausted after waiting ${waitTime}ms`,\n      DatabaseError.ErrorCodes.POOL_EXHAUSTED,\n      'high',\n      true,\n      undefined,\n      { waitTime }\n    );\n  }\n}\n\n/**\n * Database migration interface\n */\nexport interface DatabaseMigration {\n  id: string;\n  version: string;\n  name: string;\n  up: string | ((connection: DatabaseConnection) => Promise<void>);\n  down: string | ((connection: DatabaseConnection) => Promise<void>);\n  timestamp: Date;\n}\n\n/**\n * Database configuration\n */\nexport interface DatabaseConfig {\n  type: 'sqlite' | 'postgres' | 'mysql' | 'neon' | 'supabase';\n  connectionString?: string;\n  host?: string;\n  port?: number;\n  database?: string;\n  user?: string;\n  password?: string;\n  ssl?:\n    | boolean\n    | {\n        rejectUnauthorized?: boolean;\n        ca?: string;\n        cert?: string;\n        key?: string;\n      };\n  pool?: {\n    min?: number;\n    max?: number;\n    idleTimeoutMillis?: number;\n    connectionTimeoutMillis?: number;\n  };\n}\n\n/**\n * Prepared statement interface\n */\nexport interface PreparedStatement {\n  name: string;\n  text: string;\n  paramTypes?: string[];\n\n  execute<T = any>(params?: any[]): Promise<QueryResult<T>>;\n  deallocate(): Promise<void>;\n}\n\n/**\n * Database metadata\n */\nexport interface DatabaseMetadata {\n  version: string;\n  tables: TableMetadata[];\n  indexes: IndexMetadata[];\n  constraints: ConstraintMetadata[];\n}\n\n/**\n * Table metadata\n */\nexport interface TableMetadata {\n  name: string;\n  schema?: string;\n  columns: ColumnMetadata[];\n  primaryKey?: string[];\n  rowCount?: number;\n  sizeBytes?: number;\n}\n\n/**\n * Column metadata\n */\nexport interface ColumnMetadata {\n  name: string;\n  dataType: string;\n  nullable: boolean;\n  defaultValue?: any;\n  maxLength?: number;\n  precision?: number;\n  scale?: number;\n}\n\n/**\n * Index metadata\n */\nexport interface IndexMetadata {\n  name: string;\n  table: string;\n  columns: string[];\n  unique: boolean;\n  type: string;\n  sizeBytes?: number;\n}\n\n/**\n * Constraint metadata\n */\nexport interface ConstraintMetadata {\n  name: string;\n  table: string;\n  type: 'primary' | 'foreign' | 'unique' | 'check';\n  columns: string[];\n  referencedTable?: string;\n  referencedColumns?: string[];\n  definition?: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/modules/emotions.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EmotionRecord' is defined but never used.","line":8,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":474,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":474,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7680,7683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7680,7683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":496,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":496,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8106,8109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8106,8109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":512,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":512,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8443,8446],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8443,8446],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":513,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":513,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8490,8493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8490,8493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":514,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":514,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8539,8542],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8539,8542],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Emotion module types for SYMindX\n *\n * This file contains specific types for emotion processing,\n * triggers, modifiers, and transitions.\n */\n\nimport { EmotionState, EmotionRecord } from '../agent';\nimport { Context, Metadata } from '../common';\n\n/**\n * Event that triggers an emotion change\n */\nexport interface EmotionTriggerEvent {\n  /**\n   * Type of the trigger event\n   */\n  type: string;\n\n  /**\n   * Source of the trigger (e.g., 'user', 'system', 'environment')\n   */\n  source: string;\n\n  /**\n   * Intensity of the trigger (0.0 to 1.0)\n   */\n  intensity: number;\n\n  /**\n   * Optional context data for the trigger\n   */\n  context?: Context;\n\n  /**\n   * Timestamp when the trigger occurred\n   */\n  timestamp: Date;\n\n  /**\n   * Optional metadata about the trigger\n   */\n  metadata?: Metadata;\n}\n\n/**\n * Modifier that affects emotion intensity or behavior\n */\nexport interface EmotionModifier {\n  /**\n   * Multiplicative factor for emotion intensity\n   */\n  factor: number;\n\n  /**\n   * Duration in milliseconds\n   */\n  duration: number;\n\n  /**\n   * Reason for the modifier\n   */\n  reason: string;\n\n  /**\n   * Type of modifier (e.g., 'personality', 'context', 'social')\n   */\n  type?: string;\n\n  /**\n   * Whether this modifier stacks with others\n   */\n  stackable?: boolean;\n\n  /**\n   * Optional expiration timestamp\n   */\n  expiresAt?: Date;\n}\n\n/**\n * Transition between emotion states\n */\nexport interface EmotionTransition {\n  /**\n   * Starting emotion state\n   */\n  from: string;\n\n  /**\n   * Target emotion state\n   */\n  to: string;\n\n  /**\n   * Duration of transition in milliseconds\n   */\n  duration: number;\n\n  /**\n   * Easing function name or custom function\n   */\n  easing: string | ((t: number) => number);\n\n  /**\n   * Trigger that caused the transition\n   */\n  trigger?: EmotionTriggerEvent;\n\n  /**\n   * Progress of transition (0.0 to 1.0)\n   */\n  progress?: number;\n\n  /**\n   * Whether the transition can be interrupted\n   */\n  interruptible?: boolean;\n}\n\n/**\n * Result of blending multiple emotions\n */\nexport interface EmotionBlendResult {\n  /**\n   * Primary (dominant) emotion\n   */\n  primary: string;\n\n  /**\n   * Secondary emotion (if any)\n   */\n  secondary?: string;\n\n  /**\n   * Blend ratio between primary and secondary (0.0 to 1.0)\n   */\n  ratio: number;\n\n  /**\n   * Resulting blended emotion coordinates\n   */\n  coordinates: {\n    valence: number;\n    arousal: number;\n    dominance: number;\n  };\n\n  /**\n   * Overall intensity of the blend\n   */\n  intensity: number;\n\n  /**\n   * All contributing emotions with their weights\n   */\n  components: Array<{\n    emotion: string;\n    weight: number;\n    contribution: number;\n  }>;\n}\n\n/**\n * Entry in emotion history\n */\nexport interface EmotionHistoryEntry {\n  /**\n   * The emotion that was active\n   */\n  emotion: string;\n\n  /**\n   * Timestamp when this emotion became active\n   */\n  timestamp: Date;\n\n  /**\n   * What triggered this emotion\n   */\n  trigger: EmotionTriggerEvent;\n\n  /**\n   * Duration this emotion was active (in milliseconds)\n   */\n  duration?: number;\n\n  /**\n   * Peak intensity reached\n   */\n  peakIntensity: number;\n\n  /**\n   * Average intensity over duration\n   */\n  averageIntensity?: number;\n\n  /**\n   * Any modifiers that were active\n   */\n  modifiers?: EmotionModifier[];\n\n  /**\n   * Metadata about this emotion period\n   */\n  metadata?: Metadata;\n}\n\n/**\n * Result returned by emotion processing methods\n */\nexport interface EmotionResult {\n  /**\n   * The resulting emotion state\n   */\n  state: EmotionState;\n\n  /**\n   * Whether the emotion changed\n   */\n  changed: boolean;\n\n  /**\n   * Previous emotion (if changed)\n   */\n  previousEmotion?: string;\n\n  /**\n   * Any transitions that occurred\n   */\n  transitions?: EmotionTransition[];\n\n  /**\n   * Active modifiers\n   */\n  modifiers?: EmotionModifier[];\n\n  /**\n   * Blend result if multiple emotions are active\n   */\n  blendResult?: EmotionBlendResult;\n\n  /**\n   * Processing metadata\n   */\n  metadata?: {\n    processingTime: number;\n    triggersProcessed: number;\n    [key: string]: unknown;\n  };\n}\n\n/**\n * Emotion-specific data for different emotion types\n */\nexport interface EmotionData {\n  /**\n   * Base emotion data shared by all emotions\n   */\n  base: {\n    intensity: number;\n    triggers: string[];\n    modifiers: Record<string, number>;\n  };\n\n  /**\n   * Happy emotion specific data\n   */\n  happy?: {\n    joyLevel: number;\n    excitementFactor: number;\n    socialBonus: number;\n  };\n\n  /**\n   * Sad emotion specific data\n   */\n  sad?: {\n    griefLevel: number;\n    isolationFactor: number;\n    energyPenalty: number;\n  };\n\n  /**\n   * Angry emotion specific data\n   */\n  angry?: {\n    frustrationLevel: number;\n    aggressionFactor: number;\n    focusPenalty: number;\n  };\n\n  /**\n   * Anxious emotion specific data\n   */\n  anxious?: {\n    worryLevel: number;\n    tensionFactor: number;\n    uncertaintyLevel: number;\n  };\n\n  /**\n   * Confident emotion specific data\n   */\n  confident?: {\n    selfAssurance: number;\n    competenceFactor: number;\n    leadershipBonus: number;\n  };\n\n  /**\n   * Nostalgic emotion specific data\n   */\n  nostalgic?: {\n    reminiscenceLevel: number;\n    bittersweetFactor: number;\n    temporalDistance: number;\n  };\n\n  /**\n   * Empathetic emotion specific data\n   */\n  empathetic?: {\n    compassionLevel: number;\n    connectionFactor: number;\n    emotionalResonance: number;\n  };\n\n  /**\n   * Curious emotion specific data\n   */\n  curious?: {\n    wonderLevel: number;\n    explorationDrive: number;\n    knowledgeSeekingFactor: number;\n  };\n\n  /**\n   * Proud emotion specific data\n   */\n  proud?: {\n    achievementLevel: number;\n    satisfactionFactor: number;\n    socialStatusBonus: number;\n  };\n\n  /**\n   * Confused emotion specific data\n   */\n  confused?: {\n    uncertaintyLevel: number;\n    clarityPenalty: number;\n    processingOverload: number;\n  };\n\n  /**\n   * Neutral emotion specific data\n   */\n  neutral?: {\n    baseline: number;\n    stabilityFactor: number;\n  };\n}\n\n/**\n * Emotion calculation parameters\n */\nexport interface EmotionCalculation {\n  /**\n   * Base intensity before modifiers\n   */\n  baseIntensity: number;\n\n  /**\n   * All applied modifiers\n   */\n  modifiers: EmotionModifier[];\n\n  /**\n   * Final calculated intensity\n   */\n  finalIntensity: number;\n\n  /**\n   * Decay rate per minute\n   */\n  decayRate: number;\n\n  /**\n   * Growth rate when triggered\n   */\n  growthRate: number;\n\n  /**\n   * Inertia factor (resistance to change)\n   */\n  inertia: number;\n}\n\n/**\n * Event handler for emotion-related events\n */\nexport interface EmotionEventHandler {\n  /**\n   * Event type to handle\n   */\n  eventType: string;\n\n  /**\n   * Handler function\n   */\n  handler: (\n    event: EmotionTriggerEvent\n  ) => EmotionResult | Promise<EmotionResult>;\n\n  /**\n   * Priority for handler execution\n   */\n  priority?: number;\n\n  /**\n   * Whether this handler is enabled\n   */\n  enabled?: boolean;\n}\n\n/**\n * Configuration for emotion decay behavior\n */\nexport interface EmotionDecayConfig {\n  /**\n   * Base decay rate per minute\n   */\n  baseRate: number;\n\n  /**\n   * Minimum intensity (emotions don't decay below this)\n   */\n  minIntensity: number;\n\n  /**\n   * Whether decay is affected by personality\n   */\n  personalityAffected: boolean;\n\n  /**\n   * Custom decay function\n   */\n  customDecayFunction?: (currentIntensity: number, timeDelta: number) => number;\n}\n\n/**\n * Emotion module registration data\n */\nexport interface EmotionModuleRegistration {\n  /**\n   * Unique identifier for the emotion\n   */\n  id: string;\n\n  /**\n   * Display name\n   */\n  name: string;\n\n  /**\n   * Description of the emotion\n   */\n  description: string;\n\n  /**\n   * Factory function to create the module\n   */\n  factory: () => any;\n\n  /**\n   * Dependencies on other emotions\n   */\n  dependencies?: string[];\n\n  /**\n   * Whether this emotion is enabled by default\n   */\n  defaultEnabled?: boolean;\n}\n\n/**\n * Type guard for emotion results\n */\nexport function isEmotionResult(value: unknown): value is EmotionResult {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    'state' in value &&\n    'changed' in value &&\n    typeof (value as any).changed === 'boolean'\n  );\n}\n\n/**\n * Type guard for emotion trigger events\n */\nexport function isEmotionTriggerEvent(\n  value: unknown\n): value is EmotionTriggerEvent {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    'type' in value &&\n    'source' in value &&\n    'intensity' in value &&\n    typeof (value as any).type === 'string' &&\n    typeof (value as any).source === 'string' &&\n    typeof (value as any).intensity === 'number'\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/modules/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/modules/memory-providers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MemoryContext' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DatabaseConnection' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'QueryResult' is defined but never used.","line":9,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":41}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Memory Provider Type Definitions\n * Provides comprehensive type safety for memory provider implementations\n */\n\nimport { MemoryRecord } from '../agent.js';\nimport { MemoryContext } from '../memory.js';\n\nimport { DatabaseConnection, QueryResult, DatabaseError } from './database.js';\n\n/**\n * Search options for memory queries\n */\nexport interface SearchOptions {\n  query?: string;\n  filters?: {\n    type?: string[];\n    tags?: string[];\n    agentId?: string;\n    dateRange?: {\n      start?: Date;\n      end?: Date;\n    };\n    importance?: {\n      min?: number;\n      max?: number;\n    };\n  };\n  sort?: {\n    field: 'timestamp' | 'importance' | 'relevance';\n    order: 'asc' | 'desc';\n  };\n  limit?: number;\n  offset?: number;\n  includeEmbeddings?: boolean;\n}\n\n/**\n * Search result interface\n */\nexport interface SearchResult {\n  record: MemoryRecord;\n  score?: number;\n  highlights?: {\n    field: string;\n    snippet: string;\n  }[];\n}\n\n/**\n * Generic memory query result interface\n */\nexport interface MemoryQueryResult<T extends MemoryRecord = MemoryRecord> {\n  records: T[];\n  total: number;\n  offset: number;\n  limit: number;\n  metadata?: {\n    searchScore?: number;\n    executionTime?: number;\n    filters?: Record<string, unknown>;\n  };\n}\n\n/**\n * Memory batch operation for bulk operations\n */\nexport interface MemoryBatchOperation {\n  type: 'insert' | 'update' | 'delete';\n  records: MemoryRecord[];\n  options?: {\n    skipValidation?: boolean;\n    returnIds?: boolean;\n    onConflict?: 'ignore' | 'update' | 'error';\n  };\n}\n\n/**\n * Memory transaction interface for atomic operations\n */\nexport interface MemoryTransaction {\n  id: string;\n  operations: MemoryBatchOperation[];\n  status: 'pending' | 'committed' | 'rolled_back';\n  startTime: Date;\n  endTime?: Date;\n  error?: DatabaseError;\n}\n\n/**\n * Memory index configuration\n */\nexport interface MemoryIndexConfig {\n  name: string;\n  fields: string[];\n  type: 'btree' | 'hash' | 'gin' | 'gist' | 'fulltext';\n  unique?: boolean;\n  partial?: string; // SQL WHERE clause for partial indexes\n  include?: string[]; // Additional columns to include in index\n}\n\n/**\n * Memory migration result\n */\nexport interface MemoryMigrationResult {\n  success: boolean;\n  migrationsRun: string[];\n  currentVersion: string;\n  previousVersion: string;\n  duration: number;\n  errors?: DatabaseError[];\n}\n\n/**\n * Memory provider statistics\n */\nexport interface MemoryProviderStats {\n  totalRecords: number;\n  totalAgents: number;\n  oldestRecord?: Date;\n  newestRecord?: Date;\n  averageRecordSize?: number;\n  indexStats?: {\n    [indexName: string]: {\n      size: number;\n      usage: number;\n      lastUsed?: Date;\n    };\n  };\n}\n\n/**\n * Memory provider configuration base\n */\nexport interface MemoryProviderConfig {\n  type: 'sqlite' | 'postgres' | 'neon' | 'supabase';\n  connectionString?: string;\n  poolSize?: number;\n  idleTimeout?: number;\n  connectionTimeout?: number;\n  ssl?:\n    | boolean\n    | {\n        rejectUnauthorized?: boolean;\n        ca?: string;\n        cert?: string;\n        key?: string;\n      };\n  migrations?: {\n    directory?: string;\n    tableName?: string;\n    autoRun?: boolean;\n  };\n}\n\n/**\n * Memory archival configuration\n */\nexport interface MemoryArchivalConfig {\n  enabled: boolean;\n  threshold: number; // Days before archiving\n  batchSize: number;\n  schedule?: string; // Cron expression\n  destination?: 'cold_storage' | 'compressed' | 'external';\n}\n\n/**\n * Memory search capabilities\n */\nexport interface MemorySearchCapabilities {\n  fullText: boolean;\n  semantic: boolean;\n  fuzzy: boolean;\n  regex: boolean;\n  temporal: boolean;\n  spatial: boolean;\n  aggregation: boolean;\n}\n\n/**\n * Extended search options for advanced queries\n */\nexport interface ExtendedSearchOptions extends SearchOptions {\n  aggregations?: {\n    [key: string]: {\n      type: 'count' | 'sum' | 'avg' | 'min' | 'max';\n      field: string;\n      groupBy?: string[];\n    };\n  };\n  facets?: string[];\n  highlight?: {\n    fields: string[];\n    preTag?: string;\n    postTag?: string;\n  };\n}\n\n/**\n * Memory provider lifecycle hooks\n */\nexport interface MemoryProviderHooks {\n  beforeStore?: (record: MemoryRecord) => Promise<MemoryRecord>;\n  afterStore?: (record: MemoryRecord) => Promise<void>;\n  beforeRetrieve?: (id: string) => Promise<void>;\n  afterRetrieve?: (record: MemoryRecord) => Promise<MemoryRecord>;\n  beforeDelete?: (id: string) => Promise<boolean>;\n  afterDelete?: (id: string) => Promise<void>;\n}\n\n/**\n * Memory provider connection state\n */\nexport interface MemoryProviderConnectionState {\n  connected: boolean;\n  lastConnected?: Date;\n  lastError?: DatabaseError;\n  reconnectAttempts: number;\n  activeConnections: number;\n  idleConnections: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/modules/planning.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1449,1452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1449,1452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1796,1799],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1796,1799],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2285,2288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2285,2288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Planning-specific types for HTN and PDDL planning systems\n */\n\n/**\n * HTN (Hierarchical Task Network) Operator\n */\nexport interface HTNOperator {\n  /**\n   * Unique identifier for the operator\n   */\n  id: string;\n\n  /**\n   * Name of the operator\n   */\n  name: string;\n\n  /**\n   * Type of operator\n   */\n  type: 'primitive' | 'compound' | 'method';\n\n  /**\n   * Preconditions that must be satisfied\n   */\n  preconditions: HTNPrecondition[];\n\n  /**\n   * Effects of applying this operator\n   */\n  effects: HTNEffect[];\n\n  /**\n   * Cost of applying this operator\n   */\n  cost: number;\n\n  /**\n   * Parameters required by this operator\n   */\n  parameters?: HTNParameter[];\n\n  /**\n   * For compound operators, the decomposition\n   */\n  decomposition?: HTNDecomposition;\n\n  /**\n   * Constraints on when this can be applied\n   */\n  constraints?: HTNConstraint[];\n\n  /**\n   * Priority relative to other operators\n   */\n  priority?: number;\n}\n\n/**\n * HTN Precondition\n */\nexport interface HTNPrecondition {\n  /**\n   * Type of precondition\n   */\n  type: 'state' | 'resource' | 'temporal' | 'knowledge';\n\n  /**\n   * The predicate or condition name\n   */\n  predicate: string;\n\n  /**\n   * Parameters for the precondition\n   */\n  parameters: string[];\n\n  /**\n   * Whether this condition must be true or false\n   */\n  positive: boolean;\n\n  /**\n   * Optional value comparison\n   */\n  comparison?: {\n    operator: '=' | '!=' | '<' | '>' | '<=' | '>=';\n    value: any;\n  };\n}\n\n/**\n * HTN Effect\n */\nexport interface HTNEffect {\n  /**\n   * Type of effect\n   */\n  type: 'add' | 'delete' | 'update' | 'resource';\n\n  /**\n   * The predicate or state affected\n   */\n  predicate: string;\n\n  /**\n   * Parameters for the effect\n   */\n  parameters: string[];\n\n  /**\n   * For update effects, the new value\n   */\n  value?: any;\n\n  /**\n   * Probability of this effect occurring (default 1.0)\n   */\n  probability?: number;\n\n  /**\n   * Conditions under which this effect applies\n   */\n  conditions?: HTNPrecondition[];\n}\n\n/**\n * HTN Parameter\n */\nexport interface HTNParameter {\n  /**\n   * Parameter name\n   */\n  name: string;\n\n  /**\n   * Parameter type\n   */\n  type: string;\n\n  /**\n   * Whether this parameter is required\n   */\n  required: boolean;\n\n  /**\n   * Default value if not required\n   */\n  defaultValue?: any;\n\n  /**\n   * Constraints on valid values\n   */\n  constraints?: string[];\n}\n\n/**\n * HTN Decomposition for compound tasks\n */\nexport interface HTNDecomposition {\n  /**\n   * Method name\n   */\n  method: string;\n\n  /**\n   * Ordered subtasks\n   */\n  subtasks: HTNSubtask[];\n\n  /**\n   * Ordering constraints between subtasks\n   */\n  ordering: HTNOrdering[];\n\n  /**\n   * Variable bindings\n   */\n  bindings?: Record<string, string>;\n}\n\n/**\n * HTN Subtask\n */\nexport interface HTNSubtask {\n  /**\n   * Unique ID within the decomposition\n   */\n  id: string;\n\n  /**\n   * Task name\n   */\n  task: string;\n\n  /**\n   * Parameters for the task\n   */\n  parameters: string[];\n\n  /**\n   * Whether this subtask is optional\n   */\n  optional?: boolean;\n}\n\n/**\n * HTN Ordering constraint\n */\nexport interface HTNOrdering {\n  /**\n   * Type of ordering\n   */\n  type: 'before' | 'after' | 'parallel' | 'choice';\n\n  /**\n   * First task ID\n   */\n  first: string;\n\n  /**\n   * Second task ID\n   */\n  second: string;\n\n  /**\n   * Optional delay between tasks\n   */\n  delay?: number;\n}\n\n/**\n * HTN Constraint\n */\nexport interface HTNConstraint {\n  /**\n   * Type of constraint\n   */\n  type: 'temporal' | 'resource' | 'binding' | 'mutual_exclusion';\n\n  /**\n   * Description of the constraint\n   */\n  description: string;\n\n  /**\n   * Constraint expression\n   */\n  expression: string;\n\n  /**\n   * Whether this is a hard constraint\n   */\n  hard: boolean;\n}\n\n/**\n * PDDL Domain definition\n */\nexport interface PDDLDomain {\n  /**\n   * Domain name\n   */\n  name: string;\n\n  /**\n   * Required PDDL features\n   */\n  requirements: PDDLRequirement[];\n\n  /**\n   * Type hierarchy\n   */\n  types: PDDLType[];\n\n  /**\n   * Constants in the domain\n   */\n  constants?: PDDLConstant[];\n\n  /**\n   * Predicates available\n   */\n  predicates: PDDLPredicate[];\n\n  /**\n   * Functions for numeric planning\n   */\n  functions?: PDDLFunction[];\n\n  /**\n   * Actions that can be performed\n   */\n  actions: PDDLAction[];\n\n  /**\n   * Axioms/derived predicates\n   */\n  axioms?: PDDLAxiom[];\n\n  /**\n   * Domain constraints\n   */\n  constraints?: PDDLConstraint[];\n}\n\n/**\n * PDDL Requirement\n */\nexport type PDDLRequirement =\n  | ':strips'\n  | ':typing'\n  | ':negative-preconditions'\n  | ':disjunctive-preconditions'\n  | ':equality'\n  | ':existential-preconditions'\n  | ':universal-preconditions'\n  | ':conditional-effects'\n  | ':fluents'\n  | ':numeric-fluents'\n  | ':durative-actions'\n  | ':timed-initial-literals'\n  | ':constraints'\n  | ':preferences';\n\n/**\n * PDDL Type\n */\nexport interface PDDLType {\n  /**\n   * Type name\n   */\n  name: string;\n\n  /**\n   * Parent type (for type hierarchy)\n   */\n  parent?: string;\n\n  /**\n   * Whether this is a primitive type\n   */\n  primitive?: boolean;\n}\n\n/**\n * PDDL Constant\n */\nexport interface PDDLConstant {\n  /**\n   * Constant name\n   */\n  name: string;\n\n  /**\n   * Type of the constant\n   */\n  type: string;\n}\n\n/**\n * Enhanced PDDL Predicate\n */\nexport interface PDDLPredicate {\n  /**\n   * Predicate name\n   */\n  name: string;\n\n  /**\n   * Parameters with types\n   */\n  parameters: PDDLTypedParameter[];\n\n  /**\n   * Documentation\n   */\n  description?: string;\n}\n\n/**\n * PDDL Typed Parameter\n */\nexport interface PDDLTypedParameter {\n  /**\n   * Parameter variable name\n   */\n  name: string;\n\n  /**\n   * Parameter type\n   */\n  type: string;\n\n  /**\n   * Whether this parameter is optional\n   */\n  optional?: boolean;\n}\n\n/**\n * PDDL Function for numeric planning\n */\nexport interface PDDLFunction {\n  /**\n   * Function name\n   */\n  name: string;\n\n  /**\n   * Parameters\n   */\n  parameters: PDDLTypedParameter[];\n\n  /**\n   * Return type (usually 'number')\n   */\n  returnType: string;\n\n  /**\n   * Initial value expression\n   */\n  initialValue?: string;\n}\n\n/**\n * Enhanced PDDL Action\n */\nexport interface PDDLAction {\n  /**\n   * Action name\n   */\n  name: string;\n\n  /**\n   * Action parameters\n   */\n  parameters: PDDLTypedParameter[];\n\n  /**\n   * Precondition formula\n   */\n  precondition: PDDLFormula;\n\n  /**\n   * Effect formula\n   */\n  effect: PDDLFormula;\n\n  /**\n   * Duration for durative actions\n   */\n  duration?: PDDLDuration;\n\n  /**\n   * Cost/metric contribution\n   */\n  cost?: number | string;\n\n  /**\n   * Documentation\n   */\n  description?: string;\n}\n\n/**\n * PDDL Formula (recursive structure for complex conditions)\n */\nexport interface PDDLFormula {\n  /**\n   * Formula type\n   */\n  type:\n    | 'and'\n    | 'or'\n    | 'not'\n    | 'imply'\n    | 'forall'\n    | 'exists'\n    | 'atom'\n    | 'comparison'\n    | 'assign'\n    | 'increase'\n    | 'decrease';\n\n  /**\n   * For atoms and comparisons\n   */\n  predicate?: string;\n\n  /**\n   * For atoms\n   */\n  parameters?: string[];\n\n  /**\n   * For logical operators\n   */\n  operands?: PDDLFormula[];\n\n  /**\n   * For quantifiers\n   */\n  variables?: PDDLTypedParameter[];\n\n  /**\n   * For quantifiers and conditionals\n   */\n  formula?: PDDLFormula;\n\n  /**\n   * For comparisons\n   */\n  operator?: '=' | '!=' | '<' | '>' | '<=' | '>=';\n\n  /**\n   * For comparisons and assignments\n   */\n  left?: string | PDDLFormula;\n  right?: string | number | PDDLFormula;\n\n  /**\n   * For numeric operations\n   */\n  value?: number | string;\n}\n\n/**\n * PDDL Duration for durative actions\n */\nexport interface PDDLDuration {\n  /**\n   * Duration type\n   */\n  type: 'fixed' | 'variable' | 'inequality';\n\n  /**\n   * For fixed durations\n   */\n  value?: number;\n\n  /**\n   * For variable durations\n   */\n  expression?: string;\n\n  /**\n   * For inequality durations\n   */\n  constraints?: DurationConstraint[];\n}\n\n/**\n * Duration constraint\n */\nexport interface DurationConstraint {\n  /**\n   * Operator\n   */\n  operator: '=' | '<' | '>' | '<=' | '>=';\n\n  /**\n   * Value or expression\n   */\n  value: number | string;\n}\n\n/**\n * PDDL Axiom (derived predicate)\n */\nexport interface PDDLAxiom {\n  /**\n   * Derived predicate head\n   */\n  head: {\n    predicate: string;\n    parameters: PDDLTypedParameter[];\n  };\n\n  /**\n   * Condition under which this is true\n   */\n  body: PDDLFormula;\n}\n\n/**\n * PDDL Constraint\n */\nexport interface PDDLConstraint {\n  /**\n   * Constraint type\n   */\n  type:\n    | 'always'\n    | 'sometime'\n    | 'at-most-once'\n    | 'sometime-after'\n    | 'sometime-before';\n\n  /**\n   * Constraint formula\n   */\n  formula: PDDLFormula;\n\n  /**\n   * For temporal constraints\n   */\n  timepoint?: number | string;\n}\n\n/**\n * Plan validation result\n */\nexport interface PlanValidation {\n  /**\n   * Whether the plan is valid\n   */\n  valid: boolean;\n\n  /**\n   * Detected conflicts\n   */\n  conflicts: PlanConflict[];\n\n  /**\n   * Suggestions for fixing issues\n   */\n  suggestions: ValidationSuggestion[];\n\n  /**\n   * Warnings that don't invalidate the plan\n   */\n  warnings?: PlanWarning[];\n\n  /**\n   * Overall plan quality score (0-1)\n   */\n  qualityScore?: number;\n\n  /**\n   * Detailed validation report\n   */\n  report?: ValidationReport;\n}\n\n/**\n * Plan conflict\n */\nexport interface PlanConflict {\n  /**\n   * Type of conflict\n   */\n  type: 'precondition' | 'resource' | 'temporal' | 'effect' | 'constraint';\n\n  /**\n   * Steps involved in the conflict\n   */\n  steps: string[];\n\n  /**\n   * Description of the conflict\n   */\n  description: string;\n\n  /**\n   * Severity of the conflict\n   */\n  severity: 'critical' | 'major' | 'minor';\n}\n\n/**\n * Validation suggestion\n */\nexport interface ValidationSuggestion {\n  /**\n   * Type of suggestion\n   */\n  type:\n    | 'reorder'\n    | 'add_step'\n    | 'remove_step'\n    | 'modify_parameter'\n    | 'add_constraint';\n\n  /**\n   * Target of the suggestion\n   */\n  target: string | string[];\n\n  /**\n   * Suggested action\n   */\n  action: string;\n\n  /**\n   * Expected improvement\n   */\n  expectedImprovement: string;\n\n  /**\n   * Confidence in this suggestion (0-1)\n   */\n  confidence: number;\n}\n\n/**\n * Plan warning\n */\nexport interface PlanWarning {\n  /**\n   * Warning type\n   */\n  type: 'efficiency' | 'robustness' | 'resource_usage' | 'timing';\n\n  /**\n   * Warning message\n   */\n  message: string;\n\n  /**\n   * Affected steps\n   */\n  affectedSteps?: string[];\n\n  /**\n   * Suggested mitigation\n   */\n  mitigation?: string;\n}\n\n/**\n * Detailed validation report\n */\nexport interface ValidationReport {\n  /**\n   * Precondition analysis\n   */\n  preconditions: {\n    satisfied: string[];\n    unsatisfied: string[];\n    uncertain: string[];\n  };\n\n  /**\n   * Effect analysis\n   */\n  effects: {\n    achieved: string[];\n    conflicting: string[];\n    redundant: string[];\n  };\n\n  /**\n   * Resource usage\n   */\n  resources: Record<string, ResourceUsage>;\n\n  /**\n   * Temporal analysis\n   */\n  temporal: {\n    totalDuration: number;\n    criticalPath: string[];\n    slack: Record<string, number>;\n  };\n}\n\n/**\n * Resource usage information\n */\nexport interface ResourceUsage {\n  /**\n   * Total amount used\n   */\n  total: number;\n\n  /**\n   * Peak usage\n   */\n  peak: number;\n\n  /**\n   * When peak occurs\n   */\n  peakTime?: number;\n\n  /**\n   * Available amount\n   */\n  available: number;\n\n  /**\n   * Usage timeline\n   */\n  timeline?: ResourceTimepoint[];\n}\n\n/**\n * Resource usage at a specific time\n */\nexport interface ResourceTimepoint {\n  /**\n   * Time\n   */\n  time: number;\n\n  /**\n   * Amount in use\n   */\n  usage: number;\n\n  /**\n   * Steps using the resource\n   */\n  consumers: string[];\n}\n\n/**\n * Goal state specification\n */\nexport interface GoalState {\n  /**\n   * Goal predicates that must be true\n   */\n  predicates: GoalPredicate[];\n\n  /**\n   * Priority of achieving this goal\n   */\n  priority: number;\n\n  /**\n   * Deadline for achieving the goal\n   */\n  deadline?: Date;\n\n  /**\n   * Soft constraints (preferences)\n   */\n  preferences?: GoalPreference[];\n\n  /**\n   * Metric to optimize\n   */\n  metric?: OptimizationMetric;\n\n  /**\n   * Goal dependencies\n   */\n  dependencies?: string[];\n}\n\n/**\n * Goal predicate\n */\nexport interface GoalPredicate {\n  /**\n   * Predicate name\n   */\n  name: string;\n\n  /**\n   * Parameters\n   */\n  parameters: string[];\n\n  /**\n   * Whether this must be true or false\n   */\n  positive: boolean;\n\n  /**\n   * Importance weight\n   */\n  weight?: number;\n\n  /**\n   * Whether this is a hard requirement\n   */\n  required: boolean;\n}\n\n/**\n * Goal preference (soft constraint)\n */\nexport interface GoalPreference {\n  /**\n   * Preference name\n   */\n  name: string;\n\n  /**\n   * Preference formula\n   */\n  formula: PDDLFormula;\n\n  /**\n   * Violation penalty\n   */\n  penalty: number;\n}\n\n/**\n * Optimization metric\n */\nexport interface OptimizationMetric {\n  /**\n   * Optimization direction\n   */\n  direction: 'minimize' | 'maximize';\n\n  /**\n   * What to optimize\n   */\n  expression: string;\n\n  /**\n   * Components of the metric\n   */\n  components?: MetricComponent[];\n}\n\n/**\n * Component of an optimization metric\n */\nexport interface MetricComponent {\n  /**\n   * Component name\n   */\n  name: string;\n\n  /**\n   * Weight in the overall metric\n   */\n  weight: number;\n\n  /**\n   * How to compute this component\n   */\n  computation: string;\n}\n\n/**\n * Planning domain configuration\n */\nexport interface PlanningDomainConfig {\n  /**\n   * Domain specification\n   */\n  domain: PDDLDomain | HTNDomain;\n\n  /**\n   * Available operators/actions\n   */\n  operators: Map<string, HTNOperator | PDDLAction>;\n\n  /**\n   * Initial state\n   */\n  initialState: Set<string>;\n\n  /**\n   * State invariants\n   */\n  invariants?: StateInvariant[];\n\n  /**\n   * Domain heuristics\n   */\n  heuristics?: DomainHeuristic[];\n}\n\n/**\n * HTN Domain (alternative to PDDL)\n */\nexport interface HTNDomain {\n  /**\n   * Domain name\n   */\n  name: string;\n\n  /**\n   * Task hierarchy\n   */\n  tasks: Map<string, HTNTask>;\n\n  /**\n   * Available methods\n   */\n  methods: Map<string, HTNMethod>;\n\n  /**\n   * Primitive operators\n   */\n  operators: Map<string, HTNOperator>;\n}\n\n/**\n * HTN Task definition\n */\nexport interface HTNTask {\n  /**\n   * Task name\n   */\n  name: string;\n\n  /**\n   * Whether this is primitive\n   */\n  primitive: boolean;\n\n  /**\n   * Parameters\n   */\n  parameters: HTNParameter[];\n\n  /**\n   * Applicable methods\n   */\n  methods?: string[];\n}\n\n/**\n * HTN Method\n */\nexport interface HTNMethod {\n  /**\n   * Method name\n   */\n  name: string;\n\n  /**\n   * Task this decomposes\n   */\n  task: string;\n\n  /**\n   * Preconditions\n   */\n  preconditions: HTNPrecondition[];\n\n  /**\n   * Decomposition\n   */\n  decomposition: HTNDecomposition;\n}\n\n/**\n * State invariant\n */\nexport interface StateInvariant {\n  /**\n   * Invariant name\n   */\n  name: string;\n\n  /**\n   * Invariant formula\n   */\n  formula: PDDLFormula;\n\n  /**\n   * What happens on violation\n   */\n  onViolation: 'error' | 'warning' | 'repair';\n}\n\n/**\n * Domain heuristic\n */\nexport interface DomainHeuristic {\n  /**\n   * Heuristic name\n   */\n  name: string;\n\n  /**\n   * When to apply\n   */\n  condition: PDDLFormula;\n\n  /**\n   * Heuristic value or computation\n   */\n  value: number | string;\n\n  /**\n   * Heuristic type\n   */\n  type: 'state_evaluation' | 'action_preference' | 'goal_distance';\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/portal.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":239,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5082,5085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5082,5085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":364,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":364,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7517,7520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7517,7520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Portal Types\n *\n * This file defines the interfaces for AI provider portals.\n * Portals are modular connectors to different AI providers like OpenAI, Anthropic, etc.\n */\n\nimport { Agent } from './agent';\nimport { BaseConfig, Metadata, ActionParameters } from './common';\n\nexport enum PortalType {\n  // Core AI Providers\n  OPENAI = 'openai',\n  ANTHROPIC = 'anthropic',\n  GROQ = 'groq',\n\n  // Google AI Portals\n  GOOGLE_GENERATIVE = 'google-generative',\n  GOOGLE_VERTEX = 'google-vertex',\n\n  // Enterprise AI Portals\n  AZURE_OPENAI = 'azure-openai',\n  VERCEL_AI = 'vercel-ai',\n\n  // Router & Aggregator Portals\n  OPENROUTER = 'openrouter',\n  XAI = 'xai',\n  KLUSTER_AI = 'kluster.ai',\n\n  // Specialized AI Portals\n  MISTRAL = 'mistral',\n  COHERE = 'cohere',\n  MULTIMODAL = 'multimodal',\n\n  // Local AI Portals\n  OLLAMA = 'ollama',\n  LMSTUDIO = 'lmstudio',\n\n  // Custom/Extensible\n  CUSTOM = 'custom',\n}\n\nexport enum PortalStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n  ERROR = 'error',\n  INITIALIZING = 'initializing',\n  RATE_LIMITED = 'rate_limited',\n  MAINTENANCE = 'maintenance',\n}\n\nexport enum ModelType {\n  TEXT_GENERATION = 'text_generation',\n  CHAT = 'chat',\n  EMBEDDING = 'embedding',\n  IMAGE_GENERATION = 'image_generation',\n  CODE_GENERATION = 'code_generation',\n  MULTIMODAL = 'multimodal',\n}\n\n/**\n * Base interface for all AI provider portals\n */\nexport interface Portal {\n  id: string;\n  name: string;\n  version: string;\n  type: PortalType;\n  enabled: boolean;\n  status: PortalStatus;\n  config: PortalConfig;\n  supportedModels: ModelType[];\n  init(agent: Agent): Promise<void>;\n  generateText(\n    prompt: string,\n    options?: TextGenerationOptions\n  ): Promise<TextGenerationResult>;\n  generateChat(\n    messages: ChatMessage[],\n    options?: ChatGenerationOptions\n  ): Promise<ChatGenerationResult>;\n  generateEmbedding(\n    text: string,\n    options?: EmbeddingOptions\n  ): Promise<EmbeddingResult>;\n  generateImage?(\n    prompt: string,\n    options?: ImageGenerationOptions\n  ): Promise<ImageGenerationResult>;\n  streamText?(\n    prompt: string,\n    options?: TextGenerationOptions\n  ): AsyncGenerator<string>;\n  streamChat?(\n    messages: ChatMessage[],\n    options?: ChatGenerationOptions\n  ): AsyncGenerator<string>;\n  evaluateTask?(options: ToolEvaluationOptions): Promise<ToolEvaluationResult>;\n  hasCapability(capability: PortalCapability): boolean;\n  getUsage?(): Promise<PortalUsage>;\n  healthCheck?(): Promise<boolean>;\n}\n\nexport enum ConfigurationLevel {\n  GLOBAL = 'global',\n  PORTAL = 'portal',\n  REQUEST = 'request',\n}\n\nexport interface PortalUsage {\n  requestCount: number;\n  tokenCount: number;\n  errorCount: number;\n  lastRequest?: Date;\n  rateLimitRemaining?: number;\n  rateLimitReset?: Date;\n}\n\n/**\n * Configuration for a portal\n */\nexport interface PortalConfig {\n  apiKey?: string;\n  baseUrl?: string;\n  organization?: string;\n  defaultModel?: string;\n  maxTokens?: number;\n  temperature?: number;\n  timeout?: number;\n  headers?: Record<string, string>;\n  proxy?: string;\n  embeddingModel?: string;\n  imageModel?: string;\n  vectorStore?: VectorStoreConfig;\n  retryAttempts?: number;\n  retryDelay?: number;\n  rateLimitBuffer?: number;\n  priority?: number;\n  fallbackPortals?: string[];\n}\n\n/**\n * Options for text generation\n */\nexport interface TextGenerationOptions {\n  model?: string;\n  maxTokens?: number;\n  maxOutputTokens?: number; // AI SDK v5 parameter\n  temperature?: number;\n  topP?: number;\n  frequencyPenalty?: number;\n  presencePenalty?: number;\n  stop?: string[];\n  stream?: boolean;\n  logitBias?: Record<string, number>;\n}\n\nexport enum FinishReason {\n  STOP = 'stop',\n  LENGTH = 'length',\n  FUNCTION_CALL = 'function_call',\n  CONTENT_FILTER = 'content_filter',\n  ERROR = 'error',\n  CANCELLED = 'cancelled',\n}\n\n/**\n * Result of text generation\n */\nexport interface TextGenerationResult {\n  text: string;\n  usage?: {\n    promptTokens: number;\n    completionTokens: number;\n    totalTokens: number;\n  };\n  finishReason?: FinishReason;\n  metadata?: Metadata;\n  model?: string;\n  timestamp?: Date;\n}\n\nexport enum MessageRole {\n  SYSTEM = 'system',\n  USER = 'user',\n  ASSISTANT = 'assistant',\n  FUNCTION = 'function',\n  TOOL = 'tool',\n}\n\nexport enum MessageType {\n  TEXT = 'text',\n  IMAGE = 'image',\n  AUDIO = 'audio',\n  VIDEO = 'video',\n  FILE = 'file',\n  FUNCTION_CALL = 'function_call',\n  TOOL_CALL = 'tool_call',\n}\n\n/**\n * Chat message format\n */\nexport interface ChatMessage {\n  role: MessageRole;\n  content: string;\n  type?: MessageType;\n  name?: string;\n  functionCall?: {\n    name: string;\n    arguments: string;\n  };\n  toolCalls?: ToolCall[];\n  attachments?: MessageAttachment[];\n  timestamp?: Date;\n}\n\nexport interface ToolCall {\n  id: string;\n  type: string;\n  function: {\n    name: string;\n    arguments: string;\n  };\n}\n\nexport interface MessageAttachment {\n  type: MessageType;\n  url?: string;\n  data?: string;\n  mimeType?: string;\n  size?: number;\n}\n\n/**\n * AI SDK v5 ToolSet - compatible with generateText/streamText\n * Using the proper tool type from AI SDK v5\n */\nexport type AISDKToolSet = Record<string, any>;\n\n/**\n * Options for chat generation\n */\nexport interface ChatGenerationOptions extends TextGenerationOptions {\n  functions?: FunctionDefinition[];\n  functionCall?: string | { name: string };\n  tools?: AISDKToolSet; // Native AI SDK v5 tools from MCP\n}\n\n/**\n * Result of chat generation\n */\nexport interface ChatGenerationResult extends TextGenerationResult {\n  message: ChatMessage;\n}\n\n/**\n * Function definition for function calling\n */\nexport interface FunctionDefinition {\n  name: string;\n  description: string;\n  parameters: ActionParameters;\n}\n\n/**\n * Portal registry to manage available AI providers\n */\nexport interface PortalRegistry {\n  registerPortal(name: string, portal: Portal): void;\n  getPortal(name: string): Portal | undefined;\n  listPortals(): string[];\n}\n\n/**\n * Update the AgentConfig to include portal configuration\n */\nexport interface PortalModuleConfig {\n  provider: string;\n  model?: string;\n  embeddingModel?: string;\n  imageModel?: string;\n  vectorStore?: VectorStoreConfig;\n  options?: BaseConfig;\n}\n\n/**\n * Options for embedding generation\n */\nexport interface EmbeddingOptions {\n  model?: string;\n  dimensions?: number;\n  normalize?: boolean;\n  batchSize?: number;\n  useCache?: boolean;\n}\n\n/**\n * Result of embedding generation\n */\nexport interface EmbeddingResult {\n  embedding: number[];\n  dimensions: number;\n  model: string;\n  usage?: {\n    promptTokens: number;\n    totalTokens: number;\n  };\n  metadata?: Metadata;\n}\n\n/**\n * Options for image generation\n */\nexport interface ImageGenerationOptions {\n  model?: string;\n  size?: string;\n  quality?: 'standard' | 'hd';\n  style?: string;\n  responseFormat?: 'url' | 'b64_json';\n  n?: number;\n}\n\n/**\n * Result of image generation\n */\nexport interface ImageGenerationResult {\n  images: Array<{\n    url?: string;\n    b64_json?: string;\n  }>;\n  model: string;\n  usage?: {\n    promptTokens: number;\n    totalTokens: number;\n  };\n  metadata?: Metadata;\n}\n\n/**\n * Options for tool evaluation\n */\nexport interface ToolEvaluationOptions {\n  task: string;\n  context?: string;\n  criteria?: string[];\n  outputFormat?: 'json' | 'text' | 'structured';\n  timeout?: number;\n  model?: string;\n}\n\n/**\n * Result of tool evaluation\n */\nexport interface ToolEvaluationResult {\n  analysis: string;\n  score?: number;\n  confidence?: number;\n  reasoning: string;\n  recommendations?: string[];\n  metadata?: {\n    model: string;\n    processingTime: number;\n    [key: string]: any;\n  };\n}\n\n/**\n * Vector store configuration for embedding storage\n */\nexport interface VectorStoreConfig {\n  type: 'supabase' | 'sqlite' | 'memory' | 'pinecone' | 'custom';\n  tableName?: string;\n  connectionString?: string;\n  dimensions?: number;\n  namespace?: string;\n  customConfig?: BaseConfig;\n}\n\n/**\n * Portal capabilities\n */\nexport enum PortalCapability {\n  TEXT_GENERATION = 'text_generation',\n  CHAT_GENERATION = 'chat_generation',\n  EMBEDDING_GENERATION = 'embedding_generation',\n  IMAGE_GENERATION = 'image_generation',\n  STREAMING = 'streaming',\n  FUNCTION_CALLING = 'function_calling',\n  VISION = 'vision',\n  AUDIO = 'audio',\n  TOOL_USAGE = 'tool_usage',\n  EVALUATION = 'evaluation',\n  REASONING = 'reasoning',\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/portals/ai-sdk.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/portals/responses.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AIMessage' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Portal Response Type Definitions\n *\n * This file contains standardized response types for all portal implementations.\n * These types ensure consistent responses across different AI providers.\n */\n\nimport { MessageRole } from '../portal';\n\nimport { AIMessage, AIToolCall, AIToolResult, AIFinishReason } from './ai-sdk';\n\n/**\n * Token usage details with breakdown\n */\nexport interface TokenUsageDetails {\n  promptTokens: number;\n  completionTokens: number;\n  totalTokens: number;\n  cachedTokens?: number;\n  reasoningTokens?: number;\n}\n\n/**\n * Base response interface for all portal responses\n */\nexport interface BasePortalResponse {\n  usage?: TokenUsageDetails;\n  metadata?: {\n    model: string;\n    provider: string;\n    processingTime?: number;\n    requestId?: string;\n    [key: string]: unknown;\n  };\n  timestamp?: Date;\n}\n\n/**\n * Text generation response from portals\n */\nexport interface PortalTextResponse extends BasePortalResponse {\n  text: string;\n  finishReason?: AIFinishReason;\n}\n\n/**\n * Chat generation response from portals\n */\nexport interface PortalChatResponse extends BasePortalResponse {\n  text: string;\n  message: {\n    role: MessageRole;\n    content: string;\n    toolCalls?: AIToolCall[];\n  };\n  finishReason?: AIFinishReason;\n  toolResults?: AIToolResult[];\n}\n\n/**\n * Streaming response from portals\n */\nexport interface PortalStreamResponse extends BasePortalResponse {\n  stream: AsyncIterable<string>;\n  fullStream?: AsyncIterable<StreamChunk>;\n  finalText: Promise<string>;\n  finalUsage: Promise<TokenUsageDetails>;\n  finalFinishReason: Promise<AIFinishReason>;\n}\n\n/**\n * Stream chunk types for portal streaming\n */\nexport interface StreamChunk {\n  type: 'text' | 'tool_call' | 'tool_result' | 'error' | 'finish';\n  content?: string;\n  toolCall?: AIToolCall;\n  toolResult?: AIToolResult;\n  error?: Error;\n  finishReason?: AIFinishReason;\n}\n\n/**\n * Tool call response from portals\n */\nexport interface PortalToolCallResponse extends BasePortalResponse {\n  toolCalls: AIToolCall[];\n  toolResults?: AIToolResult[];\n  text?: string;\n  continuationNeeded: boolean;\n}\n\n/**\n * Embedding response from portals\n */\nexport interface PortalEmbeddingResponse extends BasePortalResponse {\n  embedding: number[];\n  dimensions: number;\n  model: string;\n}\n\n/**\n * Image generation response from portals\n */\nexport interface PortalImageResponse extends BasePortalResponse {\n  images: Array<{\n    url?: string;\n    b64_json?: string;\n    revisedPrompt?: string;\n  }>;\n  model: string;\n}\n\n/**\n * Evaluation response from portals\n */\nexport interface PortalEvaluationResponse extends BasePortalResponse {\n  analysis: string;\n  score?: number;\n  confidence?: number;\n  reasoning: string;\n  recommendations?: string[];\n}\n\n/**\n * Error response from portals\n */\nexport interface PortalErrorResponse {\n  error: {\n    type: string;\n    message: string;\n    code?: string;\n    statusCode?: number;\n    details?: unknown;\n  };\n  provider: string;\n  timestamp: Date;\n}\n\n/**\n * Batch response for multiple requests\n */\nexport interface PortalBatchResponse<T extends BasePortalResponse>\n  extends BasePortalResponse {\n  results: T[];\n  errors?: PortalErrorResponse[];\n  successCount: number;\n  errorCount: number;\n}\n\n/**\n * Model information response\n */\nexport interface PortalModelInfo {\n  id: string;\n  name: string;\n  description?: string;\n  contextWindow?: number;\n  maxOutputTokens?: number;\n  supportedFeatures?: string[];\n  pricing?: {\n    inputTokensPer1K?: number;\n    outputTokensPer1K?: number;\n    currency?: string;\n  };\n}\n\n/**\n * Health check response\n */\nexport interface PortalHealthResponse {\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  provider: string;\n  latency?: number;\n  error?: string;\n  lastChecked: Date;\n}\n\n/**\n * Rate limit information\n */\nexport interface PortalRateLimitInfo {\n  requestsRemaining?: number;\n  requestsLimit?: number;\n  tokensRemaining?: number;\n  tokensLimit?: number;\n  resetTime?: Date;\n  retryAfter?: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/results.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[667,670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[667,670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[755,758],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[755,758],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1001,1004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1001,1004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1053,1056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1053,1056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1400,1403],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1400,1403],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1791,1794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1791,1794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1972,1975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1972,1975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2177,2180],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2177,2180],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2567,2570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2567,2570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2994,2997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2994,2997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3019,3022],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3019,3022],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":175,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3491,3494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3491,3494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":195,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3882,3885],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3882,3885],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":198,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3968,3971],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3968,3971],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":210,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4177,4180],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4177,4180],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":224,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4493,4496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4493,4496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4963,4966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4963,4966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4988,4991],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4988,4991],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":267,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5329,5332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5329,5332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":273,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5417,5420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5417,5420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":279,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5555,5558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5555,5558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":286,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5706,5709],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5706,5709],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":308,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":308,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6133,6136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6133,6136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":336,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":336,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6661,6664],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6661,6664],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":358,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":358,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7049,7052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7049,7052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":369,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7268,7271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7268,7271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":374,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":374,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7363,7366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7363,7366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":383,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":383,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7488,7491],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7488,7491],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":389,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":389,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7613,7616],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7613,7616],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":398,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":398,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7820,7823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7820,7823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":409,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":409,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8018,8021],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8018,8021],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":414,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":414,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8128,8131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8128,8131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":415,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":415,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8153,8156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8153,8156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":441,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":441,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8660,8663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8660,8663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":476,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":476,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9302,9305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9302,9305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":497,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":497,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9674,9677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9674,9677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":516,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":516,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10040,10043],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10040,10043],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":525,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":525,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10194,10197],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10194,10197],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":533,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":533,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10414,10417],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10414,10417],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":543,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":543,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10579,10582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10579,10582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":544,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":544,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10598,10601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10598,10601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":551,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":551,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10752,10755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10752,10755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":566,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":566,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11086,11089],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11086,11089],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":615,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":615,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12069,12072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12069,12072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":630,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":630,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12363,12366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12363,12366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":652,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":652,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12801,12804],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12801,12804],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":675,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":675,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13231,13234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13231,13234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":692,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":692,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13573,13576],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13573,13576],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":718,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":718,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14113,14116],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14113,14116],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":736,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":736,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14469,14472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14469,14472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":50,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Module-Specific Result Types for SYMindX\n *\n * This file contains specialized result types for different system modules,\n * replacing generic void returns with meaningful, typed results.\n */\n\nimport {\n  // OperationResult,\n  // ExecutionResult,\n  ValidationResult,\n  HealthCheckResult,\n  LifecycleEventResult,\n  Duration,\n  Timestamp,\n  AgentId,\n  MemoryId,\n  EventId,\n  ModuleId,\n  CorrelationId,\n} from './helpers';\n\n/**\n * Agent Management Result Types\n */\nexport interface AgentCreationResult {\n  success: boolean;\n  agentId?: AgentId;\n  error?: string;\n  timestamp: Timestamp;\n  metadata?: {\n    characterId: string;\n    configurationUsed: Record<string, any>;\n    modulesLoaded: string[];\n    initializationTime: Duration;\n    [key: string]: any;\n  };\n}\n\nexport interface AgentDestructionResult {\n  success: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  agentId: AgentId;\n  metadata?: {\n    cleanupSteps: string[];\n    resourcesReleased: string[];\n    finalState: Record<string, any>;\n    cleanupTime: Duration;\n    [key: string]: any;\n  };\n}\n\nexport interface AgentStateTransitionResult {\n  success: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  agentId: AgentId;\n  transition: {\n    from: string;\n    to: string;\n    trigger: string;\n    duration: Duration;\n  };\n  metadata?: {\n    sideEffects: string[];\n    validationResults: ValidationResult[];\n    [key: string]: any;\n  };\n}\n\n/**\n * Memory System Result Types\n */\nexport interface MemoryStorageResult {\n  success: boolean;\n  memoryId?: MemoryId;\n  error?: string;\n  timestamp: Timestamp;\n  metadata?: {\n    agentId: AgentId;\n    memoryType: string;\n    tier: string;\n    size: number;\n    embeddings?: {\n      model: string;\n      dimensions: number;\n      similarity?: number;\n    };\n    [key: string]: any;\n  };\n}\n\nexport interface MemoryRetrievalResult {\n  success: boolean;\n  memories: Array<{\n    id: MemoryId;\n    content: string;\n    score: number;\n    metadata: Record<string, any>;\n  }>;\n  error?: string;\n  timestamp: Timestamp;\n  metadata?: {\n    agentId: AgentId;\n    query: string;\n    searchType: string;\n    totalResults: number;\n    searchTime: Duration;\n    [key: string]: any;\n  };\n}\n\nexport interface MemoryConsolidationResult {\n  success: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  agentId: AgentId;\n  consolidation: {\n    memoriesProcessed: number;\n    memoriesPromoted: number;\n    memoriesArchived: number;\n    memoriesDeleted: number;\n    processingTime: Duration;\n  };\n  metadata?: {\n    tier: string;\n    strategy: string;\n    [key: string]: any;\n  };\n}\n\n/**\n * Emotion System Result Types\n */\nexport interface EmotionUpdateResult {\n  success: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  agentId: AgentId;\n  emotionChange: {\n    previousEmotion: string;\n    newEmotion: string;\n    intensity: number;\n    triggers: string[];\n    duration: Duration;\n  };\n  metadata?: {\n    moduleType: string;\n    blendingEnabled: boolean;\n    contextFactors: Record<string, any>;\n    [key: string]: any;\n  };\n}\n\nexport interface EmotionProcessingResult {\n  success: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  agentId: AgentId;\n  processing: {\n    eventProcessed: EventId;\n    emotionTriggered: boolean;\n    intensityChange: number;\n    newEmotionalState: {\n      emotion: string;\n      intensity: number;\n      valence: number;\n      arousal: number;\n    };\n  };\n  metadata?: {\n    processingTime: Duration;\n    contextSensitivity: number;\n    [key: string]: any;\n  };\n}\n\n/**\n * Cognition System Result Types\n */\nexport interface ThoughtProcessingResult {\n  success: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  agentId: AgentId;\n  thoughts: {\n    primaryThoughts: string[];\n    secondaryThoughts: string[];\n    confidence: number;\n    reasoning: string;\n    processingTime: Duration;\n  };\n  metadata?: {\n    contextFactors: Record<string, any>;\n    memoryInfluence: number;\n    emotionalInfluence: number;\n    [key: string]: any;\n  };\n}\n\nexport interface PlanningResult {\n  success: boolean;\n  plan?: {\n    id: string;\n    goal: string;\n    steps: Array<{\n      id: string;\n      description: string;\n      parameters: Record<string, any>;\n      estimatedDuration: Duration;\n      dependencies: string[];\n    }>;\n    confidence: number;\n    estimatedTotalDuration: Duration;\n  };\n  error?: string;\n  timestamp: Timestamp;\n  agentId: AgentId;\n  metadata?: {\n    planningTime: Duration;\n    complexity: number;\n    strategy: string;\n    [key: string]: any;\n  };\n}\n\nexport interface DecisionMakingResult {\n  success: boolean;\n  decision?: {\n    id: string;\n    choice: string;\n    confidence: number;\n    reasoning: string;\n    alternatives: Array<{\n      option: string;\n      score: number;\n      pros: string[];\n      cons: string[];\n    }>;\n  };\n  error?: string;\n  timestamp: Timestamp;\n  agentId: AgentId;\n  metadata?: {\n    decisionTime: Duration;\n    ethicalConstraints: boolean;\n    riskAssessment: Record<string, any>;\n    [key: string]: any;\n  };\n}\n\n/**\n * Extension System Result Types\n */\nexport interface ExtensionLoadResult {\n  success: boolean;\n  extensionId?: string;\n  error?: string;\n  timestamp: Timestamp;\n  metadata?: {\n    extensionType: string;\n    version: string;\n    dependencies: string[];\n    capabilities: string[];\n    loadTime: Duration;\n    [key: string]: any;\n  };\n}\n\nexport interface ExtensionExecutionResult {\n  success: boolean;\n  result?: any;\n  error?: string;\n  timestamp: Timestamp;\n  execution: {\n    extensionId: string;\n    action: string;\n    parameters: Record<string, any>;\n    duration: Duration;\n  };\n  metadata?: {\n    agentId: AgentId;\n    correlationId?: CorrelationId;\n    retryCount?: number;\n    [key: string]: any;\n  };\n}\n\n/**\n * Portal System Result Types\n */\nexport interface PortalConnectionResult {\n  success: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  portalId: string;\n  connection: {\n    status: 'connected' | 'disconnected' | 'error';\n    endpoint: string;\n    protocol: string;\n    connectionTime: Duration;\n  };\n  metadata?: {\n    provider: string;\n    model: string;\n    capabilities: string[];\n    [key: string]: any;\n  };\n}\n\nexport interface PortalGenerationResult {\n  success: boolean;\n  response?: {\n    content: string;\n    usage: {\n      promptTokens: number;\n      completionTokens: number;\n      totalTokens: number;\n    };\n    model: string;\n    finishReason: string;\n  };\n  error?: string;\n  timestamp: Timestamp;\n  generation: {\n    portalId: string;\n    requestId: string;\n    duration: Duration;\n    retryCount: number;\n  };\n  metadata?: {\n    agentId: AgentId;\n    temperature: number;\n    maxTokens: number;\n    [key: string]: any;\n  };\n}\n\n/**\n * Event System Result Types\n */\nexport interface EventDispatchResult {\n  success: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  event: {\n    id: EventId;\n    type: string;\n    source: string;\n    targets: string[];\n    processed: boolean;\n  };\n  metadata?: {\n    handlersTriggered: number;\n    processingTime: Duration;\n    errors: string[];\n    [key: string]: any;\n  };\n}\n\nexport interface EventSubscriptionResult {\n  success: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  subscription: {\n    subscriberId: string;\n    eventTypes: string[];\n    filters?: Record<string, any>;\n  };\n  metadata?: {\n    subscriptionId: string;\n    priority: number;\n    [key: string]: any;\n  };\n}\n\n/**\n * Command System Result Types\n */\nexport interface CommandExecutionResult {\n  success: boolean;\n  result?: any;\n  error?: string;\n  timestamp: Timestamp;\n  command: {\n    id: string;\n    name: string;\n    parameters: Record<string, any>;\n    executor: string;\n    duration: Duration;\n  };\n  metadata?: {\n    agentId: AgentId;\n    correlationId?: CorrelationId;\n    retryCount?: number;\n    validation: ValidationResult;\n    [key: string]: any;\n  };\n}\n\nexport interface CommandValidationResult {\n  success: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  command: {\n    id: string;\n    name: string;\n    parameters: Record<string, any>;\n  };\n  validation: ValidationResult;\n  metadata?: {\n    validatorId: string;\n    schema: Record<string, any>;\n    [key: string]: any;\n  };\n}\n\n/**\n * Resource Management Result Types\n */\nexport interface ResourceAllocationResult {\n  success: boolean;\n  resource?: {\n    id: string;\n    type: string;\n    status: 'allocated' | 'available' | 'locked';\n    usage: {\n      memory?: number;\n      cpu?: number;\n      storage?: number;\n      network?: number;\n    };\n  };\n  error?: string;\n  timestamp: Timestamp;\n  metadata?: {\n    requesterId: string;\n    allocationTime: Duration;\n    quotaUsage: Record<string, number>;\n    [key: string]: any;\n  };\n}\n\nexport interface ResourceMonitoringResult {\n  success: boolean;\n  metrics: {\n    timestamp: Timestamp;\n    cpu: {\n      usage: number;\n      cores: number;\n      load: number[];\n    };\n    memory: {\n      used: number;\n      total: number;\n      heap: number;\n      external: number;\n    };\n    storage: {\n      used: number;\n      total: number;\n      reads: number;\n      writes: number;\n    };\n    network: {\n      bytesIn: number;\n      bytesOut: number;\n      connections: number;\n    };\n  };\n  error?: string;\n  metadata?: {\n    monitoringInterval: Duration;\n    alertThresholds: Record<string, number>;\n    [key: string]: any;\n  };\n}\n\n/**\n * Security System Result Types\n */\nexport interface AuthenticationResult {\n  success: boolean;\n  token?: string;\n  subject?: {\n    id: string;\n    type: 'user' | 'agent' | 'service';\n    roles: string[];\n  };\n  error?: string;\n  timestamp: Timestamp;\n  metadata?: {\n    method: string;\n    expiresAt: Timestamp;\n    sessionId: string;\n    [key: string]: any;\n  };\n}\n\nexport interface AuthorizationResult {\n  success: boolean;\n  authorized: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  authorization: {\n    subjectId: string;\n    resource: string;\n    action: string;\n    decision: 'allow' | 'deny';\n    reason: string;\n  };\n  metadata?: {\n    policyId: string;\n    enforcementPoint: string;\n    [key: string]: any;\n  };\n}\n\n/**\n * Configuration System Result Types\n */\nexport interface ConfigurationLoadResult {\n  success: boolean;\n  configuration?: Record<string, any>;\n  error?: string;\n  timestamp: Timestamp;\n  metadata?: {\n    source: 'file' | 'environment' | 'remote' | 'default';\n    version: string;\n    validation: ValidationResult;\n    loadTime: Duration;\n    [key: string]: any;\n  };\n}\n\nexport interface ConfigurationUpdateResult {\n  success: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  update: {\n    key: string;\n    oldValue: any;\n    newValue: any;\n    source: string;\n  };\n  metadata?: {\n    validation: ValidationResult;\n    propagated: boolean;\n    affectedModules: string[];\n    [key: string]: any;\n  };\n}\n\n/**\n * Health Check Result Types\n */\nexport interface SystemHealthResult {\n  success: boolean;\n  overall: 'healthy' | 'degraded' | 'unhealthy';\n  timestamp: Timestamp;\n  components: HealthCheckResult[];\n  metadata?: {\n    checkDuration: Duration;\n    checkType: 'basic' | 'detailed' | 'comprehensive';\n    [key: string]: any;\n  };\n}\n\nexport interface ComponentHealthResult extends HealthCheckResult {\n  dependencies: {\n    componentId: string;\n    status: 'healthy' | 'degraded' | 'unhealthy';\n    impact: 'none' | 'low' | 'medium' | 'high' | 'critical';\n  }[];\n}\n\n/**\n * Lifecycle Management Result Types\n */\nexport interface ModuleLifecycleResult extends LifecycleEventResult {\n  moduleId: ModuleId;\n  module: {\n    name: string;\n    version: string;\n    type: string;\n    dependencies: string[];\n  };\n  lifecycle: {\n    phase:\n      | 'initialize'\n      | 'start'\n      | 'stop'\n      | 'pause'\n      | 'resume'\n      | 'restart'\n      | 'shutdown';\n    duration: Duration;\n    checkpoints: string[];\n  };\n}\n\nexport interface SystemLifecycleResult extends LifecycleEventResult {\n  system: {\n    modules: ModuleLifecycleResult[];\n    services: string[];\n    totalDuration: Duration;\n    shutdownOrder: string[];\n  };\n}\n\n/**\n * Batch Operation Result Types\n */\nexport interface BatchOperationResult<T = any> {\n  success: boolean;\n  results: T[];\n  errors: string[];\n  timestamp: Timestamp;\n  summary: {\n    total: number;\n    succeeded: number;\n    failed: number;\n    skipped: number;\n    duration: Duration;\n  };\n  metadata?: {\n    batchId: string;\n    operationType: string;\n    [key: string]: any;\n  };\n}\n\n/**\n * Migration Result Types\n */\nexport interface MigrationResult {\n  success: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  migration: {\n    id: string;\n    version: string;\n    type: 'schema' | 'data' | 'configuration' | 'system';\n    direction: 'up' | 'down';\n    duration: Duration;\n  };\n  metadata?: {\n    recordsAffected: number;\n    backupCreated: boolean;\n    rollbackAvailable: boolean;\n    [key: string]: any;\n  };\n}\n\n/**\n * Backup and Restore Result Types\n */\nexport interface BackupResult {\n  success: boolean;\n  backup?: {\n    id: string;\n    type: 'full' | 'incremental' | 'differential';\n    size: number;\n    location: string;\n    checksum: string;\n    created: Timestamp;\n  };\n  error?: string;\n  timestamp: Timestamp;\n  metadata?: {\n    duration: Duration;\n    compression: boolean;\n    encryption: boolean;\n    [key: string]: any;\n  };\n}\n\nexport interface RestoreResult {\n  success: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  restore: {\n    backupId: string;\n    type: 'full' | 'partial' | 'selective';\n    duration: Duration;\n    recordsRestored: number;\n  };\n  metadata?: {\n    verification: ValidationResult;\n    conflicts: string[];\n    [key: string]: any;\n  };\n}\n\n/**\n * Audit and Logging Result Types\n */\nexport interface AuditResult {\n  success: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  audit: {\n    id: string;\n    type: 'security' | 'compliance' | 'performance' | 'system';\n    findings: Array<{\n      severity: 'low' | 'medium' | 'high' | 'critical';\n      category: string;\n      description: string;\n      recommendation: string;\n    }>;\n    duration: Duration;\n  };\n  metadata?: {\n    auditorId: string;\n    scope: string[];\n    standards: string[];\n    [key: string]: any;\n  };\n}\n\nexport interface LoggingResult {\n  success: boolean;\n  message?: string;\n  timestamp: Timestamp;\n  log: {\n    id: string;\n    level: 'debug' | 'info' | 'warn' | 'error' | 'fatal';\n    message: string;\n    correlationId?: CorrelationId;\n    stored: boolean;\n  };\n  metadata?: {\n    loggerId: string;\n    destination: string;\n    [key: string]: any;\n  };\n}\n\n/**\n * Performance measurement result\n */\nexport interface PerformanceMetrics {\n  memoryUsage: {\n    heapUsed: number;\n    heapTotal: number;\n    external: number;\n    rss: number;\n  };\n  cpuUsage: {\n    user: number;\n    system: number;\n  };\n  uptime: number;\n  loadAverage: number[];\n  timestamp: Date;\n}\n\n// ModuleManifest moved to types/index.ts to avoid circular import issues\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/signatures.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[888,891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[888,891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[998,1001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[998,1001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1121,1124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1121,1124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1487,1490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1487,1490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1585,1588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1585,1588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1671,1674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1671,1674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1891,1894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1891,1894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1984,1987],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1984,1987],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2064,2067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2064,2067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2214,2217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2214,2217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2313,2316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2313,2316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2781,2784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2781,2784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3193,3196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3193,3196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3483,3486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3483,3486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3973,3976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3973,3976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":180,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4348,4351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4348,4351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":195,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4663,4666],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4663,4666],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4876,4879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4876,4879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":215,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5110,5113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5110,5113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":223,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5356,5359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5356,5359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":235,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5573,5576],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5573,5576],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5607,5610],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5607,5610],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":240,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5740,5743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5740,5743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":263,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":263,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6265,6268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6265,6268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":275,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6492,6495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6492,6495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":279,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6627,6630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6627,6630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":295,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":295,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6980,6983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6980,6983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":312,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":312,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7373,7376],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7373,7376],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":332,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":332,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7876,7879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7876,7879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":336,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":336,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8004,8007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8004,8007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":349,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":349,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8216,8219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8216,8219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":351,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":351,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8302,8305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8302,8305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":352,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":352,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8377,8380],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8377,8380],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":364,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":364,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8642,8645],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8642,8645],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":366,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":366,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8730,8733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8730,8733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":378,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":378,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8930,8933],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8930,8933],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":382,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":382,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9044,9047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9044,9047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":415,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":415,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9715,9718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9715,9718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":434,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":434,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10180,10183],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10180,10183],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":456,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":456,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10802,10805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10802,10805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":457,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":457,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10832,10835],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10832,10835],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":505,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":505,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11943,11946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11943,11946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":510,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":510,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12141,12144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12141,12144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":537,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":537,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12704,12707],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12704,12707],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":539,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":539,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12789,12792],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12789,12792],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":555,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":555,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13227,13230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13227,13230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":592,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":592,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14183,14186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14183,14186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":592,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":592,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14188,14191],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14188,14191],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":596,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":596,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14308,14311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14308,14311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":608,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":608,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14520,14523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14520,14523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":612,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":612,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14628,14631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14628,14631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":616,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":616,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14746,14749],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14746,14749],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":627,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":627,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14937,14940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14937,14940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":630,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":630,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15033,15036],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15033,15036],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":634,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":634,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15156,15159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15156,15159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":646,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":646,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15355,15358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15355,15358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":651,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":651,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15498,15501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15498,15501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":663,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":663,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15736,15739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15736,15739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":666,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":666,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15831,15834],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15831,15834],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":669,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":669,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15937,15940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15937,15940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":697,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":697,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16577,16580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16577,16580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":708,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":708,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16976,16979],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16976,16979],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":62,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Function Signature Types for SYMindX\n *\n * This file contains standardized function signature types that replace void returns\n * with meaningful result types throughout the system.\n */\n\nimport {\n  OperationResult,\n  ExecutionResult,\n  ValidationResult,\n  InitializationResult,\n  CleanupResult,\n  EventProcessingResult,\n  StateUpdateResult,\n  HealthCheckResult,\n  AgentId,\n  MemoryId,\n  Duration,\n} from './helpers';\nimport {\n  AgentCreationResult,\n  AgentDestructionResult,\n  AgentStateTransitionResult,\n  MemoryStorageResult,\n  MemoryRetrievalResult,\n  EmotionUpdateResult,\n  ThoughtProcessingResult,\n  ExtensionExecutionResult,\n  PortalGenerationResult,\n  EventDispatchResult,\n  CommandExecutionResult,\n} from './results';\n\n/**\n * Core System Function Signatures\n */\n\n/**\n * Initialization function signatures\n */\nexport type InitializationFunction = (\n  config?: Record<string, any>\n) => Promise<InitializationResult>;\nexport type SyncInitializationFunction = (\n  config?: Record<string, any>\n) => InitializationResult;\nexport type ModuleInitializationFunction = (\n  moduleId: string,\n  config?: Record<string, any>\n) => Promise<InitializationResult>;\n\n/**\n * Cleanup function signatures\n */\nexport type CleanupFunction = () => Promise<CleanupResult>;\nexport type SyncCleanupFunction = () => CleanupResult;\nexport type ModuleCleanupFunction = (\n  moduleId: string\n) => Promise<CleanupResult>;\n\n/**\n * Event handling function signatures\n */\nexport type EventHandlerFunction<T = any> = (\n  event: T\n) => Promise<EventProcessingResult>;\nexport type SyncEventHandlerFunction<T = any> = (\n  event: T\n) => EventProcessingResult;\nexport type EventDispatchFunction<T = any> = (\n  eventType: string,\n  data: T\n) => Promise<EventDispatchResult>;\nexport type EventProcessingFunction = EventHandlerFunction;\n\n/**\n * State management function signatures\n */\nexport type StateUpdateFunction<T = any> = (\n  state: T\n) => Promise<StateUpdateResult>;\nexport type SyncStateUpdateFunction<T = any> = (state: T) => StateUpdateResult;\nexport type StateValidationFunction<T = any> = (state: T) => ValidationResult;\n\n/**\n * Configuration function signatures\n */\nexport type ConfigurationSetFunction = (\n  key: string,\n  value: any\n) => OperationResult;\nexport type ConfigurationValidationFunction = (\n  config: Record<string, any>\n) => ValidationResult;\nexport type ConfigurationReloadFunction = () => Promise<OperationResult>;\n\n/**\n * Health check function signatures\n */\nexport type HealthCheckFunction = (\n  componentId: string\n) => Promise<HealthCheckResult>;\nexport type SystemHealthCheckFunction = () => Promise<HealthCheckResult>;\n\n/**\n * Agent System Function Signatures\n */\n\n/**\n * Agent lifecycle function signatures\n */\nexport type AgentCreationFunction = (\n  config: Record<string, any>\n) => Promise<AgentCreationResult>;\nexport type AgentDestructionFunction = (\n  agentId: AgentId\n) => Promise<AgentDestructionResult>;\nexport type AgentStateTransitionFunction = (\n  agentId: AgentId,\n  newState: string\n) => Promise<AgentStateTransitionResult>;\n\n/**\n * Agent action function signatures\n */\nexport type AgentActionFunction = (\n  agentId: AgentId,\n  action: string,\n  parameters: Record<string, any>\n) => Promise<ExecutionResult>;\nexport type AgentTickFunction = (agentId: AgentId) => Promise<OperationResult>;\n\n/**\n * Memory System Function Signatures\n */\n\n/**\n * Memory storage function signatures\n */\nexport type MemoryStoreFunction = (\n  agentId: AgentId,\n  memory: Record<string, any>\n) => Promise<MemoryStorageResult>;\nexport type MemoryRetrieveFunction = (\n  agentId: AgentId,\n  query: string\n) => Promise<MemoryRetrievalResult>;\nexport type MemoryDeleteFunction = (\n  agentId: AgentId,\n  memoryId: MemoryId\n) => Promise<OperationResult>;\n\n/**\n * Memory management function signatures\n */\nexport type MemoryConsolidationFunction = (\n  agentId: AgentId\n) => Promise<OperationResult>;\nexport type MemoryArchiveFunction = (\n  agentId: AgentId,\n  criteria: Record<string, any>\n) => Promise<OperationResult>;\n\n/**\n * Emotion System Function Signatures\n */\n\n/**\n * Emotion processing function signatures\n */\nexport type EmotionUpdateFunction = (\n  agentId: AgentId,\n  emotion: string,\n  intensity: number\n) => Promise<EmotionUpdateResult>;\nexport type EmotionProcessingFunction = (\n  agentId: AgentId,\n  eventType: string,\n  context: Record<string, any>\n) => Promise<EmotionUpdateResult>;\nexport type EmotionResetFunction = (\n  agentId: AgentId\n) => Promise<OperationResult>;\n\n/**\n * Cognition System Function Signatures\n */\n\n/**\n * Thought processing function signatures\n */\nexport type ThoughtProcessingFunction = (\n  agentId: AgentId,\n  context: Record<string, any>\n) => Promise<ThoughtProcessingResult>;\nexport type PlanningFunction = (\n  agentId: AgentId,\n  goal: string\n) => Promise<ExecutionResult>;\nexport type DecisionMakingFunction = (\n  agentId: AgentId,\n  options: any[]\n) => Promise<ExecutionResult>;\n\n/**\n * Extension System Function Signatures\n */\n\n/**\n * Extension lifecycle function signatures\n */\nexport type ExtensionInitializationFunction = (\n  extensionId: string,\n  config: Record<string, any>\n) => Promise<InitializationResult>;\nexport type ExtensionCleanupFunction = (\n  extensionId: string\n) => Promise<CleanupResult>;\nexport type ExtensionExecutionFunction = (\n  extensionId: string,\n  action: string,\n  parameters: Record<string, any>\n) => Promise<ExtensionExecutionResult>;\n\n/**\n * Portal System Function Signatures\n */\n\n/**\n * Portal communication function signatures\n */\nexport type PortalGenerationFunction = (\n  portalId: string,\n  messages: any[],\n  options?: Record<string, any>\n) => Promise<PortalGenerationResult>;\nexport type PortalInitializationFunction = (\n  portalId: string,\n  config: Record<string, any>\n) => Promise<InitializationResult>;\nexport type PortalHealthCheckFunction = (\n  portalId: string\n) => Promise<HealthCheckResult>;\n\n/**\n * Event System Function Signatures\n */\n\n/**\n * Event bus function signatures\n */\nexport type EventSubscriptionFunction = (\n  eventType: string,\n  handler: EventHandlerFunction\n) => OperationResult;\nexport type EventUnsubscriptionFunction = (\n  eventType: string,\n  handler: EventHandlerFunction\n) => OperationResult;\nexport type EventEmissionFunction = (\n  eventType: string,\n  data: any\n) => Promise<EventDispatchResult>;\n\n/**\n * Command System Function Signatures\n */\n\n/**\n * Command execution function signatures\n */\nexport type CommandExecutionFunction = (\n  commandId: string,\n  parameters: Record<string, any>\n) => Promise<CommandExecutionResult>;\nexport type CommandValidationFunction = (\n  commandId: string,\n  parameters: Record<string, any>\n) => ValidationResult;\nexport type CommandRegistrationFunction = (\n  commandId: string,\n  handler: CommandExecutionFunction\n) => OperationResult;\n\n/**\n * Resource Management Function Signatures\n */\n\n/**\n * Resource allocation function signatures\n */\nexport type ResourceAllocationFunction = (\n  resourceType: string,\n  requirements: Record<string, any>\n) => Promise<ExecutionResult>;\nexport type ResourceDeallocationFunction = (\n  resourceId: string\n) => Promise<OperationResult>;\nexport type ResourceMonitoringFunction = (\n  resourceId?: string\n) => Promise<ExecutionResult>;\n\n/**\n * Security System Function Signatures\n */\n\n/**\n * Authentication function signatures\n */\nexport type AuthenticationFunction = (\n  credentials: Record<string, any>\n) => Promise<ExecutionResult>;\nexport type AuthorizationFunction = (\n  subject: string,\n  resource: string,\n  action: string\n) => Promise<ExecutionResult>;\nexport type TokenValidationFunction = (token: string) => ValidationResult;\n\n/**\n * Configuration System Function Signatures\n */\n\n/**\n * Configuration management function signatures\n */\nexport type ConfigurationLoadFunction = (\n  source: string\n) => Promise<ExecutionResult>;\nexport type ConfigurationSaveFunction = (\n  config: Record<string, any>,\n  destination: string\n) => Promise<OperationResult>;\nexport type ConfigurationMergeFunction = (\n  configs: Record<string, any>[]\n) => ExecutionResult;\n\n/**\n * Logging System Function Signatures\n */\n\n/**\n * Logging function signatures\n */\nexport type LoggingFunction = (\n  level: string,\n  message: string,\n  metadata?: Record<string, any>\n) => OperationResult;\nexport type LogFormattingFunction = (entry: Record<string, any>) => string;\nexport type LogFilteringFunction = (entry: Record<string, any>) => boolean;\n\n/**\n * Monitoring System Function Signatures\n */\n\n/**\n * Metrics collection function signatures\n */\nexport type MetricsCollectionFunction = (\n  componentId: string\n) => Promise<ExecutionResult>;\nexport type MetricsAggregationFunction = (metrics: any[]) => ExecutionResult;\nexport type AlertingFunction = (\n  condition: Record<string, any>\n) => Promise<OperationResult>;\n\n/**\n * Backup and Recovery Function Signatures\n */\n\n/**\n * Backup function signatures\n */\nexport type BackupFunction = (\n  type: string,\n  options: Record<string, any>\n) => Promise<ExecutionResult>;\nexport type RestoreFunction = (\n  backupId: string,\n  options: Record<string, any>\n) => Promise<ExecutionResult>;\nexport type BackupVerificationFunction = (\n  backupId: string\n) => Promise<ValidationResult>;\n\n/**\n * Migration Function Signatures\n */\n\n/**\n * Migration function signatures\n */\nexport type MigrationFunction = (\n  fromVersion: string,\n  toVersion: string\n) => Promise<ExecutionResult>;\nexport type MigrationValidationFunction = (\n  migrationId: string\n) => Promise<ValidationResult>;\nexport type MigrationRollbackFunction = (\n  migrationId: string\n) => Promise<ExecutionResult>;\n\n/**\n * Testing Function Signatures\n */\n\n/**\n * Testing function signatures\n */\nexport type TestFunction = (\n  testId: string,\n  parameters: Record<string, any>\n) => Promise<ExecutionResult>;\nexport type TestValidationFunction = (\n  result: ExecutionResult\n) => ValidationResult;\nexport type TestSetupFunction = (\n  testId: string\n) => Promise<InitializationResult>;\nexport type TestTeardownFunction = (testId: string) => Promise<CleanupResult>;\n\n/**\n * Plugin System Function Signatures\n */\n\n/**\n * Plugin lifecycle function signatures\n */\nexport type PluginLoadFunction = (\n  pluginId: string,\n  config: Record<string, any>\n) => Promise<InitializationResult>;\nexport type PluginUnloadFunction = (pluginId: string) => Promise<CleanupResult>;\nexport type PluginValidationFunction = (\n  pluginId: string\n) => Promise<ValidationResult>;\n\n/**\n * Utility Function Signatures\n */\n\n/**\n * Serialization function signatures\n */\nexport type SerializationFunction<T> = (data: T) => ExecutionResult<string>;\nexport type DeserializationFunction<T> = (data: string) => ExecutionResult<T>;\n\n/**\n * Validation function signatures\n */\nexport type GenericValidationFunction<T> = (data: T) => ValidationResult;\nexport type SchemaValidationFunction = (\n  data: any,\n  schema: Record<string, any>\n) => ValidationResult;\n\n/**\n * Transformation function signatures\n */\nexport type TransformationFunction<T, R> = (input: T) => ExecutionResult<R>;\nexport type BatchTransformationFunction<T, R> = (\n  inputs: T[]\n) => ExecutionResult<R[]>;\n\n/**\n * Cache Function Signatures\n */\n\n/**\n * Cache operation function signatures\n */\nexport type CacheGetFunction<T> = (key: string) => T | undefined;\nexport type CacheSetFunction<T> = (\n  key: string,\n  value: T,\n  ttl?: Duration\n) => OperationResult;\nexport type CacheDeleteFunction = (key: string) => OperationResult;\nexport type CacheClearFunction = () => OperationResult;\n\n/**\n * Queue Function Signatures\n */\n\n/**\n * Queue operation function signatures\n */\nexport type QueueEnqueueFunction<T> = (item: T) => OperationResult;\nexport type QueueDequeueFunction<T> = () => ExecutionResult<T>;\nexport type QueuePeekFunction<T> = () => T | undefined;\nexport type QueueSizeFunction = () => number;\n\n/**\n * Worker Function Signatures\n */\n\n/**\n * Worker management function signatures\n */\nexport type WorkerStartFunction = (\n  workerId: string,\n  config: Record<string, any>\n) => Promise<InitializationResult>;\nexport type WorkerStopFunction = (workerId: string) => Promise<CleanupResult>;\nexport type WorkerTaskFunction = (\n  workerId: string,\n  task: Record<string, any>\n) => Promise<ExecutionResult>;\n\n/**\n * Scheduler Function Signatures\n */\n\n/**\n * Scheduler function signatures\n */\nexport type ScheduleFunction = (\n  taskId: string,\n  schedule: string,\n  handler: () => Promise<ExecutionResult>\n) => OperationResult;\nexport type UnscheduleFunction = (taskId: string) => OperationResult;\nexport type SchedulerTickFunction = () => Promise<OperationResult>;\n\n/**\n * Network Function Signatures\n */\n\n/**\n * Network operation function signatures\n */\nexport type NetworkRequestFunction = (\n  url: string,\n  options: Record<string, any>\n) => Promise<ExecutionResult>;\nexport type NetworkResponseFunction = (response: any) => ExecutionResult;\nexport type NetworkErrorHandlerFunction = (error: Error) => OperationResult;\n\n/**\n * Database Function Signatures\n */\n\n/**\n * Database operation function signatures\n */\nexport type DatabaseConnectFunction = (\n  connectionString: string\n) => Promise<InitializationResult>;\nexport type DatabaseDisconnectFunction = () => Promise<CleanupResult>;\nexport type DatabaseQueryFunction = (\n  query: string,\n  parameters?: any[]\n) => Promise<ExecutionResult>;\nexport type DatabaseTransactionFunction = (\n  operations: (() => Promise<ExecutionResult>)[]\n) => Promise<ExecutionResult>;\n\n/**\n * File System Function Signatures\n */\n\n/**\n * File system operation function signatures\n */\nexport type FileReadFunction = (\n  path: string\n) => Promise<ExecutionResult<string>>;\nexport type FileWriteFunction = (\n  path: string,\n  content: string\n) => Promise<OperationResult>;\nexport type FileDeleteFunction = (path: string) => Promise<OperationResult>;\nexport type DirectoryCreateFunction = (\n  path: string\n) => Promise<OperationResult>;\n\n/**\n * Composite Function Signatures\n */\n\n/**\n * Complex operation function signatures that combine multiple operations\n */\nexport type BatchOperationFunction<T> = (\n  operations: (() => Promise<ExecutionResult<T>>)[]\n) => Promise<ExecutionResult<T[]>>;\nexport type PipelineFunction<T, R> = (\n  input: T,\n  transformations: TransformationFunction<any, any>[]\n) => Promise<ExecutionResult<R>>;\nexport type WorkflowFunction = (\n  workflowId: string,\n  steps: Record<string, any>[]\n) => Promise<ExecutionResult>;\n\n/**\n * Error Handling Function Signatures\n */\n\n/**\n * Error handling function signatures\n */\nexport type ErrorHandlerFunction = (\n  error: Error,\n  context?: Record<string, any>\n) => OperationResult;\nexport type ErrorRecoveryFunction = (\n  error: Error,\n  context?: Record<string, any>\n) => Promise<OperationResult>;\nexport type ErrorReportingFunction = (\n  error: Error,\n  context?: Record<string, any>\n) => Promise<OperationResult>;\n\n/**\n * Lifecycle Hook Function Signatures\n */\n\n/**\n * Lifecycle hook function signatures\n */\nexport type BeforeHookFunction = (\n  context: Record<string, any>\n) => Promise<OperationResult>;\nexport type AfterHookFunction = (\n  context: Record<string, any>,\n  result: ExecutionResult\n) => Promise<OperationResult>;\nexport type ErrorHookFunction = (\n  context: Record<string, any>,\n  error: Error\n) => Promise<OperationResult>;\n\n/**\n * Middleware Function Signatures\n */\n\n/**\n * Middleware function signatures\n */\nexport type MiddlewareFunction = (\n  context: Record<string, any>,\n  next: () => Promise<ExecutionResult>\n) => Promise<ExecutionResult>;\n\nexport type MiddlewareChainFunction = (\n  context: Record<string, any>,\n  middlewares: MiddlewareFunction[]\n) => Promise<ExecutionResult>;\n\n/**\n * Factory Function Signatures\n */\n\n/**\n * Factory function signatures with proper result types\n */\nexport type FactoryFunction<T> = (\n  config: Record<string, any>\n) => ExecutionResult<T>;\nexport type AsyncFactoryFunction<T> = (\n  config: Record<string, any>\n) => Promise<ExecutionResult<T>>;\nexport type FactoryValidationFunction = (\n  config: Record<string, any>\n) => ValidationResult;\n\n/**\n * Registry Function Signatures\n */\n\n/**\n * Registry operation function signatures\n */\nexport type RegistryRegisterFunction<T> = (\n  key: string,\n  value: T\n) => OperationResult;\nexport type RegistryUnregisterFunction = (key: string) => OperationResult;\nexport type RegistryGetFunction<T> = (key: string) => T | undefined;\nexport type RegistryListFunction = () => string[];\nexport type RegistryHasFunction = (key: string) => boolean;\n\n/**\n * Service Function Signatures\n */\n\n/**\n * Service lifecycle function signatures\n */\nexport type ServiceStartFunction = (\n  serviceId: string,\n  config: Record<string, any>\n) => Promise<InitializationResult>;\nexport type ServiceStopFunction = (serviceId: string) => Promise<CleanupResult>;\nexport type ServiceRestartFunction = (\n  serviceId: string\n) => Promise<ExecutionResult>;\nexport type ServiceHealthCheckFunction = (\n  serviceId: string\n) => Promise<HealthCheckResult>;\nexport type ServiceConfigurationFunction = (\n  serviceId: string,\n  config: Record<string, any>\n) => Promise<OperationResult>;\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/strict.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/utils/arrays.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/utils/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/utils/maps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/types/utils/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
