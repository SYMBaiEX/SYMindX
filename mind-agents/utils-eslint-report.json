Multiple projects found, consider using a single `tsconfig` with `references` to speed up, or use `noWarnOnMultipleProjects` to suppress this warning
[{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/utils/cli-ui.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace `title:·string,·total:·number` with `⏎··title:·string,⏎··total:·number⏎`","line":233,"column":35,"nodeType":null,"messageId":"replace","endLine":233,"endColumn":63,"fix":{"range":[5907,5935],"text":"\n  title: string,\n  total: number\n"}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-console').","line":245,"column":5,"severity":1,"nodeType":null,"fix":{"range":[6347,6385],"text":" "}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":291,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":291,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":321,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":321,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":345,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":345,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8783,8786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8783,8786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":352,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":352,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":360,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":360,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":371,"column":5,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":371,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":371,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9250,9253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9250,9253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":373,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":373,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9318,9321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9318,9321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":387,"column":1,"nodeType":null,"messageId":"insert","endLine":387,"endColumn":1,"fix":{"range":[9574,9574],"text":"  "}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":390,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":390,"endColumn":18,"suggestions":[{"fix":{"range":[9625,9681],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":394,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":394,"endColumn":18,"suggestions":[{"fix":{"range":[9750,9764],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":398,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":398,"endColumn":20,"suggestions":[{"fix":{"range":[9832,9883],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":16,"suggestions":[{"fix":{"range":[838,854],"text":""},"messageId":"removeConsole","data":{"propertyName":"clear"},"desc":"Remove the console.clear()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":14,"suggestions":[{"fix":{"range":[1040,1087],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":14,"suggestions":[{"fix":{"range":[1131,1145],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":14,"suggestions":[{"fix":{"range":[1493,1515],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":57,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":57,"endColumn":14,"suggestions":[{"fix":{"range":[1559,1573],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":115,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":115,"endColumn":14,"suggestions":[{"fix":{"range":[2946,2976],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":14,"suggestions":[{"fix":{"range":[4185,4209],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":207,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":207,"endColumn":14,"suggestions":[{"fix":{"range":[5367,5530],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":221,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":221,"endColumn":14,"suggestions":[{"fix":{"range":[5668,5836],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":250,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":250,"endColumn":18,"suggestions":[{"fix":{"range":[6505,6519],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":269,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":269,"endColumn":16,"suggestions":[{"fix":{"range":[6854,7009],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":278,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":278,"endColumn":16,"suggestions":[{"fix":{"range":[7068,7223],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":301,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":301,"endColumn":18,"suggestions":[{"fix":{"range":[7680,7696],"text":""},"messageId":"removeConsole","data":{"propertyName":"clear"},"desc":"Remove the console.clear()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":338,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":338,"endColumn":18,"suggestions":[{"fix":{"range":[8639,8655],"text":""},"messageId":"removeConsole","data":{"propertyName":"clear"},"desc":"Remove the console.clear()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":387,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":387,"endColumn":18,"suggestions":[{"fix":{"range":[9578,9594],"text":""},"messageId":"removeConsole","data":{"propertyName":"clear"},"desc":"Remove the console.clear()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":412,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":412,"endColumn":14,"suggestions":[{"fix":{"range":[10125,10139],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":426,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":426,"endColumn":14,"suggestions":[{"fix":{"range":[10479,10493],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":428,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":428,"endColumn":14,"suggestions":[{"fix":{"range":[10537,10629],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":432,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":432,"endColumn":14,"suggestions":[{"fix":{"range":[10673,10687],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":4,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":2,"fixableWarningCount":1,"source":"/**\n * CLI UI Utilities\n * Beautiful terminal interface for SYMindX\n */\n\nimport boxen from 'boxen';\nimport chalk from 'chalk';\nimport Table from 'cli-table3';\nimport figlet from 'figlet';\nimport gradient from 'gradient-string';\nimport ora from 'ora';\n\nimport { Extension } from '../types/agent';\nimport { AgentStatusArray } from '../types/utils/arrays.js';\nimport { TypedMap } from '../types/utils/maps.js';\n\n// Cool gradients\nconst symindxGradient = gradient(['#FF006E', '#8338EC', '#3A86FF']);\nconst neonGradient = gradient(['#00F5FF', '#FF00FF', '#FFFF00']);\nconst matrixGradient = gradient(['#00FF00', '#00CC00', '#009900']);\nconst fireGradient = gradient(['#FF6B6B', '#FFA500', '#FFD700']);\n\n/**\n * Display the epic SYMindX banner\n */\nexport async function displayBanner(): Promise<void> {\n  // eslint-disable-next-line no-console\n  console.clear();\n\n  const banner = figlet.textSync('SYMindX', {\n    font: 'ANSI Shadow',\n    horizontalLayout: 'fitted',\n    verticalLayout: 'default',\n  });\n\n  // eslint-disable-next-line no-console\n  console.log(symindxGradient.multiline(banner));\n  // eslint-disable-next-line no-console\n  console.log();\n\n  const subtitle = boxen(\n    chalk.cyan.bold('Modular AI Agent Framework') +\n      '\\n' +\n      chalk.gray('Version 1.0.0 | ' + new Date().toLocaleDateString()),\n    {\n      padding: 1,\n      margin: 0,\n      borderStyle: 'double',\n      borderColor: 'cyan',\n      textAlignment: 'center',\n    }\n  );\n\n  // eslint-disable-next-line no-console\n  console.log(subtitle);\n  // eslint-disable-next-line no-console\n  console.log();\n}\n\n/**\n * Create a cool spinner with custom text\n */\nexport function createSpinner(\n  text: string,\n  type: 'dots' | 'line' | 'star' | 'bouncingBar' = 'dots'\n): ReturnType<typeof ora> {\n  const spinner = ora({\n    text: chalk.cyan(text),\n    spinner: type,\n    color: 'cyan',\n  });\n  return spinner;\n}\n\n/**\n * Display agent status in a beautiful table\n */\nexport function displayAgentStatus(agents: AgentStatusArray): void {\n  const table = new Table({\n    head: [\n      chalk.cyan('Agent'),\n      chalk.cyan('Status'),\n      chalk.cyan('Emotion'),\n      chalk.cyan('Portal'),\n      chalk.cyan('Extensions'),\n    ],\n    style: {\n      head: [],\n      border: ['cyan'],\n    },\n    colWidths: [20, 15, 20, 20, 30],\n  });\n\n  agents.forEach((agent) => {\n    const status =\n      agent.status === 'active'\n        ? chalk.green('● Active')\n        : chalk.red('● Inactive');\n\n    const emotion = `${agent.emotion?.current || 'neutral'} (${Math.round((agent.emotion?.intensity || 0) * 100)}%)`;\n    const emotionColor = getEmotionColor(agent.emotion?.current || 'neutral');\n\n    table.push([\n      chalk.bold(agent.name),\n      status,\n      emotionColor(emotion),\n      chalk.magenta(agent.portal?.name || 'None'),\n      chalk.gray(\n        agent.extensions?.map((e: Extension) => e.name).join(', ') || 'None'\n      ),\n    ]);\n  });\n\n  // eslint-disable-next-line no-console\n  console.log(table.toString());\n}\n\n/**\n * Get color for emotion display\n */\nfunction getEmotionColor(emotion: string): typeof chalk {\n  const emotionColors: TypedMap<typeof chalk> = {\n    happy: chalk.yellow,\n    sad: chalk.blue,\n    angry: chalk.red,\n    anxious: chalk.magenta,\n    confident: chalk.green,\n    neutral: chalk.gray,\n    curious: chalk.cyan,\n    proud: chalk.yellowBright,\n    confused: chalk.dim,\n  };\n  return emotionColors[emotion] || chalk.white;\n}\n\n/**\n * Display runtime metrics\n */\nexport function displayMetrics(metrics: Record<string, unknown>): void {\n  const metricsBox = boxen(\n    chalk.bold('Runtime Metrics\\n\\n') +\n      `${chalk.green('▲')} Uptime: ${chalk.white(formatUptime(metrics.uptime))}\\n` +\n      `${chalk.blue('◆')} Memory: ${chalk.white(formatMemory(metrics.memory))}\\n` +\n      `${chalk.yellow('●')} Active Agents: ${chalk.white(metrics.activeAgents)}\\n` +\n      `${chalk.magenta('⚡')} Commands Processed: ${chalk.white(metrics.commandsProcessed)}\\n` +\n      `${chalk.cyan('🔮')} Portal Requests: ${chalk.white(metrics.portalRequests)}`,\n    {\n      padding: 1,\n      borderStyle: 'round',\n      borderColor: 'green',\n      dimBorder: false,\n    }\n  );\n\n  // eslint-disable-next-line no-console\n  console.log(metricsBox);\n}\n\n/**\n * Format uptime nicely\n */\nfunction formatUptime(ms: number): string {\n  const seconds = Math.floor(ms / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  if (days > 0) return `${days}d ${hours % 24}h`;\n  if (hours > 0) return `${hours}h ${minutes % 60}m`;\n  if (minutes > 0) return `${minutes}m ${seconds % 60}s`;\n  return `${seconds}s`;\n}\n\n/**\n * Format memory usage\n */\nfunction formatMemory(bytes: number): string {\n  const mb = bytes / 1024 / 1024;\n  return `${mb.toFixed(2)} MB`;\n}\n\n/**\n * Animated loading sequence\n */\nexport async function animateLoading(\n  text: string,\n  duration: number = 2000\n): Promise<void> {\n  const frames = ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'];\n  const spinner = ora({\n    text: chalk.cyan(text),\n    spinner: {\n      interval: 80,\n      frames,\n    },\n  }).start();\n\n  await new Promise((resolve) => setTimeout(resolve, duration));\n  spinner.succeed(chalk.green(text + ' ✓'));\n}\n\n/**\n * Display error in a cool way\n */\nexport function displayError(error: string): void {\n  // eslint-disable-next-line no-console\n  console.log(\n    boxen(chalk.red.bold('⚠ ERROR ⚠\\n\\n') + chalk.white(error), {\n      padding: 1,\n      borderStyle: 'double',\n      borderColor: 'red',\n    })\n  );\n}\n\n/**\n * Display success message\n */\nexport function displaySuccess(message: string): void {\n  // eslint-disable-next-line no-console\n  console.log(\n    boxen(chalk.green.bold('✅ SUCCESS\\n\\n') + chalk.white(message), {\n      padding: 1,\n      borderStyle: 'round',\n      borderColor: 'green',\n    })\n  );\n}\n\n/**\n * Create a progress bar\n */\nexport function createProgressBar(title: string, total: number): { update: (value: number) => void } {\n  let current = 0;\n\n  const update = (value: number): void => {\n    current = value;\n    const percentage = Math.floor((current / total) * 100);\n    const filled = Math.floor((current / total) * 30);\n    const empty = 30 - filled;\n\n    const bar = chalk.green('█'.repeat(filled)) + chalk.gray('░'.repeat(empty));\n    const text = `${title} [${bar}] ${percentage}%`;\n\n    // eslint-disable-next-line no-console\n    process.stdout.write('\\r' + text);\n\n    if (current >= total) {\n      // eslint-disable-next-line no-console\n      console.log(); // New line after completion\n    }\n  };\n\n  return { update };\n}\n\n/**\n * Display chat message with style\n */\nexport function displayChatMessage(\n  from: string,\n  message: string,\n  isAgent: boolean = false\n): void {\n  const timestamp = new Date().toLocaleTimeString();\n\n  if (isAgent) {\n    // eslint-disable-next-line no-console\n    console.log(\n      chalk.gray(`[${timestamp}]`) +\n        ' ' +\n        neonGradient(from) +\n        chalk.cyan(': ') +\n        chalk.white(message)\n    );\n  } else {\n    // eslint-disable-next-line no-console\n    console.log(\n      chalk.gray(`[${timestamp}]`) +\n        ' ' +\n        chalk.yellow(from) +\n        chalk.gray(': ') +\n        chalk.white(message)\n    );\n  }\n}\n\n/**\n * Matrix-style animation\n */\nexport async function matrixRain(duration: number = 3000) {\n  const columns = process.stdout.columns || 80;\n  const rows = process.stdout.rows || 24;\n  const drops: number[] = Array(Math.floor(columns / 2)).fill(0);\n\n  const chars =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%^&*()_+-=[]{}|;:,.<>?';\n\n  const interval = setInterval(() => {\n    // eslint-disable-next-line no-console\n    console.clear();\n\n    for (let i = 0; i < drops.length; i++) {\n      const x = i * 2;\n      const y = drops[i];\n\n      if (\n        y !== undefined &&\n        y < rows &&\n        process.stdout.cursorTo &&\n        process.stdout.write\n      ) {\n        try {\n          const safeY = y ?? 0;\n          process.stdout.cursorTo(x, safeY);\n          const char = chars[Math.floor(Math.random() * chars.length)];\n          const gradientChar = safeGradient(char, matrixGradient);\n          if (process.stdout.write) {\n            process.stdout.write(gradientChar);\n          }\n        } catch (error) {\n          // Silently handle cursor positioning errors\n        }\n      }\n\n      if (drops[i] !== undefined) {\n        drops[i] = (drops[i] ?? 0) + 1;\n        if ((drops[i] ?? 0) * Math.random() > rows) {\n          drops[i] = 0;\n        }\n      }\n    }\n  }, 50);\n\n  setTimeout(() => {\n    clearInterval(interval);\n    // eslint-disable-next-line no-console\n    console.clear();\n  }, duration);\n}\n\n/**\n * Safe gradient function with fallback\n */\nfunction safeGradient(text: string | undefined, gradientFn: any): string {\n  if (!text || text.trim() === '') {\n    return '';\n  }\n\n  try {\n    return gradientFn(text);\n  } catch (error) {\n    return text; // Fallback to plain text\n  }\n}\n\n/**\n * Display system status with live updates\n */\nexport function createStatusDashboard() {\n  const dashboard = {\n    agents: new Map(),\n    metrics: {\n      uptime: 0,\n      memory: 0,\n      activeAgents: 0,\n      commandsProcessed: 0,\n      portalRequests: 0,\n    },\n\n    update(data: any) {\n      if (data.agents) {\n        data.agents.forEach((agent: any) => {\n          this.agents.set(agent.id, agent);\n        });\n      }\n\n      if (data.metrics) {\n        Object.assign(this.metrics, data.metrics);\n      }\n\n      this.render();\n    },\n\n    render(): void {\n      // eslint-disable-next-line no-console\n    console.clear();\n      displayBanner();\n\n      console.log(chalk.cyan.bold('\\n📊 System Dashboard\\n'));\n\n      // Display metrics\n      displayMetrics(this.metrics);\n      console.log();\n\n      // Display agents\n      if (this.agents.size > 0) {\n        console.log(chalk.cyan.bold('🤖 Active Agents\\n'));\n        displayAgentStatus(Array.from(this.agents.values()));\n      }\n    },\n  };\n\n  return dashboard;\n}\n\n/**\n * Cool shutdown animation\n */\nexport async function animateShutdown(): Promise<void> {\n  // eslint-disable-next-line no-console\n  console.log();\n  const messages = [\n    '🔌 Disconnecting neural networks...',\n    '💾 Saving agent memories...',\n    '🧠 Preserving cognitive states...',\n    '🌐 Closing portal connections...',\n    '✨ Shutting down gracefully...',\n  ];\n\n  for (const msg of messages) {\n    await animateLoading(msg, 500);\n  }\n\n  // eslint-disable-next-line no-console\n  console.log();\n  // eslint-disable-next-line no-console\n  console.log(\n    fireGradient.multiline(figlet.textSync('Goodbye!', { font: 'Small' }))\n  );\n  // eslint-disable-next-line no-console\n  console.log();\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/utils/config-resolver.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":235,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6666,6669],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6666,6669],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":235,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6672,6675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6672,6675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":247,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6869,6872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6869,6872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":247,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6875,6878],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6875,6878],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":271,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7378,7381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7378,7381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":271,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7384,7387],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7384,7387],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":296,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8034,8037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8034,8037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":296,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8040,8043],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8040,8043],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":412,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":412,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11622,11625],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11622,11625],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":412,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":412,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11628,11631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11628,11631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":423,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":423,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12088,12091],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12088,12091],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":19,"suggestions":[{"fix":{"range":[1202,1269],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":49,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":49,"endColumn":20,"suggestions":[{"fix":{"range":[1363,1427],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Configuration Resolver\n *\n * Transforms clean TypeScript character configuration to runtime configuration\n * with environment variable resolution and sensible defaults\n */\n\nimport {\n  CharacterConfig,\n  EnvironmentConfig,\n  ConfigDefaults,\n} from '../types/character.js';\nimport {\n  ExtensionConfigArray,\n  PortalConfigArray,\n} from '../types/utils/arrays.js';\n\nimport {\n  validateEnvironmentConfig,\n  ValidatedEnvironmentConfig,\n} from './config-validator.js';\n\nexport class ConfigResolver {\n  private envConfig: EnvironmentConfig | null = null;\n  private validatedConfig: ValidatedEnvironmentConfig | null = null;\n\n  constructor() {\n    // Don't load environment config immediately - wait until first use\n  }\n\n  /**\n   * Load environment variables with defaults using the new validator\n   */\n  private loadEnvironmentConfig(): EnvironmentConfig {\n    // Use the new validator to get a safe configuration\n    const validationResult = validateEnvironmentConfig();\n\n    // Store the validated config for later use\n    this.validatedConfig = validationResult.config;\n\n    // Log validation results\n    if (validationResult.warnings.length > 0) {\n      // eslint-disable-next-line no-console\n      console.warn('Configuration warnings:', validationResult.warnings);\n    }\n\n    if (!validationResult.valid) {\n      // eslint-disable-next-line no-console\n      console.error('Configuration errors:', validationResult.errors);\n      throw new Error(\n        'Invalid environment configuration. Please check your environment variables.'\n      );\n    }\n\n    // Convert validated config to EnvironmentConfig format\n    return this.convertToEnvironmentConfig(validationResult.config);\n  }\n\n  /**\n   * Convert ValidatedEnvironmentConfig to EnvironmentConfig\n   */\n  private convertToEnvironmentConfig(\n    validated: ValidatedEnvironmentConfig\n  ): EnvironmentConfig {\n    const config: EnvironmentConfig = {\n      // Core settings\n      OLLAMA_BASE_URL: validated.OLLAMA_BASE_URL,\n      ENABLE_OPENAI_EMBEDDINGS: validated.ENABLE_OPENAI_EMBEDDINGS,\n      EMBEDDING_PROVIDER: validated.EMBEDDING_PROVIDER,\n      EMBEDDING_DIMENSIONS: validated.EMBEDDING_DIMENSIONS,\n\n      // Legacy models\n      GROQ_MODEL: validated.GROQ_MODEL,\n      OLLAMA_MODEL: validated.OLLAMA_MODEL,\n      ANTHROPIC_MODEL: validated.ANTHROPIC_MODEL,\n    };\n\n    // Add API keys if they exist\n    Object.entries(validated.apiKeys).forEach(([key, value]) => {\n      if (value) {\n        (config as Record<string, unknown>)[key] = value;\n      }\n    });\n\n    // Add portal models if they exist\n    Object.entries(validated.portalModels).forEach(([key, value]) => {\n      if (value) {\n        (config as Record<string, unknown>)[key] = value;\n      }\n    });\n\n    // Add portal settings\n    Object.entries(validated.portalSettings).forEach(([key, value]) => {\n      (config as Record<string, unknown>)[key] = value;\n    });\n\n    return config;\n  }\n\n  /**\n   * Get validated configuration (lazily loaded)\n   */\n  private getValidatedConfig(): ValidatedEnvironmentConfig {\n    if (!this.validatedConfig) {\n      // This will trigger loadEnvironmentConfig if needed\n      this.ensureEnvConfig();\n    }\n    return this.validatedConfig!;\n  }\n\n  /**\n   * Ensure environment config is loaded\n   */\n  private ensureEnvConfig(): EnvironmentConfig {\n    if (!this.envConfig) {\n      this.envConfig = this.loadEnvironmentConfig();\n    }\n    return this.envConfig;\n  }\n\n  /**\n   * Resolve character configuration to runtime configuration\n   */\n  public resolveCharacterConfig(\n    config: CharacterConfig\n  ): Record<string, unknown> {\n    // Ensure environment is loaded first\n    this.ensureEnvConfig();\n    return {\n      id: config.id,\n      name: config.name,\n      description: config.description,\n      version: config.version,\n\n      personality: config.personality,\n\n      autonomous: this.resolveAutonomousConfig(config.autonomous),\n\n      modules: {\n        memory: this.resolveMemoryConfig(config.memory),\n        emotion: this.resolveEmotionConfig(config.emotion),\n        cognition: this.resolveCognitionConfig(config.cognition),\n      },\n\n      communication: config.communication,\n      capabilities: config.capabilities,\n\n      extensions: this.resolveExtensionsConfig(config.extensions),\n      portals: this.resolvePortalsConfig(config.portals),\n\n      autonomous_behaviors: config.autonomous_behaviors,\n      human_interaction: config.human_interaction,\n      ethics: config.ethics,\n      development: config.development,\n    };\n  }\n\n  /**\n   * Resolve autonomous configuration\n   */\n  private resolveAutonomousConfig(\n    config: Record<string, unknown>\n  ): Record<string, unknown> {\n    return {\n      ...config,\n      enabled: config.enabled ?? true,\n    };\n  }\n\n  /**\n   * Resolve memory configuration with environment variables\n   */\n  private resolveMemoryConfig(\n    config: Record<string, unknown>\n  ): Record<string, unknown> {\n    const validatedConfig = this.getValidatedConfig();\n    const resolved = {\n      type: config.type,\n      config: {\n        ...config.config,\n        enable_embeddings: validatedConfig.ENABLE_OPENAI_EMBEDDINGS\n          ? 'true'\n          : 'false',\n        embedding_provider: validatedConfig.EMBEDDING_PROVIDER,\n        embedding_model: this.getEmbeddingModel(),\n        embedding_dimensions: this.getEmbeddingDimensions(),\n      },\n    };\n\n    // Add provider-specific configuration\n    if (config.type === 'sqlite') {\n      resolved.config.database_path =\n        config.config.database_path || './data/memories.db';\n    }\n\n    return resolved;\n  }\n\n  /**\n   * Get embedding model based on provider\n   */\n  private getEmbeddingModel(): string {\n    const validatedConfig = this.getValidatedConfig();\n    if (validatedConfig.EMBEDDING_PROVIDER === 'ollama') {\n      // Use granular model control, fallback to legacy\n      return (\n        validatedConfig.portalModels.OLLAMA_EMBEDDING_MODEL ||\n        validatedConfig.OLLAMA_MODEL ||\n        ConfigDefaults.OLLAMA_EMBEDDING_MODEL!\n      );\n    }\n    // Use granular model control for OpenAI\n    return (\n      validatedConfig.portalModels.OPENAI_EMBEDDING_MODEL ||\n      ConfigDefaults.OPENAI_EMBEDDING_MODEL!\n    );\n  }\n\n  /**\n   * Get embedding dimensions based on model\n   */\n  private getEmbeddingDimensions(): number {\n    const validatedConfig = this.getValidatedConfig();\n    const model = this.getEmbeddingModel();\n    return (\n      ConfigDefaults.EMBEDDING_DIMENSIONS_MAP[\n        model as keyof typeof ConfigDefaults.EMBEDDING_DIMENSIONS_MAP\n      ] || validatedConfig.EMBEDDING_DIMENSIONS\n    );\n  }\n\n  /**\n   * Resolve emotion configuration\n   */\n  private resolveEmotionConfig(config: any): any {\n    return {\n      type: config.type,\n      config: {\n        ...config.config,\n      },\n    };\n  }\n\n  /**\n   * Resolve cognition configuration\n   */\n  private resolveCognitionConfig(config: any): any {\n    return {\n      type: config.type,\n      config: {\n        ...config.config,\n      },\n    };\n  }\n\n  /**\n   * Resolve extensions configuration\n   */\n  private resolveExtensionsConfig(\n    extensions: ExtensionConfigArray\n  ): ExtensionConfigArray {\n    return extensions.map((ext) => ({\n      ...ext,\n      config: this.resolveExtensionConfig(ext.name, ext.config),\n    }));\n  }\n\n  /**\n   * Resolve individual extension configuration\n   */\n  private resolveExtensionConfig(name: string, config: any): any {\n    const validatedConfig = this.getValidatedConfig();\n    switch (name) {\n      case 'telegram':\n        return {\n          ...config,\n          bot_token: validatedConfig.apiKeys.TELEGRAM_BOT_TOKEN,\n        };\n      default:\n        return config;\n    }\n  }\n\n  /**\n   * Resolve portals configuration with environment variables\n   */\n  private resolvePortalsConfig(portals: PortalConfigArray): PortalConfigArray {\n    return portals\n      .map((portal) => this.resolvePortalConfig(portal))\n      .filter((portal) => portal.enabled !== false);\n  }\n\n  /**\n   * Resolve individual portal configuration\n   */\n  private resolvePortalConfig(portal: any): any {\n    const resolved = {\n      name: portal.name,\n      type: portal.type,\n      enabled: this.getPortalEnabled(\n        portal.type,\n        portal.enabled,\n        portal.capabilities\n      ),\n      primary: portal.primary || false,\n      capabilities: portal.capabilities,\n      config: this.resolvePortalSpecificConfig(portal.type, portal.config),\n    };\n\n    return resolved;\n  }\n\n  /**\n   * Get portal enabled status from environment based on capabilities\n   */\n  private getPortalEnabled(\n    type: string,\n    _defaultEnabled: boolean,\n    capabilities: string[] = []\n  ): boolean {\n    const validatedConfig = this.getValidatedConfig();\n\n    // Special handling for OpenAI (backward compatibility)\n    if (type === 'openai') {\n      if (!validatedConfig.apiKeys.OPENAI_API_KEY) return false;\n\n      const hasChatCapability =\n        capabilities.includes('chat_generation') ||\n        capabilities.includes('text_generation');\n      const hasEmbeddingCapability = capabilities.includes(\n        'embedding_generation'\n      );\n      const hasImageCapability = capabilities.includes('image_generation');\n\n      // Enable based on specific capability flags\n      if (\n        hasChatCapability &&\n        (validatedConfig.portalSettings.OPENAI_CHAT_ENABLED ?? false)\n      )\n        return true;\n      if (\n        hasEmbeddingCapability &&\n        (validatedConfig.portalSettings.OPENAI_EMBEDDINGS_ENABLED ?? false)\n      )\n        return true;\n      if (\n        hasImageCapability &&\n        (validatedConfig.portalSettings.OPENAI_IMAGE_ENABLED ?? false)\n      )\n        return true;\n\n      // If no specific capabilities defined, use legacy logic\n      if (capabilities.length === 0) {\n        return (\n          (validatedConfig.portalSettings.OPENAI_CHAT_ENABLED ?? false) ||\n          (validatedConfig.portalSettings.OPENAI_EMBEDDINGS_ENABLED ?? false) ||\n          (validatedConfig.portalSettings.OPENAI_IMAGE_ENABLED ?? false)\n        );\n      }\n\n      return false;\n    }\n\n    // Generic handling for all other portals\n    const portalName = type.toUpperCase().replace('.', '').replace('-', '_');\n    const mainEnabled =\n      validatedConfig.portalSettings[`${portalName}_ENABLED`] ?? false;\n    const apiKey =\n      validatedConfig.apiKeys[\n        `${portalName}_API_KEY` as keyof typeof validatedConfig.apiKeys\n      ];\n\n    // Check main toggle and API key (except Ollama which doesn't need API key)\n    if (!mainEnabled || (type !== 'ollama' && !apiKey)) {\n      return false;\n    }\n\n    // Check capability-specific toggles\n    const hasChatCapability =\n      capabilities.includes('chat_generation') ||\n      capabilities.includes('text_generation');\n    const hasEmbeddingCapability = capabilities.includes(\n      'embedding_generation'\n    );\n    const hasImageCapability = capabilities.includes('image_generation');\n\n    if (hasChatCapability) {\n      const chatEnabled =\n        validatedConfig.portalSettings[`${portalName}_CHAT_ENABLED`] ?? false;\n      if (chatEnabled === false) return false;\n    }\n\n    if (hasEmbeddingCapability) {\n      const embeddingEnabled =\n        validatedConfig.portalSettings[`${portalName}_EMBEDDING_ENABLED`] ??\n        false;\n      if (embeddingEnabled === false) return false;\n    }\n\n    if (hasImageCapability) {\n      const imageEnabled =\n        validatedConfig.portalSettings[`${portalName}_IMAGE_ENABLED`] ?? false;\n      if (imageEnabled === false) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Resolve portal-specific configuration\n   */\n  private resolvePortalSpecificConfig(type: string, config: any): any {\n    const validatedConfig = this.getValidatedConfig();\n    const baseConfig = {\n      max_tokens: config.max_tokens || ConfigDefaults.MAX_TOKENS,\n      temperature: config.temperature || ConfigDefaults.TEMPERATURE,\n    };\n\n    // Get the portal name in uppercase for environment variable lookup\n    const portalName = type.toUpperCase().replace('.', '').replace('-', '_');\n\n    // Build configuration with granular model controls\n    const portalConfig: any = {\n      ...baseConfig,\n      apiKey:\n        validatedConfig.apiKeys[\n          `${portalName}_API_KEY` as keyof typeof validatedConfig.apiKeys\n        ],\n    };\n\n    // Add granular model configurations\n    const chatModel = validatedConfig.portalModels[`${portalName}_CHAT_MODEL`];\n    const embeddingModel =\n      validatedConfig.portalModels[`${portalName}_EMBEDDING_MODEL`];\n    const imageModel =\n      validatedConfig.portalModels[`${portalName}_IMAGE_MODEL`];\n    const toolModel = validatedConfig.portalModels[`${portalName}_TOOL_MODEL`];\n\n    // Set models based on what's available\n    if (chatModel) {\n      portalConfig.chatModel = chatModel;\n      // Keep legacy 'model' for backward compatibility\n      portalConfig.model = chatModel;\n    }\n\n    if (embeddingModel) {\n      portalConfig.embeddingModel = embeddingModel;\n      // Add dimensions if it's a known model\n      const dimensions =\n        ConfigDefaults.EMBEDDING_DIMENSIONS_MAP[\n          embeddingModel as keyof typeof ConfigDefaults.EMBEDDING_DIMENSIONS_MAP\n        ];\n      if (dimensions) {\n        portalConfig.embeddingDimensions = dimensions;\n      }\n    }\n\n    if (imageModel) {\n      portalConfig.imageModel = imageModel;\n    }\n\n    if (toolModel) {\n      portalConfig.toolModel = toolModel;\n    }\n\n    // Portal-specific overrides\n    switch (type) {\n      case 'ollama':\n        portalConfig.baseUrl = validatedConfig.OLLAMA_BASE_URL;\n        break;\n\n      case 'openai':\n        // Ensure backward compatibility with legacy model names\n        if (\n          !portalConfig.chatModel &&\n          validatedConfig.portalModels.OPENAI_CHAT_MODEL\n        ) {\n          portalConfig.chatModel =\n            validatedConfig.portalModels.OPENAI_CHAT_MODEL;\n          portalConfig.model = validatedConfig.portalModels.OPENAI_CHAT_MODEL;\n        }\n        if (\n          !portalConfig.embeddingModel &&\n          validatedConfig.portalModels.OPENAI_EMBEDDING_MODEL\n        ) {\n          portalConfig.embeddingModel =\n            validatedConfig.portalModels.OPENAI_EMBEDDING_MODEL;\n          portalConfig.embeddingDimensions = this.getEmbeddingDimensions();\n        }\n        break;\n\n      case 'groq':\n        // Fallback to legacy GROQ_MODEL if specific models not set\n        if (!portalConfig.chatModel && validatedConfig.GROQ_MODEL) {\n          portalConfig.chatModel = validatedConfig.GROQ_MODEL;\n          portalConfig.model = validatedConfig.GROQ_MODEL;\n        }\n        break;\n\n      case 'anthropic':\n        // Fallback to legacy ANTHROPIC_MODEL if specific models not set\n        if (!portalConfig.chatModel && validatedConfig.ANTHROPIC_MODEL) {\n          portalConfig.chatModel = validatedConfig.ANTHROPIC_MODEL;\n          portalConfig.model = validatedConfig.ANTHROPIC_MODEL;\n        }\n        break;\n    }\n\n    return portalConfig;\n  }\n\n  /**\n   * Validate required environment variables\n   */\n  public validateEnvironment(): { valid: boolean; missing: string[] } {\n    try {\n      // Use the new validation system\n      const validationResult = validateEnvironmentConfig();\n\n      return {\n        valid: validationResult.valid,\n        missing: validationResult.errors,\n      };\n    } catch (error) {\n      return {\n        valid: false,\n        missing: [\n          error instanceof Error ? error.message : 'Unknown validation error',\n        ],\n      };\n    }\n  }\n}\n\n/**\n * Singleton instance for global access\n */\nexport const configResolver = new ConfigResolver();\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/utils/config-validator.test.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":12,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":12,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Configuration Validator Tests\n *\n * Comprehensive test suite for the configuration validation system\n */\n\nimport { describe, it, expect, beforeEach, afterEach } from 'bun:test';\n\nimport { ConfigValidator } from './config-validator.js';\n\ndescribe('ConfigValidator', () => {\n  let originalEnv: NodeJS.ProcessEnv;\n\n  beforeEach(() => {\n    // Save original environment\n    originalEnv = { ...process.env };\n\n    // Clear all relevant environment variables\n    const keysToDelete = [\n      'GROQ_API_KEY',\n      'OPENAI_API_KEY',\n      'ANTHROPIC_API_KEY',\n      'TELEGRAM_BOT_TOKEN',\n      'OLLAMA_BASE_URL',\n      'ENABLE_OPENAI_EMBEDDINGS',\n      'EMBEDDING_PROVIDER',\n      'EMBEDDING_DIMENSIONS',\n      'GROQ_ENABLED',\n      'OPENAI_ENABLED',\n      'ANTHROPIC_ENABLED',\n      'OLLAMA_ENABLED',\n    ];\n\n    keysToDelete.forEach((key) => {\n      delete process.env[key];\n    });\n  });\n\n  afterEach(() => {\n    // Restore original environment\n    process.env = originalEnv;\n  });\n\n  describe('validateEnvironmentConfig', () => {\n    it('should create valid configuration with defaults when no environment variables are set', () => {\n      const result = ConfigValidator.validateEnvironmentConfig();\n\n      expect(result.isValid).toBe(false); // Should be false because no AI providers are configured\n      expect(result.config.OLLAMA_BASE_URL).toBe('http://localhost:11434');\n      expect(result.config.ENABLE_OPENAI_EMBEDDINGS).toBe(true);\n      expect(result.config.EMBEDDING_PROVIDER).toBe('openai');\n      expect(result.config.EMBEDDING_DIMENSIONS).toBe(3072);\n    });\n\n    it('should include valid API keys when provided', () => {\n      process.env.GROQ_API_KEY =\n        'gsk_test_key_1234567890123456789012345678901234';\n      process.env.OPENAI_API_KEY =\n        'sk-test_key_1234567890123456789012345678901234';\n      process.env.GROQ_ENABLED = 'true';\n      process.env.OPENAI_ENABLED = 'true';\n\n      const result = ConfigValidator.validateEnvironmentConfig();\n\n      expect(result.isValid).toBe(true);\n      expect(result.config.apiKeys.GROQ_API_KEY).toBe(\n        'gsk_test_key_1234567890123456789012345678901234'\n      );\n      expect(result.config.apiKeys.OPENAI_API_KEY).toBe(\n        'sk-test_key_1234567890123456789012345678901234'\n      );\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should reject invalid API key formats', () => {\n      process.env.GROQ_API_KEY = 'invalid_key';\n      process.env.OPENAI_API_KEY = 'also_invalid';\n\n      const result = ConfigValidator.validateEnvironmentConfig();\n\n      expect(result.warnings).toContain('Invalid format for GROQ_API_KEY');\n      expect(result.warnings).toContain('Invalid format for OPENAI_API_KEY');\n      expect(result.config.apiKeys.GROQ_API_KEY).toBeUndefined();\n      expect(result.config.apiKeys.OPENAI_API_KEY).toBeUndefined();\n    });\n\n    it('should handle boolean environment variables correctly', () => {\n      process.env.ENABLE_OPENAI_EMBEDDINGS = 'false';\n      process.env.GROQ_ENABLED = 'true';\n      process.env.OPENAI_ENABLED = '1';\n\n      const result = ConfigValidator.validateEnvironmentConfig();\n\n      expect(result.config.ENABLE_OPENAI_EMBEDDINGS).toBe(false);\n      expect(result.config.portalSettings.GROQ_ENABLED).toBe(true);\n      expect(result.config.portalSettings.OPENAI_ENABLED).toBe(true);\n    });\n\n    it('should validate positive integer values', () => {\n      process.env.EMBEDDING_DIMENSIONS = '1536';\n\n      const result = ConfigValidator.validateEnvironmentConfig();\n\n      expect(result.config.EMBEDDING_DIMENSIONS).toBe(1536);\n    });\n\n    it('should handle invalid integer values gracefully', () => {\n      process.env.EMBEDDING_DIMENSIONS = '-100';\n\n      const result = ConfigValidator.validateEnvironmentConfig();\n\n      expect(result.config.EMBEDDING_DIMENSIONS).toBe(3072); // Should use default\n    });\n\n    it('should validate embedding provider values', () => {\n      process.env.EMBEDDING_PROVIDER = 'ollama';\n\n      const result = ConfigValidator.validateEnvironmentConfig();\n\n      expect(result.config.EMBEDDING_PROVIDER).toBe('ollama');\n    });\n\n    it('should handle invalid embedding provider values', () => {\n      process.env.EMBEDDING_PROVIDER = 'invalid_provider';\n\n      const result = ConfigValidator.validateEnvironmentConfig();\n\n      expect(result.config.EMBEDDING_PROVIDER).toBe('openai'); // Should use default\n    });\n\n    it('should validate Ollama URL format', () => {\n      process.env.OLLAMA_BASE_URL = 'not_a_url';\n      process.env.OLLAMA_ENABLED = 'true';\n\n      const result = ConfigValidator.validateEnvironmentConfig();\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('Invalid Ollama base URL format');\n    });\n\n    it('should validate telegram bot token format', () => {\n      process.env.TELEGRAM_BOT_TOKEN =\n        '1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghX';\n\n      const result = ConfigValidator.validateEnvironmentConfig();\n\n      expect(result.config.apiKeys.TELEGRAM_BOT_TOKEN).toBe(\n        '1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghX'\n      );\n    });\n\n    it('should reject invalid telegram bot token format', () => {\n      process.env.TELEGRAM_BOT_TOKEN = 'invalid_token_format';\n\n      const result = ConfigValidator.validateEnvironmentConfig();\n\n      expect(result.warnings).toContain(\n        'Invalid format for TELEGRAM_BOT_TOKEN'\n      );\n      expect(result.config.apiKeys.TELEGRAM_BOT_TOKEN).toBeUndefined();\n    });\n\n    it('should require at least one AI provider', () => {\n      // No AI providers configured\n      const result = ConfigValidator.validateEnvironmentConfig();\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain(\n        'At least one AI provider must be configured with valid API key'\n      );\n    });\n\n    it('should pass validation with Ollama enabled', () => {\n      process.env.OLLAMA_ENABLED = 'true';\n\n      const result = ConfigValidator.validateEnvironmentConfig();\n\n      expect(result.isValid).toBe(true);\n      expect(result.config.portalSettings.OLLAMA_ENABLED).toBe(true);\n    });\n\n    it('should validate OpenAI embeddings configuration', () => {\n      process.env.ENABLE_OPENAI_EMBEDDINGS = 'true';\n      process.env.EMBEDDING_PROVIDER = 'openai';\n      // Missing OPENAI_API_KEY\n\n      const result = ConfigValidator.validateEnvironmentConfig();\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain(\n        'OpenAI API key required when using OpenAI embeddings'\n      );\n    });\n\n    it('should handle portal capability settings correctly', () => {\n      process.env.GROQ_API_KEY =\n        'gsk_test_key_1234567890123456789012345678901234';\n      process.env.GROQ_ENABLED = 'true';\n      process.env.GROQ_CHAT_ENABLED = 'true';\n      process.env.GROQ_EMBEDDING_ENABLED = 'false';\n\n      const result = ConfigValidator.validateEnvironmentConfig();\n\n      expect(result.config.portalSettings.GROQ_ENABLED).toBe(true);\n      expect(result.config.portalSettings.GROQ_CHAT_ENABLED).toBe(true);\n      expect(result.config.portalSettings.GROQ_EMBEDDING_ENABLED).toBe(false);\n    });\n\n    it('should include portal models when configured', () => {\n      process.env.GROQ_CHAT_MODEL = 'llama-3.1-70b-versatile';\n      process.env.OPENAI_CHAT_MODEL = 'gpt-4.1-mini';\n\n      const result = ConfigValidator.validateEnvironmentConfig();\n\n      expect(result.config.portalModels.GROQ_CHAT_MODEL).toBe(\n        'llama-3.1-70b-versatile'\n      );\n      expect(result.config.portalModels.OPENAI_CHAT_MODEL).toBe('gpt-4.1-mini');\n    });\n\n    it('should provide comprehensive error and warning information', () => {\n      process.env.GROQ_API_KEY = 'invalid';\n      process.env.OLLAMA_BASE_URL = 'not_a_url';\n      process.env.ENABLE_OPENAI_EMBEDDINGS = 'true';\n      process.env.EMBEDDING_PROVIDER = 'openai';\n      process.env.OLLAMA_ENABLED = 'true';\n\n      const result = ConfigValidator.validateEnvironmentConfig();\n\n      expect(result.isValid).toBe(false);\n      expect(result.warnings.length).toBeGreaterThan(0);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/utils/config-validator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/utils/logger.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":211,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":211,"endColumn":22,"suggestions":[{"fix":{"range":[5506,5538],"text":""},"messageId":"removeConsole","data":{"propertyName":"debug"},"desc":"Remove the console.debug()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":215,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":215,"endColumn":21,"suggestions":[{"fix":{"range":[5635,5666],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":219,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":219,"endColumn":21,"suggestions":[{"fix":{"range":[5763,5794],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":224,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":224,"endColumn":22,"suggestions":[{"fix":{"range":[5919,5951],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":331,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":331,"endColumn":16,"suggestions":[{"fix":{"range":[8839,8951],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":335,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":335,"endColumn":16,"suggestions":[{"fix":{"range":[8999,9212],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":340,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":340,"endColumn":18,"suggestions":[{"fix":{"range":[9284,9501],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":345,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":345,"endColumn":16,"suggestions":[{"fix":{"range":[9555,9667],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":356,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":356,"endColumn":16,"suggestions":[{"fix":{"range":[9926,9956],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/cid/CursorProjects/symindx/mind-agents/src/utils/type-helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
